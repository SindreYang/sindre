{"config":{"lang":["en","zh"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Sindre \u5e93\u6587\u6863","text":"<p>\u4e00\u4e2a\u529f\u80fd\u4e30\u5bcc\u7684Python\u5de5\u5177\u5e93\uff0c\u63d0\u4f9bLMDB\u6570\u636e\u5e93\u64cd\u4f5c\u30013D\u5904\u7406\u3001\u62a5\u544a\u751f\u6210\u3001Windows\u5de5\u5177\u7b49\u529f\u80fd</p> <p> </p>"},{"location":"#_1","title":"\ud83d\udccb \u76ee\u5f55","text":"<ul> <li>\u5feb\u901f\u5f00\u59cb</li> <li>\u6838\u5fc3\u529f\u80fd</li> <li>\u5b89\u88c5\u6307\u5357</li> <li>\u4f7f\u7528\u793a\u4f8b</li> <li>API\u6587\u6863</li> <li>\u6d4b\u8bd5\u6307\u5357</li> <li>\u8d21\u732e\u6307\u5357</li> </ul>"},{"location":"#_2","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"#_3","title":"\u5b89\u88c5","text":"<pre><code># \u4ecePyPI\u5b89\u88c5\npip install sindre\n\n# \u4ece\u6e90\u7801\u5b89\u88c5\ngit clone https://github.com/SindreYang/sindre.git\ncd sindre\npip install -e .\n</code></pre>"},{"location":"#_4","title":"\u6700\u5c0f\u793a\u4f8b","text":"<pre><code>import sindre\n\n# LMDB\u6570\u636e\u5e93\u64cd\u4f5c\nfrom sindre.lmdb import Reader, Writer\nimport numpy as np\n\n# \u5199\u5165\u6570\u636e\nwriter = Writer('./data', map_size_limit=1024*100)  # 100GB\nwriter.put_samples({0: {'points': np.random.rand(100, 3)}})\nwriter.close()\n\n# \u8bfb\u53d6\u6570\u636e\nreader = Reader('./data')\ndata = reader[0]\nprint(f\"\u8bfb\u53d6\u5230 {len(data['points'])} \u4e2a\u70b9\")\nreader.close()\n</code></pre>"},{"location":"#_5","title":"\ud83c\udfaf \u6838\u5fc3\u529f\u80fd","text":"\u6a21\u5757 \u529f\u80fd\u63cf\u8ff0 \u9002\u7528\u573a\u666f LMDB \u9ad8\u6027\u80fd\u6570\u636e\u5e93\u64cd\u4f5c \u5927\u89c4\u6a21\u6570\u636e\u5b58\u50a8\u3001\u673a\u5668\u5b66\u4e60\u6570\u636e\u96c6 Utils3D 3D\u6570\u636e\u5904\u7406\u5de5\u5177 \u70b9\u4e91\u5904\u7406\u3001\u7f51\u683c\u64cd\u4f5c\u30013D\u53ef\u89c6\u5316 Report HTML\u62a5\u544a\u751f\u6210 \u6d4b\u8bd5\u62a5\u544a\u3001\u6570\u636e\u5206\u6790\u62a5\u544a WinTools Windows\u7cfb\u7edf\u5de5\u5177 Windows\u5e94\u7528\u5f00\u53d1\u3001\u7cfb\u7edf\u96c6\u6210 Deploy \u6a21\u578b\u90e8\u7f72\u5de5\u5177 \u6a21\u578b\u4f18\u5316\u3001\u63a8\u7406\u52a0\u901f General \u901a\u7528\u5de5\u5177 \u65e5\u5fd7\u8bb0\u5f55\u3001\u901a\u7528\u529f\u80fd"},{"location":"#_6","title":"\ud83d\udce6 \u5b89\u88c5\u6307\u5357","text":""},{"location":"#_7","title":"\u7cfb\u7edf\u8981\u6c42","text":"<ul> <li>Python: 3.8 \u6216\u66f4\u9ad8\u7248\u672c</li> <li>\u64cd\u4f5c\u7cfb\u7edf: Windows, Linux, macOS</li> <li>\u5185\u5b58: \u5efa\u8bae 4GB \u4ee5\u4e0a</li> </ul>"},{"location":"#_8","title":"\u4f9d\u8d56\u5b89\u88c5","text":"<pre><code># \u57fa\u7840\u4f9d\u8d56\npip install numpy lmdb msgpack tqdm\n\n# \u53ef\u9009\u4f9d\u8d56\uff08\u6839\u636e\u4f7f\u7528\u573a\u666f\uff09\npip install torch vedo scikit-learn pillow loguru\n</code></pre>"},{"location":"#_9","title":"\u5f00\u53d1\u73af\u5883","text":"<pre><code># \u514b\u9686\u9879\u76ee\ngit clone https://github.com/SindreYang/sindre.git\ncd sindre\n\n# \u5b89\u88c5\u5f00\u53d1\u4f9d\u8d56\npip install -r requirements.txt\n\n# \u5f00\u53d1\u6a21\u5f0f\u5b89\u88c5\npip install -e .\n\n# \u8fd0\u884c\u6d4b\u8bd5\ncd sindre/test\npython run_tests.py --all\n</code></pre>"},{"location":"#_10","title":"\ud83d\udca1 \u4f7f\u7528\u793a\u4f8b","text":""},{"location":"#1-lmdb","title":"1. LMDB \u6570\u636e\u5e93\u64cd\u4f5c","text":"<pre><code>import sindre.lmdb as lmdb\nimport numpy as np\n\n# \u521b\u5efa\u6570\u636e\u5e93\nwriter = lmdb.Writer('./dataset', map_size_limit=1024*100)  # 100GB\n\n# \u5199\u5165\u6570\u636e\nfor i in range(1000):\n    data = {\n        'points': np.random.rand(100, 3),\n        'labels': np.random.randint(0, 10, 100),\n        'metadata': {'id': i, 'source': 'synthetic'}\n    }\n    writer.put_samples({i: data})\n\nwriter.close()\n\n# \u8bfb\u53d6\u6570\u636e\nreader = lmdb.Reader('./dataset')\nprint(f\"\u6570\u636e\u5e93\u5305\u542b {len(reader)} \u4e2a\u6837\u672c\")\n\n# \u6279\u91cf\u8bfb\u53d6\nbatch = reader.get_samples(0, 10)\nprint(f\"\u6279\u91cf\u8bfb\u53d6 {len(batch)} \u4e2a\u6837\u672c\")\n\nreader.close()\n</code></pre>"},{"location":"#2-3d","title":"2. 3D \u6570\u636e\u5904\u7406","text":"<pre><code>from sindre.utils3d.mesh import SindreMesh\nimport numpy as np\n\n# \u521b\u5efa\u7f51\u683c\nvertices = np.array([\n    [0, 0, 0], [1, 0, 0], [0, 1, 0], [1, 1, 0]\n])\nfaces = np.array([[0, 1, 2], [1, 3, 2]])\n\nmesh = SindreMesh()\nmesh.vertices = vertices\nmesh.faces = faces\n\n# \u7f51\u683c\u64cd\u4f5c\nprint(f\"\u7f51\u683c\u5305\u542b {len(mesh.vertices)} \u4e2a\u9876\u70b9\uff0c{len(mesh.faces)} \u4e2a\u9762\")\n\n# \u91c7\u6837\u70b9\u4e91\npoints = mesh.sample(density=1.0)\nprint(f\"\u91c7\u6837\u5f97\u5230 {len(points)} \u4e2a\u70b9\")\n\n# \u53ef\u89c6\u5316\nmesh.show()\n</code></pre>"},{"location":"#3","title":"3. \u62a5\u544a\u751f\u6210","text":"<pre><code>from sindre.report import Report\nfrom PIL import Image\n\n# \u521b\u5efa\u62a5\u544a\nreport = Report()\n\n# \u6dfb\u52a0\u6d4b\u8bd5\u7ed3\u679c\ntest_result = {\n    \"className\": \"ModelTest\",\n    \"methodName\": \"test_accuracy\",\n    \"description\": \"\u6d4b\u8bd5\u6a21\u578b\u51c6\u786e\u7387\",\n    \"spendTime\": \"2.5 s\",\n    \"status\": \"\u6210\u529f\",\n    \"log\": [\"\u51c6\u786e\u7387: 95.2%\", \"\u635f\u5931: 0.048\"]\n}\n\nreport.append_row(test_result)\n\n# \u6dfb\u52a0\u56fe\u7247\nimage = Image.open('result.png')\nb64_image = Report.PIL_To_B64(image)\ntest_result[\"log\"].append(b64_image)\n\n# \u751f\u6210\u62a5\u544a\nreport.write('./reports/')\n</code></pre>"},{"location":"#4-windows","title":"4. Windows \u5de5\u5177","text":"<pre><code>from sindre.win_tools import tools, taskbar\n\n# \u7f16\u8bd1Python\u6587\u4ef6\u4e3aPYD\ntools.py2pyd(r\"C:\\project\\src\", clear_py=False)\n\n# \u8bbe\u7f6e\u7a97\u53e3\u900f\u660e\u5ea6\ntaskbar.set_windows_alpha(128, \"Shell_TrayWnd\")\n\n# \u5236\u4f5c\u5b89\u88c5\u5305\ntools.exe2nsis(\n    work_dir=r\"C:\\project\",\n    files_to_compress=[r\"C:\\project\\app.exe\", r\"C:\\project\\config.ini\"],\n    exe_name=\"MyApp.exe\"\n)\n</code></pre>"},{"location":"#5","title":"5. \u6a21\u578b\u90e8\u7f72","text":"<pre><code>from sindre.deploy import onnxruntime_deploy, TenserRT_deploy\n\n# ONNX Runtime\u90e8\u7f72\nonnx_infer = onnxruntime_deploy.OnnxInfer(\"model.onnx\")\nresult = onnx_infer(input_data)\n\n# TensorRT\u90e8\u7f72\ntrt_infer = TenserRT_deploy.TRTInfer()\ntrt_infer.load_model(\"model.engine\")\nresult = trt_infer(input_data)\n</code></pre>"},{"location":"#6","title":"6. \u65e5\u5fd7\u8bb0\u5f55","text":"<pre><code>from sindre.general.logs import CustomLogger\n\n# \u521b\u5efa\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = CustomLogger(\"my_app\").get_logger()\n\n# \u8bb0\u5f55\u65e5\u5fd7\nlogger.info(\"\u5e94\u7528\u542f\u52a8\")\nlogger.warning(\"\u53d1\u73b0\u8b66\u544a\u4fe1\u606f\")\nlogger.error(\"\u53d1\u751f\u9519\u8bef\")\n\n# \u91cd\u5b9a\u5411print\u5230\u65e5\u5fd7\nlogger.redirect_print()\nprint(\"\u8fd9\u6761\u6d88\u606f\u4f1a\u88ab\u8bb0\u5f55\u5230\u65e5\u5fd7\u6587\u4ef6\")\n</code></pre>"},{"location":"#api","title":"\ud83d\udcda API\u6587\u6863","text":""},{"location":"#_11","title":"\u6a21\u5757\u6982\u89c8","text":"<ul> <li>LMDB\u6a21\u5757 - \u9ad8\u6027\u80fd\u6570\u636e\u5e93\u64cd\u4f5c</li> <li>Utils3D\u6a21\u5757 - 3D\u6570\u636e\u5904\u7406\u5de5\u5177</li> <li>Report\u6a21\u5757 - HTML\u62a5\u544a\u751f\u6210</li> <li>WinTools\u6a21\u5757 - Windows\u7cfb\u7edf\u5de5\u5177</li> <li>Deploy\u6a21\u5757 - \u6a21\u578b\u90e8\u7f72\u5de5\u5177</li> <li>General\u6a21\u5757 - \u901a\u7528\u5de5\u5177</li> </ul>"},{"location":"#_12","title":"\u6838\u5fc3\u7c7b","text":""},{"location":"#lmdb","title":"LMDB\u6a21\u5757","text":"<ul> <li><code>Writer</code> - \u6570\u636e\u5e93\u5199\u5165\u5668</li> <li><code>Reader</code> - \u6570\u636e\u5e93\u8bfb\u53d6\u5668</li> <li><code>ReaderList</code> - \u591a\u6570\u636e\u5e93\u8bfb\u53d6\u5668</li> <li><code>ReaderSSD</code> - SSD\u4f18\u5316\u8bfb\u53d6\u5668</li> </ul>"},{"location":"#utils3d","title":"Utils3D\u6a21\u5757","text":"<ul> <li><code>SindreMesh</code> - 3D\u7f51\u683c\u5904\u7406\u7c7b</li> <li><code>pointcloud_augment</code> - \u70b9\u4e91\u6570\u636e\u589e\u5f3a</li> </ul>"},{"location":"#report","title":"Report\u6a21\u5757","text":"<ul> <li><code>Report</code> - HTML\u62a5\u544a\u751f\u6210\u5668</li> </ul>"},{"location":"#wintools","title":"WinTools\u6a21\u5757","text":"<ul> <li><code>tools</code> - Windows\u5de5\u5177\u51fd\u6570\u96c6\u5408</li> <li><code>taskbar</code> - \u4efb\u52a1\u680f\u7ba1\u7406\u51fd\u6570</li> </ul>"},{"location":"#deploy","title":"Deploy\u6a21\u5757","text":"<ul> <li><code>OnnxInfer</code> - ONNX\u63a8\u7406\u7c7b</li> <li><code>TRTInfer</code> - TensorRT\u63a8\u7406\u7c7b</li> </ul>"},{"location":"#general","title":"General\u6a21\u5757","text":"<ul> <li><code>CustomLogger</code> - \u81ea\u5b9a\u4e49\u65e5\u5fd7\u8bb0\u5f55\u5668</li> </ul>"},{"location":"#_13","title":"\ud83e\uddea \u6d4b\u8bd5\u6307\u5357","text":""},{"location":"#_14","title":"\u8fd0\u884c\u6d4b\u8bd5","text":"<pre><code># \u8fd0\u884c\u6240\u6709\u6d4b\u8bd5\ncd sindre/test\npython run_tests.py --all\n\n# \u8fd0\u884c\u7279\u5b9a\u6a21\u5757\u6d4b\u8bd5\npython run_tests.py --module lmdb\npython run_tests.py --module utils3d\npython run_tests.py --module report\npython run_tests.py --module win_tools\npython run_tests.py --module deploy\npython run_tests.py --module general\n</code></pre>"},{"location":"#_15","title":"\u6d4b\u8bd5\u8986\u76d6\u7387","text":"<pre><code># \u5b89\u88c5\u6d4b\u8bd5\u4f9d\u8d56\npip install pytest pytest-cov\n\n# \u8fd0\u884c\u6d4b\u8bd5\u5e76\u751f\u6210\u8986\u76d6\u7387\u62a5\u544a\npytest --cov=sindre --cov-report=html\n</code></pre>"},{"location":"#_16","title":"\u6027\u80fd\u6d4b\u8bd5","text":"<pre><code># \u8fd0\u884c\u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5\npython benchmark_tests.py\n</code></pre>"},{"location":"#_17","title":"\ud83e\udd1d \u8d21\u732e\u6307\u5357","text":""},{"location":"#_18","title":"\u5f00\u53d1\u73af\u5883\u8bbe\u7f6e","text":"<pre><code># 1. Fork\u9879\u76ee\ngit clone https://github.com/your-username/sindre.git\ncd sindre\n\n# 2. \u521b\u5efa\u865a\u62df\u73af\u5883\npython -m venv venv\nsource venv/bin/activate  # Linux/macOS\n# \u6216\nvenv\\Scripts\\activate  # Windows\n\n# 3. \u5b89\u88c5\u4f9d\u8d56\npip install -r requirements.txt\npip install -e .\n\n# 4. \u5b89\u88c5\u5f00\u53d1\u5de5\u5177\npip install black flake8 mypy pre-commit\n</code></pre>"},{"location":"#_19","title":"\u4ee3\u7801\u89c4\u8303","text":"<pre><code># \u4ee3\u7801\u683c\u5f0f\u5316\nblack sindre/\n\n# \u4ee3\u7801\u68c0\u67e5\nflake8 sindre/\n\n# \u7c7b\u578b\u68c0\u67e5\nmypy sindre/\n\n# \u8fd0\u884c\u9884\u63d0\u4ea4\u94a9\u5b50\npre-commit run --all-files\n</code></pre>"},{"location":"#_20","title":"\u63d0\u4ea4\u89c4\u8303","text":"<pre><code># \u63d0\u4ea4\u4fe1\u606f\u683c\u5f0f\ngit commit -m \"feat: \u6dfb\u52a0\u65b0\u529f\u80fd\"\ngit commit -m \"fix: \u4fee\u590dbug\"\ngit commit -m \"docs: \u66f4\u65b0\u6587\u6863\"\ngit commit -m \"test: \u6dfb\u52a0\u6d4b\u8bd5\"\ngit commit -m \"refactor: \u91cd\u6784\u4ee3\u7801\"\n</code></pre>"},{"location":"#_21","title":"\u62c9\u53d6\u8bf7\u6c42","text":"<ol> <li>\u521b\u5efa\u529f\u80fd\u5206\u652f</li> <li>\u5b9e\u73b0\u529f\u80fd\u5e76\u6dfb\u52a0\u6d4b\u8bd5</li> <li>\u786e\u4fdd\u6240\u6709\u6d4b\u8bd5\u901a\u8fc7</li> <li>\u66f4\u65b0\u6587\u6863</li> <li>\u63d0\u4ea4\u62c9\u53d6\u8bf7\u6c42</li> </ol>"},{"location":"#_22","title":"\ud83d\udcc4 \u8bb8\u53ef\u8bc1","text":"<p>\u672c\u9879\u76ee\u91c7\u7528 MIT \u8bb8\u53ef\u8bc1 - \u67e5\u770b LICENSE \u6587\u4ef6\u4e86\u89e3\u8be6\u60c5\u3002</p>"},{"location":"#_23","title":"\ud83d\ude4f \u81f4\u8c22","text":"<p>\u611f\u8c22\u6240\u6709\u4e3a\u8fd9\u4e2a\u9879\u76ee\u505a\u51fa\u8d21\u732e\u7684\u5f00\u53d1\u8005\u548c\u7528\u6237\u3002</p>"},{"location":"#_24","title":"\ud83d\udcde \u8054\u7cfb\u65b9\u5f0f","text":"<ul> <li>\u4f5c\u8005: Sindre Yang</li> <li>\u90ae\u7bb1: yx@mviai.com</li> <li>GitHub: https://github.com/SindreYang</li> </ul> <p>\u6ce8\u610f: \u8fd9\u662f\u4e00\u4e2a\u6d3b\u8dc3\u5f00\u53d1\u4e2d\u7684\u9879\u76ee\uff0cAPI\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\u3002\u8bf7\u67e5\u770b\u6700\u65b0\u6587\u6863\u83b7\u53d6\u6700\u65b0\u4fe1\u606f\u3002</p>"},{"location":"3d/","title":"sindre.utils3d \u4e09\u7ef4\u5de5\u5177\u5305\u6587\u6863","text":"<p>\u672c\u6a21\u5757\u4e3a\u4e09\u7ef4\u6570\u636e\u5904\u7406\u4e0e\u6df1\u5ea6\u5b66\u4e60\u7684\u5168\u529f\u80fd\u5de5\u5177\u5305\uff0c\u6db5\u76d6\u7f51\u683c/\u70b9\u4e91\u5904\u7406\u3001\u7259\u79d1\u4e13\u7528\u7b97\u6cd5\u3001\u4e09\u7ef4\u589e\u5f3a\u3001\u53ef\u89c6\u5316\u3001\u4ee5\u53ca\u4e09\u7ef4\u6df1\u5ea6\u5b66\u4e60\u7f51\u7edc\u3002</p>"},{"location":"3d/#_1","title":"\u76ee\u5f55","text":"<ul> <li>sindre.utils3d \u4e09\u7ef4\u5de5\u5177\u5305\u6587\u6863</li> <li>\u76ee\u5f55</li> <li>\u6a21\u5757\u6982\u89c8</li> <li>mesh \u7f51\u683c\u5904\u7406</li> <li>dental_tools \u7259\u79d1\u4e13\u7528\u5de5\u5177</li> <li>algorithm \u4e09\u7ef4\u7b97\u6cd5\u5e93</li> <li>vedo_tools \u4e09\u7ef4\u53ef\u89c6\u5316</li> <li>pointcloud_augment \u70b9\u4e91\u589e\u5f3a</li> <li>networks \u4e09\u7ef4\u6df1\u5ea6\u5b66\u4e60\u5de5\u5177\u5305\uff08\u91cd\u70b9\uff09<ul> <li>\u4e3b\u8981\u5185\u5bb9</li> <li>\u5178\u578b\u7528\u6cd5</li> <li>\u9002\u7528\u573a\u666f</li> </ul> </li> <li>FAQ</li> </ul>"},{"location":"3d/#_2","title":"\u6a21\u5757\u6982\u89c8","text":"\u5b50\u6a21\u5757 \u4e3b\u8981\u529f\u80fd\u63cf\u8ff0 mesh \u901a\u7528\u4e09\u7ef4\u7f51\u683c\u5904\u7406\u4e0e\u683c\u5f0f\u4e92\u8f6c dental_tools \u7259\u9f7f/\u53e3\u8154mesh\u4e13\u7528\u7b97\u6cd5 algorithm \u4e09\u7ef4\u51e0\u4f55/\u7f51\u683c\u7b97\u6cd5\u4e0e\u4f18\u5316 vedo_tools \u57fa\u4e8evedo\u7684\u4e09\u7ef4\u53ef\u89c6\u5316\u4e0e\u4ea4\u4e92 pointcloud_augment \u70b9\u4e91\u589e\u5f3a\u4e0e\u9884\u5904\u7406\u5de5\u5177 networks \u4e09\u7ef4\u6df1\u5ea6\u5b66\u4e60\u7f51\u7edc\u4e0e\u635f\u5931\u51fd\u6570\uff08\u91cd\u70b9\uff09"},{"location":"3d/#mesh","title":"mesh \u7f51\u683c\u5904\u7406","text":"<p>\u6838\u5fc3\u7c7b\uff1aSindreMesh</p> <ul> <li>\u901a\u7528\u4e09\u7ef4\u7f51\u683c\u5bf9\u8c61\uff0c\u652f\u6301\u591a\u683c\u5f0f\u4e92\u8f6c\uff08trimesh\u3001vedo\u3001open3d\u3001pytorch3d\u7b49\uff09</li> <li>\u652f\u6301\u5c5e\u6027\uff1a\u9876\u70b9\u3001\u9762\u3001\u6cd5\u7ebf\u3001\u6807\u7b7e\u3001\u989c\u8272\u3001\u66f2\u7387\u7b49</li> <li>\u4e3b\u8981\u65b9\u6cd5\uff1a</li> <li><code>clone()</code>\uff1a\u5feb\u901f\u514b\u9686\u7f51\u683c</li> <li><code>set_vertex_labels()</code>\uff1a\u8bbe\u7f6e\u9876\u70b9\u6807\u7b7e\u5e76\u81ea\u52a8\u7740\u8272</li> <li><code>update_geometry()</code>\uff1a\u51e0\u4f55\u7ed3\u6784\u66f4\u65b0</li> <li><code>compute_normals()</code>\uff1a\u6cd5\u7ebf\u8ba1\u7b97</li> <li><code>apply_transform()</code>\uff1a\u5e94\u7528\u53d8\u6362\u77e9\u9635</li> <li><code>show()</code>\uff1a\u4e09\u7ef4\u53ef\u89c6\u5316</li> <li><code>sample()</code>\uff1a\u7f51\u683c\u91c7\u6837\u70b9\u4e91</li> <li><code>to_trimesh()/to_open3d()/to_dict()/to_json()</code>\uff1a\u683c\u5f0f\u4e92\u8f6c</li> <li><code>save()/load()</code>\uff1a\u6587\u4ef6\u8bfb\u5199</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>from sindre.utils3d.mesh import SindreMesh\nimport numpy as np\n\nvertices = np.array([[0,0,0],[1,0,0],[0,1,0]])\nfaces = np.array([[0,1,2]])\nmesh = SindreMesh([vertices,faces])\nmesh.get_curvature()\nmesh.show()\n</code></pre>"},{"location":"3d/#dental_tools","title":"dental_tools \u7259\u79d1\u4e13\u7528\u5de5\u5177","text":"<ul> <li>FDI\u7f16\u53f7\u4e0e\u7d22\u5f15\u8f6c\u6362\u3001\u6807\u7b7e\u8f6c\u989c\u8272\u3001\u7259\u51a0\u53d8\u6362\u3001\u7259\u9f7fmesh\u5207\u5272\u7b49</li> <li>\u4e3b\u8981\u51fd\u6570\uff1a</li> <li><code>convert_fdi2idx(labels)</code>\uff1aFDI\u7f16\u53f7\u8f6c\u7d22\u5f15</li> <li><code>convert_labels2color(data)</code>\uff1a\u6807\u7b7e\u8f6c\u989c\u8272</li> <li><code>transform_crown(near_mesh, jaw_mesh)</code>\uff1a\u7259\u51a0\u5750\u6807\u7cfb\u8c03\u6574</li> <li><code>cut_mesh_point_loop_crow(mesh, pts)</code>\uff1a\u7259\u51a0\u5206\u5272</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>from sindre.utils3d.dental_tools import convert_fdi2idx, convert_labels2color\nlabels = [11, 12, 13, 21, 22]\nidx = convert_fdi2idx(labels)\ncolors = convert_labels2color(labels)\n</code></pre>"},{"location":"3d/#algorithm","title":"algorithm \u4e09\u7ef4\u7b97\u6cd5\u5e93","text":"<ul> <li>\u4e09\u7ef4\u6807\u7b7e\u4e0e\u989c\u8272\u6620\u5c04\u3001\u6cd5\u7ebf/\u66f2\u7387/\u8fb9\u754c/\u4f53\u7d20/\u91c7\u6837/\u91cd\u5efa/\u5206\u5272/\u4f18\u5316\u7b49</li> <li>\u4e3b\u8981\u51fd\u6570\uff1a</li> <li><code>labels2colors(labels)</code>\uff1a\u6807\u7b7e\u8f6c\u989c\u8272</li> <li><code>compute_vertex_normals(vertices, faces)</code>\uff1a\u9876\u70b9\u6cd5\u7ebf</li> <li><code>compute_face_normals(vertices, faces)</code>\uff1a\u9762\u6cd5\u7ebf</li> <li><code>farthest_point_sampling(vertices, n_sample)</code>\uff1a\u6700\u8fdc\u70b9\u91c7\u6837</li> <li><code>remesh()</code>\u3001<code>fix_invalid_by_meshlab()</code>\u3001<code>A_Star</code>\u3001<code>GraphCutRefiner</code>\u7b49\u9ad8\u7ea7\u7b97\u6cd5</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>from sindre.utils3d.algorithm import labels2colors, compute_vertex_normals\nimport numpy as np\nvertices = np.random.rand(100,3)\nfaces = np.random.randint(0,100,(50,3))\ncolors = labels2colors(np.arange(100))\nnormals = compute_vertex_normals(vertices, faces)\n</code></pre>"},{"location":"3d/#vedo_tools","title":"vedo_tools \u4e09\u7ef4\u53ef\u89c6\u5316","text":"<ul> <li>\u57fa\u4e8evedo\u7684\u4e09\u7ef4\u4f53\u6570\u636e\u5207\u7247\u4e0e\u4ea4\u4e92\u3001\u77e9\u9635\u53ef\u89c6\u5316</li> <li>\u4e3b\u8981\u7c7b/\u51fd\u6570\uff1a</li> <li><code>matrix3d_by_vedo</code>\uff1a\u4e09\u7ef4\u4f53\u6570\u636e\u5207\u7247\u7a97\u53e3</li> <li><code>show_matrix_by_vedo(data)</code>\uff1a\u77e9\u9635\u53ef\u89c6\u5316</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>from sindre.utils3d.vedo_tools import matrix3d_by_vedo\nimport numpy as np\nvol = np.random.rand(64,64,64)\nviewer = matrix3d_by_vedo(vol)\nviewer.show()\n</code></pre>"},{"location":"3d/#pointcloud_augment","title":"pointcloud_augment \u70b9\u4e91\u589e\u5f3a","text":"<ul> <li>\u70b9\u4e91\u7684\u968f\u673a\u65cb\u8f6c\u3001\u7f29\u653e\u3001\u5e73\u79fb\u3001\u6296\u52a8\u3001\u5f52\u4e00\u5316\u3001\u968f\u673a\u4e22\u5f03\u3001\u88c1\u526a\u3001\u5f20\u91cf\u8f6c\u6362\u7b49</li> <li>\u652f\u6301numpy\u548ctorch\u4e24\u5957API</li> <li>\u4e3b\u8981\u7c7b\uff1a</li> <li><code>Flip_np</code>\u3001<code>Scale_np</code>\u3001<code>RotateAxis_np</code>\u3001<code>RotateXYZ_np</code>\u3001<code>Jitter_np</code>\u3001<code>Translate_np</code>\u3001<code>RandomDropout_np</code>\u3001<code>Normalize_np</code>\u3001<code>ToTensor</code>\u3001<code>RandomCrop</code></li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>from sindre.utils3d.pointcloud_augment import Flip_np, Scale_np\nimport numpy as np\npoints = np.random.rand(100,3)\nflipper = Flip_np(axis_x=True, axis_y=False)\npoints_flipped = flipper(points)\nscaler = Scale_np(lo=0.9, hi=1.1)\npoints_scaled = scaler(points)\n\n\n\n# \u793a\u4f8b\nfrom torchvision import transforms\n# torch\u98ce\u683c\u589e\u5f3a\u6d41\u6c34\u7ebf\ntransforms_torch = transforms.Compose([\n    ToTensor(device=\"cuda:0\"),\n    Normalize(method=\"MaxMix\", v_range=[0,1]),\n    RotateAxis(axis=[0,1,0]),\n    RotateXYZ(angle_sigma=0.05, angle_clip=0.15),\n    Scale(lo=0.8, hi=1.25),\n    Translate(translate_range=0.1),\n    Jitter(std=0.01, clip=0.05),\n    RandomDropout(max_dropout_ratio=0.2),\n    Flip(axis_x=False, axis_y=False, axis_z=True),\n])\n\n# numpy\u98ce\u683c\u589e\u5f3a\u6d41\u6c34\u7ebf\ntransforms_np = transforms.Compose([\n    Normalize_np(method=\"MaxMix\", v_range=[0,1]),\n    RotateAxis_np(axis=[0,1,0]),\n    RotateXYZ_np(angle_sigma=0.05, angle_clip=0.15),\n    Scale_np(lo=0.8, hi=1.25),\n    Translate_np(translate_range=0.1),\n    Jitter_np(std=0.01, clip=0.05),\n    RandomDropout_np(max_dropout_ratio=0.2),\n    Flip_np(axis_x=False, axis_y=False, axis_z=True),\n    ToTensor(device=\"cuda:0\"),\n])\n\n# \u793a\u4f8b\u6570\u636e\npoints = np.random.randn(1024, 6)\npoints[:,3:6] = np.random.rand(1024,3)\n\n# \u6279\u91cf\u589e\u5f3a\ntransformed_points = transforms_torch(points)\ntransformed_points_np = transforms_np(points)\n\n</code></pre>"},{"location":"3d/#networks","title":"networks \u4e09\u7ef4\u6df1\u5ea6\u5b66\u4e60\u5de5\u5177\u5305\uff08\u91cd\u70b9\uff09","text":"<p>\u672c\u5b50\u5305\u4e13\u4e3a\u4e09\u7ef4\u70b9\u4e91/\u7f51\u683c\u4efb\u52a1\u8bbe\u8ba1\uff0c\u5305\u542b\u591a\u79cd\u4e3b\u6d41\u6df1\u5ea6\u5b66\u4e60\u7f51\u7edc\u7ed3\u6784\u3001\u635f\u5931\u51fd\u6570\u53ca\u76f8\u5173\u5de5\u5177\u3002</p>"},{"location":"3d/#_3","title":"\u4e3b\u8981\u5185\u5bb9","text":"<ul> <li>\u70b9\u4e91/\u7f51\u683c\u795e\u7ecf\u7f51\u7edc\uff1a</li> <li><code>pointnet2.py</code>\uff1aPointNet++</li> <li><code>dgcnn.py</code>\uff1aDGCNN</li> <li><code>point_transformerV3.py</code>\uff1aPoint Transformer V3</li> <li><code>conv_occ.py</code>\uff1a\u4f53\u7d20\u5377\u79ef/\u5360\u7528\u7f51\u7edc</li> <li><code>Reconstruct3D.py</code>\uff1a\u4e09\u7ef4\u91cd\u5efa\u7f51\u7edc</li> <li><code>image_text_net.py</code>\uff1a\u56fe\u50cf-\u6587\u672c\u591a\u6a21\u6001\u7f51\u7edc</li> <li><code>embed_attention.py</code>\uff1a\u5d4c\u5165\u5f0f\u6ce8\u610f\u529b\u673a\u5236</li> <li>\u4f53\u7d20/\u7a00\u758f\u5377\u79ef\uff1a</li> <li><code>point2voxel.py</code>\u3001<code>minkowski_utils.py</code></li> <li>\u7f51\u7edc\u901a\u7528\u5de5\u5177\u4e0e\u635f\u5931\uff1a</li> <li><code>network_utils.py</code>\u3001<code>losses.py</code></li> </ul>"},{"location":"3d/#_4","title":"\u5178\u578b\u7528\u6cd5","text":"<pre><code>from sindre.utils3d.networks.pointnet2 import PointNet2\nimport torch\nmodel = PointNet2(num_classes=40)\npoints = torch.rand(8, 1024, 3)\nlogits = model(points)\n\nfrom sindre.utils3d.networks.dgcnn import DGCNN\nmodel = DGCNN(num_classes=40)\nlogits = model(points)\n\nfrom sindre.utils3d.networks.losses import get_loss\nloss = get_loss(logits, labels)\n</code></pre>"},{"location":"3d/#_5","title":"\u9002\u7528\u573a\u666f","text":"<ul> <li>\u4e09\u7ef4\u70b9\u4e91\u5206\u7c7b/\u5206\u5272/\u91cd\u5efa/\u914d\u51c6/\u591a\u6a21\u6001\u7b49\u4efb\u52a1</li> <li>\u652f\u6301\u4e3b\u6d41\u4e09\u7ef4\u6df1\u5ea6\u5b66\u4e60\u7814\u7a76\u4e0e\u5de5\u7a0b\u843d\u5730</li> </ul>"},{"location":"3d/#faq","title":"FAQ","text":"<ul> <li>Q: networks\u5b50\u5305\u9002\u5408\u54ea\u4e9b\u4e09\u7ef4\u4efb\u52a1\uff1f</li> <li>A: \u9002\u5408\u70b9\u4e91/\u7f51\u683c\u7684\u5206\u7c7b\u3001\u5206\u5272\u3001\u91cd\u5efa\u3001\u914d\u51c6\u3001\u5360\u7528\u9884\u6d4b\u3001\u591a\u6a21\u6001\u7b49\u4e3b\u6d41\u4e09\u7ef4\u6df1\u5ea6\u5b66\u4e60\u4efb\u52a1\u3002</li> <li>Q: \u5982\u4f55\u81ea\u5b9a\u4e49\u81ea\u5df1\u7684\u4e09\u7ef4\u7f51\u7edc\uff1f</li> <li>A: \u53ef\u53c2\u8003<code>networks</code>\u5b50\u5305\u5185\u7684\u7f51\u7edc\u7ed3\u6784\uff0c\u7ee7\u627f<code>torch.nn.Module</code>\uff0c\u7075\u6d3b\u7ec4\u5408\u5df2\u6709\u6a21\u5757\u3002</li> </ul> <p>\u5982\u9700\u8be6\u7ec6API\u548c\u53c2\u6570\u8bf4\u660e\uff0c\u8bf7\u67e5\u9605\u5b8c\u6574API\u6587\u6863\u3002 </p>"},{"location":"api/","title":"API\u6587\u6863","text":"<ul> <li>API\u6587\u6863</li> <li>LMDB\u6a21\u5757API</li> <li>\u4e09\u7ef4\u7b97\u6cd5API</li> <li>\u795e\u7ecf\u7f51\u7edcAPI</li> <li>\u62a5\u544a\u6a21\u5757API</li> <li>Windows\u5de5\u5177API</li> <li>\u90e8\u7f72\u76f8\u5173 API</li> <li>\u65e5\u5fd7\u5de5\u5177 API</li> </ul> <p>\u672c\u9875\u81ea\u52a8\u6c47\u603b sindre \u5e93\u4e3b\u8981\u6a21\u5757\u7684\u5168\u90e8 API\uff0c\u652f\u6301\u81ea\u52a8\u6587\u6863\u4e0e\u4ea4\u4e92\u67e5\u8be2\u3002</p>"},{"location":"api/#lmdbapi","title":"LMDB\u6a21\u5757API","text":""},{"location":"api/#lmdb.pylmdb.Reader","title":"<code>Reader</code>","text":"<p>\u7528\u4e8e\u8bfb\u53d6\u5305\u542b\u5f20\u91cf(<code>numpy.ndarray</code>)\u6570\u636e\u96c6\u7684\u5bf9\u8c61\u3002 \u8fd9\u4e9b\u5f20\u91cf\u662f\u901a\u8fc7\u4f7f\u7528MessagePack\u4eceLightning Memory-Mapped Database (LMDB)\u4e2d\u8bfb\u53d6\u7684\u3002</p>"},{"location":"api/#lmdb.pylmdb.Reader.__getitem__","title":"<code>__getitem__(key)</code>","text":"<p>\u4f7f\u7528<code>get_sample()</code>\u4ece<code>data_db</code>\u8fd4\u56de\u6837\u672c\u3002</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>int/slice\u7c7b\u578b\u7684\u503c</p> required <p>Returns:</p> Type Description <code>list</code> <p>\u5bf9\u5e94\u7d22\u5f15\u5bf9\u8c61</p>"},{"location":"api/#lmdb.pylmdb.Reader.__init__","title":"<code>__init__(dirpath, multiprocessing=False)</code>","text":"<p>\u521d\u59cb\u5316</p> <p>Parameters:</p> Name Type Description Default <code>dirpath</code> <p>\u5305\u542bLMDB\u7684\u76ee\u5f55\u8def\u5f84\u3002</p> required <code>multiprocessing</code> <p>\u662f\u5426\u5f00\u542f\u591a\u8fdb\u7a0b\u8bfb\u53d6\u3002</p> <code>False</code>"},{"location":"api/#lmdb.pylmdb.Reader.__len__","title":"<code>__len__()</code>","text":"<p>Returns:</p> Type Description <code>int</code> <p>\u8fd4\u56de\u6570\u636e\u96c6\u4e2d\u7684\u6837\u672c\u6570\u91cf\u3002</p>"},{"location":"api/#lmdb.pylmdb.Reader.close","title":"<code>close()</code>","text":"<p>Returns:</p> Type Description <p>\u5173\u95ed\u73af\u5883\u3002\u4f7f\u6253\u5f00\u7684\u4efb\u4f55\u8fed\u4ee3\u5668\u3001\u6e38\u6807\u548c\u4e8b\u52a1\u65e0\u6548\u3002</p>"},{"location":"api/#lmdb.pylmdb.Reader.get_data_key_info","title":"<code>get_data_key_info()</code>","text":"<p>Returns:</p> Type Description <code>set</code> <p>\u83b7\u53d6\u5143\u6570\u636e\u5e93\u6240\u6709\u952e</p>"},{"location":"api/#lmdb.pylmdb.Reader.get_data_keys","title":"<code>get_data_keys(i=0)</code>","text":"<p>\u8fd4\u56de\u7b2ci\u4e2a\u6837\u672c\u5728<code>data_db</code>\u4e2d\u7684\u6240\u6709\u952e\u7684\u5217\u8868\u3002 \u5982\u679c\u6240\u6709\u6837\u672c\u5305\u542b\u76f8\u540c\u7684\u952e,\u5219\u53ea\u9700\u8981\u68c0\u67e5\u7b2c\u4e00\u4e2a\u6837\u672c,\u56e0\u6b64\u9ed8\u8ba4\u503c\u4e3a<code>i=0</code></p> <p>Parameters:</p> Name Type Description Default <code>i</code> <code>int</code> <p>\u7d22\u5f15</p> <code>0</code> <p>Returns:</p> Type Description <code>list</code> <p>list\u7c7b\u578b\u5bf9\u8c61</p>"},{"location":"api/#lmdb.pylmdb.Reader.get_data_specification","title":"<code>get_data_specification(i)</code>","text":"<p>\u8fd4\u56de\u7b2ci\u4e2a\u6837\u672c\u7684\u6240\u6709\u6570\u636e\u5bf9\u8c61\u7684\u89c4\u8303\u3002 \u89c4\u8303\u5305\u62ec\u5f62\u72b6\u548c\u6570\u636e\u7c7b\u578b\u3002\u8fd9\u5047\u8bbe\u6bcf\u4e2a\u6570\u636e\u5bf9\u8c61\u90fd\u662f<code>numpy.ndarray</code>\u3002</p> <p>Parameters:</p> Name Type Description Default <code>i</code> <code>int</code> <p>\u7d22\u5f15</p> required <p>Returns:</p> Type Description <code>dict</code> <p>\u6570\u636e\u5b57\u5178</p>"},{"location":"api/#lmdb.pylmdb.Reader.get_data_value","title":"<code>get_data_value(i, key)</code>","text":"<p>\u8fd4\u56de\u7b2ci\u4e2a\u6837\u672c\u5bf9\u5e94\u4e8e\u8f93\u5165\u952e\u7684\u503c\u3002</p> <p>\u8be5\u503c\u4ece<code>data_db</code>\u4e2d\u68c0\u7d22\u3002</p> <p>\u56e0\u4e3a\u6bcf\u4e2a\u6837\u672c\u90fd\u5b58\u50a8\u5728\u4e00\u4e2amsgpack\u4e2d,\u6240\u4ee5\u5728\u8fd4\u56de\u503c\u4e4b\u524d,\u6211\u4eec\u9700\u8981\u5148\u8bfb\u53d6\u6574\u4e2amsgpack\u3002</p> <p>Parameters:</p> Name Type Description Default <code>i</code> <code>int</code> <p>\u7d22\u5f15</p> required <code>key</code> <code>str</code> <p>\u8be5\u7d22\u5f15\u7684\u952e</p> required <p>Returns:</p> Type Description <p>\u5bf9\u5e94\u7684\u503c</p>"},{"location":"api/#lmdb.pylmdb.Reader.get_meta_key_info","title":"<code>get_meta_key_info()</code>","text":"<p>Returns:</p> Type Description <code>set</code> <p>\u83b7\u53d6\u5143\u6570\u636e\u5e93\u6240\u6709\u952e</p>"},{"location":"api/#lmdb.pylmdb.Reader.get_meta_str","title":"<code>get_meta_str(key)</code>","text":"<p>\u5c06\u8f93\u5165\u952e\u5bf9\u5e94\u7684\u503c\u4f5c\u4e3a\u5b57\u7b26\u4e32\u8fd4\u56de\u3002 \u8be5\u503c\u4ece<code>meta_db</code>\u4e2d\u68c0\u7d22\u3002 Args:     key: \u5b57\u7b26\u4e32\u6216\u5b57\u8282\u5b57\u7b26\u4e32</p> <p>Returns:</p> Type Description <code>str</code> <p>str,\u8f93\u5165\u952e\u5bf9\u5e94\u7684\u503c</p>"},{"location":"api/#lmdb.pylmdb.Reader.get_sample","title":"<code>get_sample(i)</code>","text":"<p>\u4ece<code>data_db</code>\u8fd4\u56de\u7b2ci\u4e2a\u6837\u672c\u3002 Args:     i:  \u7d22\u5f15</p> <p>Returns:</p> Type Description <code>dict</code> <p>\u5b57\u5178\u7c7b\u578b\u5bf9\u8c61</p>"},{"location":"api/#lmdb.pylmdb.Reader.get_samples","title":"<code>get_samples(i, size)</code>","text":"<p>\u8fd4\u56de\u4ece<code>i</code>\u5230<code>i + size</code>\u7684\u6240\u6709\u8fde\u7eed\u6837\u672c\u3002</p> Notes <p>\u5047\u8bbe:    * \u4ece<code>i</code>\u5230<code>i + size</code>\u7684\u6bcf\u4e2a\u6837\u672c\u5177\u6709\u76f8\u540c\u7684\u952e\u96c6\u3002    * \u6837\u672c\u4e2d\u7684\u6240\u6709\u6570\u636e\u5bf9\u8c61\u90fd\u662f<code>numpy.ndarray</code>\u7c7b\u578b\u3002    * \u4e0e\u540c\u4e00\u4e2a\u952e\u5173\u8054\u7684\u503c\u5177\u6709\u76f8\u540c\u7684\u5f20\u91cf\u5f62\u72b6\u548c\u6570\u636e\u7c7b\u578b\u3002</p> <p>Parameters:</p> Name Type Description Default <code>i</code> <code>int</code> <p>int, \u5f00\u59cb\u7d22\u5f15</p> required <code>size</code> <code>int</code> <p>int, \u7d22\u5f15\u957f\u5ea6</p> required <p>Returns:</p> Type Description <code>list</code> <p>\u6240\u6709\u6837\u672c\u7ec4\u6210\u7684list</p>"},{"location":"api/#lmdb.pylmdb.ReaderList","title":"<code>ReaderList</code>","text":"<p>\u7ec4\u5408\u591a\u4e2aLMDB\u6570\u636e\u5e93\u8fdb\u884c\u7edf\u4e00\u8bfb\u53d6\u7684\u7c7b\uff0c\u63d0\u4f9b\u5e8f\u5217\u534f\u8bae\u7684\u63a5\u53e3</p> <p>\u8be5\u7c7b\u7528\u4e8e\u5c06\u591a\u4e2aLMDB\u6570\u636e\u5e93\u5408\u5e76\u4e3a\u4e00\u4e2a\u903b\u8f91\u6570\u636e\u96c6\uff0c\u652f\u6301\u901a\u8fc7\u7d22\u5f15\u8bbf\u95ee\u548c\u83b7\u53d6\u957f\u5ea6\u3002 \u5185\u90e8\u7ef4\u62a4\u6570\u636e\u5e93\u7d22\u5f15\u6620\u5c04\u8868\u548c\u771f\u5b9e\u7d22\u5f15\u6620\u5c04\u8868\uff0c\u5b9e\u73b0\u8de8\u6570\u636e\u5e93\u7684\u900f\u660e\u8bbf\u95ee\u3002</p> <p>Attributes:</p> Name Type Description <code>db_list</code> <code>List[Reader]</code> <p>\u5b58\u50a8\u6253\u5f00\u7684LMDB\u6570\u636e\u5e93\u5b9e\u4f8b\u5217\u8868</p> <code>db_mapping</code> <code>List[int]</code> <p>\u7d22\u5f15\u5230\u6570\u636e\u5e93\u7d22\u5f15\u7684\u6620\u5c04\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u5bf9\u5e94\u7d22\u5f15\u6570\u636e\u6240\u5728\u7684\u6570\u636e\u5e93\u4e0b\u6807</p> <code>real_idx_mapping</code> <code>List[int]</code> <p>\u7d22\u5f15\u5230\u6570\u636e\u5e93\u5185\u771f\u5b9e\u7d22\u5f15\u7684\u6620\u5c04\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u6570\u636e\u5728\u5bf9\u5e94\u6570\u636e\u5e93\u4e2d\u7684\u539f\u59cb\u7d22\u5f15</p>"},{"location":"api/#lmdb.pylmdb.ReaderList.__del__","title":"<code>__del__()</code>","text":"<p>\u6790\u6784\u51fd\u6570\uff0c\u81ea\u52a8\u8c03\u7528close\u65b9\u6cd5\u91ca\u653e\u8d44\u6e90</p> <p>\u6ce8\u610f\uff1a\u4e0d\u4fdd\u8bc1\u6790\u6784\u51fd\u6570\u4f1a\u88ab\u53ca\u65f6\u8c03\u7528\uff0c\u5efa\u8bae\u663e\u5f0f\u8c03\u7528close()</p>"},{"location":"api/#lmdb.pylmdb.ReaderList.__getitem__","title":"<code>__getitem__(idx)</code>","text":"<p>\u901a\u8fc7\u7d22\u5f15\u83b7\u53d6\u6570\u636e\u6761\u76ee</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>\u6570\u636e\u6761\u76ee\u5728\u7ec4\u5408\u6570\u636e\u96c6\u4e2d\u7684\u903b\u8f91\u7d22\u5f15</p> required <p>Returns:</p> Name Type Description <code>object</code> <p>\u5bf9\u5e94\u4f4d\u7f6e\u7684\u6570\u636e\u6761\u76ee\uff0c\u5177\u4f53\u7c7b\u578b\u53d6\u51b3\u4e8eLMDB\u5b58\u50a8\u7684\u6570\u636e\u683c\u5f0f</p> <p>Raises:</p> Type Description <code>IndexError</code> <p>\u5f53\u7d22\u5f15\u8d85\u51fa\u7ec4\u5408\u6570\u636e\u96c6\u8303\u56f4\u65f6\u629b\u51fa</p>"},{"location":"api/#lmdb.pylmdb.ReaderList.__init__","title":"<code>__init__(db_path_list, multiprocessing=True)</code>","text":"<p>\u521d\u59cb\u5316\u7ec4\u5408\u6570\u636e\u5e93\u8bfb\u53d6\u5668</p> <p>Parameters:</p> Name Type Description Default <code>db_path_list</code> <code>List[str]</code> <p>LMDB\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\u5217\u8868\uff0c\u6309\u987a\u5e8f\u52a0\u8f7d\u6bcf\u4e2a\u6570\u636e\u5e93</p> required"},{"location":"api/#lmdb.pylmdb.ReaderList.__len__","title":"<code>__len__()</code>","text":"<p>\u83b7\u53d6\u7ec4\u5408\u6570\u636e\u96c6\u7684\u603b\u6761\u76ee\u6570</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>\u6240\u6709LMDB\u6570\u636e\u5e93\u7684\u6761\u76ee\u6570\u4e4b\u548c</p>"},{"location":"api/#lmdb.pylmdb.ReaderList.close","title":"<code>close()</code>","text":"<p>\u5173\u95ed\u6240\u6709\u6253\u5f00\u7684LMDB\u6570\u636e\u5e93\u8fde\u63a5</p> <p>\u8be5\u65b9\u6cd5\u5e94\u5728\u4f7f\u7528\u5b8c\u6bd5\u540e\u663e\u5f0f\u8c03\u7528\uff0c\u786e\u4fdd\u8d44\u6e90\u6b63\u786e\u91ca\u653e</p>"},{"location":"api/#lmdb.pylmdb.ReaderSSD","title":"<code>ReaderSSD</code>","text":"<p>\u9488\u5bf9SSD\u4f18\u5316\u7684LMDB\u6570\u636e\u5e93\u8bfb\u53d6\u5668\uff0c\u652f\u6301\u9ad8\u6548\u968f\u673a\u8bbf\u95ee</p> <p>\u8be5\u7c7b\u9488\u5bf9SSD\u5b58\u50a8\u7279\u6027\u4f18\u5316\uff0c\u6bcf\u6b21\u8bfb\u53d6\u65f6\u52a8\u6001\u6253\u5f00\u6570\u636e\u5e93\u8fde\u63a5\uff0c \u9002\u5408\u9700\u8981\u9ad8\u5e76\u53d1\u968f\u673a\u8bbf\u95ee\u7684\u573a\u666f\uff0c\u53ef\u5145\u5206\u5229\u7528SSD\u7684IOPS\u6027\u80fd\u3002</p> <p>Attributes:</p> Name Type Description <code>db_len</code> <code>int</code> <p>\u6570\u636e\u5e93\u6761\u76ee\u603b\u6570</p> <code>db_path</code> <code>str</code> <p>LMDB\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84</p> <code>multiprocessing</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u591a\u8fdb\u7a0b\u6a21\u5f0f</p>"},{"location":"api/#lmdb.pylmdb.ReaderSSD.__getitem__","title":"<code>__getitem__(idx)</code>","text":"<p>\u901a\u8fc7\u7d22\u5f15\u83b7\u53d6\u5355\u4e2a\u6570\u636e\u6761\u76ee</p> <p>\u6bcf\u6b21\u8c03\u7528\u65f6\u52a8\u6001\u6253\u5f00\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u8bfb\u53d6\u5b8c\u6210\u540e\u7acb\u5373\u5173\u95ed\u3002 \u9002\u5408\u968f\u673a\u8bbf\u95ee\u6a21\u5f0f\uff0c\u7279\u522b\u662f\u5728SSD\u5b58\u50a8\u4e0a\u3002</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>\u6570\u636e\u6761\u76ee\u7d22\u5f15</p> required <p>Returns:</p> Name Type Description <code>object</code> <code>object</code> <p>\u7d22\u5f15\u5bf9\u5e94\u7684\u6570\u636e\u6761\u76ee</p> <p>Raises:</p> Type Description <code>IndexError</code> <p>\u5f53\u7d22\u5f15\u8d85\u51fa\u6709\u6548\u8303\u56f4\u65f6\u629b\u51fa</p>"},{"location":"api/#lmdb.pylmdb.ReaderSSD.__init__","title":"<code>__init__(db_path, multiprocessing=False)</code>","text":"<p>\u521d\u59cb\u5316SSD\u4f18\u5316\u7684LMDB\u8bfb\u53d6\u5668</p> <p>Parameters:</p> Name Type Description Default <code>db_path</code> <code>str</code> <p>LMDB\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84</p> required <code>multiprocessing</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u591a\u8fdb\u7a0b\u652f\u6301\u3002 \u542f\u7528\u540e\u5c06\u5141\u8bb8\u5728\u591a\u4e2a\u8fdb\u7a0b\u4e2d\u540c\u65f6\u6253\u5f00\u6570\u636e\u5e93\u8fde\u63a5\u3002\u9ed8\u8ba4\u4e3aFalse\u3002</p> <code>False</code>"},{"location":"api/#lmdb.pylmdb.ReaderSSD.__len__","title":"<code>__len__()</code>","text":"<p>\u83b7\u53d6\u6570\u636e\u5e93\u7684\u603b\u6761\u76ee\u6570</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>\u6570\u636e\u5e93\u4e2d\u7684\u6761\u76ee\u603b\u6570</p>"},{"location":"api/#lmdb.pylmdb.ReaderSSD.get_batch","title":"<code>get_batch(indices)</code>","text":"<p>\u6279\u91cf\u83b7\u53d6\u591a\u4e2a\u6570\u636e\u6761\u76ee</p> <p>\u4f18\u5316\u7684\u6279\u91cf\u8bfb\u53d6\u63a5\u53e3\uff0c\u5728\u4e00\u4e2a\u6570\u636e\u5e93\u8fde\u63a5\u4e2d\u8bfb\u53d6\u591a\u4e2a\u6761\u76ee\uff0c \u51cf\u5c11\u9891\u7e41\u6253\u5f00/\u5173\u95ed\u8fde\u63a5\u7684\u5f00\u9500\u3002</p> <p>Parameters:</p> Name Type Description Default <code>indices</code> <code>list[int]</code> <p>\u6570\u636e\u6761\u76ee\u7d22\u5f15\u5217\u8868</p> required <p>Returns:</p> Type Description <p>list[object]: \u7d22\u5f15\u5bf9\u5e94\u7684\u6570\u636e\u6761\u76ee\u5217\u8868</p> <p>Raises:</p> Type Description <code>IndexError</code> <p>\u5f53\u4efb\u4f55\u7d22\u5f15\u8d85\u51fa\u6709\u6548\u8303\u56f4\u65f6\u629b\u51fa</p>"},{"location":"api/#lmdb.pylmdb.ReaderSSDList","title":"<code>ReaderSSDList</code>","text":"<p>\u7ec4\u5408\u591a\u4e2aSSD\u4f18\u5316\u7684LMDB\u6570\u636e\u5e93\u8fdb\u884c\u7edf\u4e00\u8bfb\u53d6\u7684\u7c7b\uff0c\u63d0\u4f9b\u5e8f\u5217\u534f\u8bae\u7684\u63a5\u53e3</p> <p>\u8be5\u7c7b\u7528\u4e8e\u5c06\u591a\u4e2aSSD\u4f18\u5316\u7684LMDB\u6570\u636e\u5e93\u5408\u5e76\u4e3a\u4e00\u4e2a\u903b\u8f91\u6570\u636e\u96c6\uff0c\u652f\u6301\u901a\u8fc7\u7d22\u5f15\u8bbf\u95ee\u548c\u83b7\u53d6\u957f\u5ea6\u3002 \u5185\u90e8\u7ef4\u62a4\u6570\u636e\u5e93\u7d22\u5f15\u6620\u5c04\u8868\u548c\u771f\u5b9e\u7d22\u5f15\u6620\u5c04\u8868\uff0c\u5b9e\u73b0\u8de8\u6570\u636e\u5e93\u7684\u900f\u660e\u8bbf\u95ee\uff0c\u540c\u65f6\u4fdd\u6301SSD\u4f18\u5316\u7279\u6027\u3002</p> <p>Attributes:</p> Name Type Description <code>db_path_list</code> <code>List[str]</code> <p>LMDB\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\u5217\u8868</p> <code>db_mapping</code> <code>List[int]</code> <p>\u7d22\u5f15\u5230\u6570\u636e\u5e93\u7d22\u5f15\u7684\u6620\u5c04\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u5bf9\u5e94\u7d22\u5f15\u6570\u636e\u6240\u5728\u7684\u6570\u636e\u5e93\u4e0b\u6807</p> <code>real_idx_mapping</code> <code>List[int]</code> <p>\u7d22\u5f15\u5230\u6570\u636e\u5e93\u5185\u771f\u5b9e\u7d22\u5f15\u7684\u6620\u5c04\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u6570\u636e\u5728\u5bf9\u5e94\u6570\u636e\u5e93\u4e2d\u7684\u539f\u59cb\u7d22\u5f15</p> <code>multiprocessing</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u591a\u8fdb\u7a0b\u6a21\u5f0f</p>"},{"location":"api/#lmdb.pylmdb.ReaderSSDList.__getitem__","title":"<code>__getitem__(idx)</code>","text":"<p>\u901a\u8fc7\u7d22\u5f15\u83b7\u53d6\u6570\u636e\u6761\u76ee</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>\u6570\u636e\u6761\u76ee\u5728\u7ec4\u5408\u6570\u636e\u96c6\u4e2d\u7684\u903b\u8f91\u7d22\u5f15</p> required <p>Returns:</p> Name Type Description <code>object</code> <p>\u5bf9\u5e94\u4f4d\u7f6e\u7684\u6570\u636e\u6761\u76ee\uff0c\u5177\u4f53\u7c7b\u578b\u53d6\u51b3\u4e8eLMDB\u5b58\u50a8\u7684\u6570\u636e\u683c\u5f0f</p> <p>Raises:</p> Type Description <code>IndexError</code> <p>\u5f53\u7d22\u5f15\u8d85\u51fa\u7ec4\u5408\u6570\u636e\u96c6\u8303\u56f4\u65f6\u629b\u51fa</p>"},{"location":"api/#lmdb.pylmdb.ReaderSSDList.__init__","title":"<code>__init__(db_path_list, multiprocessing=False)</code>","text":"<p>\u521d\u59cb\u5316\u7ec4\u5408SSD\u4f18\u5316\u6570\u636e\u5e93\u8bfb\u53d6\u5668</p> <p>Parameters:</p> Name Type Description Default <code>db_path_list</code> <code>List[str]</code> <p>LMDB\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\u5217\u8868\uff0c\u6309\u987a\u5e8f\u52a0\u8f7d\u6bcf\u4e2a\u6570\u636e\u5e93</p> required <code>multiprocessing</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u591a\u8fdb\u7a0b\u652f\u6301\u3002\u9ed8\u8ba4\u4e3aFalse\u3002</p> <code>False</code>"},{"location":"api/#lmdb.pylmdb.ReaderSSDList.__len__","title":"<code>__len__()</code>","text":"<p>\u83b7\u53d6\u7ec4\u5408\u6570\u636e\u96c6\u7684\u603b\u6761\u76ee\u6570</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>\u6240\u6709LMDB\u6570\u636e\u5e93\u7684\u6761\u76ee\u6570\u4e4b\u548c</p>"},{"location":"api/#lmdb.pylmdb.ReaderSSDList.get_batch","title":"<code>get_batch(indices)</code>","text":"<p>\u6279\u91cf\u83b7\u53d6\u591a\u4e2a\u6570\u636e\u6761\u76ee</p> <p>\u5bf9\u540c\u4e00\u6570\u636e\u5e93\u4e2d\u7684\u7d22\u5f15\u8fdb\u884c\u5206\u7ec4\uff0c\u7136\u540e\u4f7f\u7528\u5bf9\u5e94\u6570\u636e\u5e93\u7684get_batch\u65b9\u6cd5\u6279\u91cf\u8bfb\u53d6\uff0c \u51cf\u5c11\u9891\u7e41\u6253\u5f00/\u5173\u95ed\u8fde\u63a5\u7684\u5f00\u9500\u3002</p> <p>Parameters:</p> Name Type Description Default <code>indices</code> <code>list[int]</code> <p>\u6570\u636e\u6761\u76ee\u7d22\u5f15\u5217\u8868</p> required <p>Returns:</p> Type Description <p>list[object]: \u7d22\u5f15\u5bf9\u5e94\u7684\u6570\u636e\u6761\u76ee\u5217\u8868</p> <p>Raises:</p> Type Description <code>IndexError</code> <p>\u5f53\u4efb\u4f55\u7d22\u5f15\u8d85\u51fa\u6709\u6548\u8303\u56f4\u65f6\u629b\u51fa</p>"},{"location":"api/#lmdb.pylmdb.Writer","title":"<code>Writer</code>","text":"<p>\u7528\u4e8e\u5c06\u6570\u636e\u96c6\u7684\u5bf9\u8c61 ('numpy.ndarray') \u5199\u5165\u95ea\u7535\u5185\u5b58\u6620\u5c04\u6570\u636e\u5e93 (LMDB),\u5e76\u5e26\u6709MessagePack\u538b\u7f29\u3002 Note:</p> <pre><code>db =  sindre.lmdb.Writer(dirpath=r'datasets/lmdb', map_size_limit=1024*100,ram_gb_limit=3.0)\ndb.set_meta_str(\"\u63cf\u8ff0\u4fe1\u606f\", \"xxxx\")\n\ndata = {xx:np.array(xxx)} # \u5c3d\u91cf\u5360\u7528ram_gb_limit\u5185\u5b58\n\ngb_required = db.check_sample_size(data) # \u8ba1\u7b97\u6570\u636e\u5360\u7528\u5185\u5b58(GB)\n\ndb.put_samples(data) # \u4e00\u6b21\u6027\u5199\u5165,\u6ce8\u610fgb_required&lt;ram_gb_limit\u9650\u5236\n\n\ndb.close()\n</code></pre>"},{"location":"api/#lmdb.pylmdb.Writer.__init__","title":"<code>__init__(dirpath, map_size_limit, multiprocessing=False)</code>","text":"<p>\u521d\u59cb\u5316</p> <p>Parameters:</p> Name Type Description Default <code>dirpath</code> <code>str</code> <p>\u5e94\u8be5\u5199\u5165LMDB\u7684\u76ee\u5f55\u7684\u8def\u5f84\u3002</p> required <code>map_size_limit</code> <code>int</code> <p>LMDB\u7684map\u5927\u5c0f,\u5355\u4f4d\u4e3aMB\u3002\u5fc5\u987b\u8db3\u591f\u5927\u4ee5\u6355\u83b7\u6253\u7b97\u5b58\u50a8\u5728LMDB\u4e2d\u6240\u6709\u6570\u636e\u3002</p> required <code>multiprocessing</code> <code>bool</code> <p>\u662f\u5426\u5f00\u542f\u591a\u8fdb\u7a0b\u3002</p> <code>False</code>"},{"location":"api/#lmdb.pylmdb.Writer.change_db_value","title":"<code>change_db_value(key, value, safe_model=True)</code>","text":"<p>\u4fee\u6539\u952e\u503c</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>int</code> <p>\u952e</p> required <code>value</code> <code>dict</code> <p>\u5185\u5bb9</p> required <code>safe_model</code> <code>bool</code> <p>\u5b89\u5168\u6a21\u5f0f,\u5982\u679c\u5f00\u542f,\u5219\u4fee\u6539\u4f1a\u63d0\u793a;</p> <code>True</code>"},{"location":"api/#lmdb.pylmdb.Writer.change_value","title":"<code>change_value(num_id, samples)</code>","text":"<p>\u901a\u8fc7\u6307\u5b9a\u7d22\u5f15,\u4fee\u6539\u5185\u5bb9 Args:     num_id: \u7d22\u5f15     samples: \u5185\u5bb9</p> <p>Returns:</p>"},{"location":"api/#lmdb.pylmdb.Writer.check_db_stats","title":"<code>check_db_stats()</code>","text":"<p>\u68c0\u67e5lmdb\u662f\u7ee7\u7eed\u5199,\u8fd8\u662f\u65b0\u5199</p>"},{"location":"api/#lmdb.pylmdb.Writer.check_sample_size","title":"<code>check_sample_size(samples)</code>","text":"<p>\u68c0\u6d4bsample\u5b57\u5178\u7684\u5927\u5c0f</p> <p>Parameters:</p> Name Type Description Default <code>samples</code> <code>_type_</code> <p>\u5b57\u5178\u7c7b\u578b\u6570\u636e</p> required Return <p>gb_required : \u5b57\u5178\u5927\u5c0f(GB)</p>"},{"location":"api/#lmdb.pylmdb.Writer.close","title":"<code>close()</code>","text":"<p>\u5173\u95ed\u73af\u5883\u3002 \u5728\u5173\u95ed\u4e4b\u524d,\u5c06\u6837\u672c\u6570\u5199\u5165<code>meta_db</code>,\u4f7f\u6240\u6709\u6253\u5f00\u7684\u8fed\u4ee3\u5668\u3001\u6e38\u6807\u548c\u4e8b\u52a1\u65e0\u6548\u3002</p>"},{"location":"api/#lmdb.pylmdb.Writer.put_samples","title":"<code>put_samples(samples)</code>","text":"<p>\u5c06\u4f20\u5165\u5185\u5bb9\u7684\u952e\u548c\u503c\u653e\u5165<code>data_db</code> LMDB\u4e2d\u3002</p> Notes <p>\u51fd\u6570\u5047\u8bbe\u6240\u6709\u503c\u7684\u7b2c\u4e00\u4e2a\u8f74\u8868\u793a\u6837\u672c\u6570\u3002\u56e0\u6b64,\u5355\u4e2a\u6837\u672c\u5fc5\u987b\u5728<code>numpy.newaxis</code>\u4e4b\u524d\u3002</p> <p>\u4f5c\u4e3aPython\u5b57\u5178:</p> <pre><code>put_samples({'key1': value1, 'key2': value2, ...})\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>samples</code> <code>dict</code> <p>\u7531\u5b57\u7b26\u4e32\u548cnumpy\u6570\u7ec4\u7ec4\u6210</p> required"},{"location":"api/#lmdb.pylmdb.Writer.set_meta_str","title":"<code>set_meta_str(key, string)</code>","text":"<p>\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u5199\u5165<code>meta_db</code>\u4e2d\u7684\u8f93\u5165\u952e\u3002</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>string or bytestring</p> required <code>string</code> <code>str</code> <p>string</p> required"},{"location":"api/#lmdb.pylmdb.MergeLmdb","title":"<code>MergeLmdb(target_dir, source_dirs, map_size_limit, multiprocessing=False)</code>","text":"<p>\u5c06\u591a\u4e2a\u6e90LMDB\u6570\u636e\u5e93\u5408\u5e76\u5230\u76ee\u6807\u6570\u636e\u5e93</p> <p>Parameters:</p> Name Type Description Default <code>target_dir</code> <code>str</code> <p>\u76ee\u6807LMDB\u8def\u5f84</p> required <code>source_dirs</code> <code>list</code> <p>\u6e90LMDB\u8def\u5f84\u5217\u8868</p> required <code>map_size_limit</code> <code>int</code> <p>\u76ee\u6807LMDB\u7684map\u5927\u5c0f\u9650\u5236\uff08MB\uff09</p> required <code>multiprocessing</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u591a\u8fdb\u7a0b\u6a21\u5f0f</p> <code>False</code> Example <pre><code># \u5408\u5e76\u793a\u4f8b\nMergeLmdb(\n    target_dir=\"merged.db\",\n    source_dirs=[\"db1\", \"db2\"],\n    map_size_limit=1024  # 1GB\n)\n</code></pre>"},{"location":"api/#lmdb.pylmdb.SplitLmdb","title":"<code>SplitLmdb(source_dir, target_dirs, map_size_limit, multiprocessing=False)</code>","text":"<p>\u5c06\u6e90LMDB\u6570\u636e\u5e93\u5747\u5300\u62c6\u5206\u5230\u591a\u4e2a\u76ee\u6807\u6570\u636e\u5e93</p> <p>Parameters:</p> Name Type Description Default <code>source_dir</code> <code>str</code> <p>\u6e90LMDB\u8def\u5f84</p> required <code>target_dirs</code> <code>list</code> <p>\u76ee\u6807LMDB\u8def\u5f84\u5217\u8868</p> required <code>map_size_limit</code> <code>int</code> <p>\u6bcf\u4e2a\u76ee\u6807LMDB\u7684map\u5927\u5c0f\u9650\u5236\uff08MB\uff09</p> required <code>multiprocessing</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u591a\u8fdb\u7a0b\u6a21\u5f0f</p> <code>False</code> Example <pre><code>SplitLmdb(\nsource_dir=\"large.db\",\ntarget_dirs=[f\"split_{i}.db\" for i in range(4)],\nmap_size_limit=256\n)\n</code></pre>"},{"location":"api/#lmdb.pylmdb.fix_lmdb_windows_size","title":"<code>fix_lmdb_windows_size(dirpath)</code>","text":"<p>\u4fee\u590dlmdb\u5728windows\u7cfb\u7edf\u4e0a\u521b\u5efa\u5927\u5c0f\u5f02\u5e38\u95ee\u9898(windows\u4e0almdb\u6ca1\u6cd5\u5b9e\u65f6\u53d8\u5316\u5927\u5c0f);</p> <p>Parameters:</p> Name Type Description Default <code>dirpath</code> <code>str</code> <p>lmdb\u76ee\u5f55\u8def\u5f84</p> required <p>Returns:</p>"},{"location":"api/#lmdb.pylmdb.parallel_write","title":"<code>parallel_write(output_dir, file_list, process, map_size_limit, num_processes, multiprocessing=False, temp_root='./tmp', cleanup_temp=True)</code>","text":"<p>\u591a\u8fdb\u7a0b\u5904\u7406JSON\u6587\u4ef6\u5e76\u5199\u5165LMDB</p> <p>Parameters:</p> Name Type Description Default <code>output_dir</code> <code>str</code> <p>\u6700\u7ec8\u8f93\u51faLMDB\u8def\u5f84</p> required <code>file_list</code> <code>list</code> <p>\u6587\u4ef6\u8def\u5f84\u5217\u8868</p> required <code>process</code> <code>callable</code> <p>\u6570\u636e\u5904\u7406\u51fd\u6570</p> required <code>map_size_limit</code> <code>int</code> <p>\u603bLMDB\u7684map\u5927\u5c0f\u9650\u5236(MB)</p> required <code>num_processes</code> <code>int</code> <p>\u8fdb\u7a0b\u6570\u91cf</p> required <code>multiprocessing</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u591a\u8fdb\u7a0b\u6a21\u5f0f</p> <code>False</code> <code>temp_root</code> <code>str</code> <p>\u4e34\u65f6\u76ee\u5f55\u6839\u8def\u5f84\uff08\u9ed8\u8ba4./tmp\uff0c\u5c3d\u91cf\u5199\u5728SSD,\u65b9\u4fbf\u5feb\u901f\u8f6c\u6362</p> <code>'./tmp'</code> <code>cleanup_temp</code> <code>bool</code> <p>\u662f\u5426\u6e05\u7406\u4e34\u65f6\u76ee\u5f55\uff08\u9ed8\u8ba4True\uff09</p> <code>True</code> Example <pre><code>\ndef process(json_file):\n    with open(json_file,\"r\") as f:\n        data = json.loads(f.read())\n    id=data[\"id_patient\"]\n    jaw = data[\"jaw\"]\n    labels = data[\"labels\"]\n\n    mesh = vedo.load( json_file.replace(\".json\",\".obj\"))\n    vertices = mesh.vertices\n    faces = mesh.cells\n\n\n    out = {\n        'mesh_faces':faces,\n        'mesh_vertices':vertices,\n        'vertex_labels':labels,\n        \"jaw\":jaw,\n\n    }\n    return out\n\n\n\nif __name__ == '__main__':\n    json_file_list = glob.glob(\"./*/*/*.json\")\n    print(len(json_file_list))\n\n    sindre.lmdb.parallel_write(\n        output_dir=dirpath,\n        file_list=json_file_list[:16],\n        process=process,\n        map_size_limit=map_size_limit,\n        num_processes=8,\n        temp_root=\"./processing_temp\", \n        cleanup_temp=False  \n    )\n\n\n</code></pre>"},{"location":"api/#lmdb.tools.check_filesystem_is_ext4","title":"<code>check_filesystem_is_ext4(current_path)</code>","text":"<p>\u68c0\u6d4b\u786c\u76d8\u662f\u5426\u4e3aext4</p> <p>Parameters:</p> Name Type Description Default <code>current_path</code> <code>str</code> <p>\u9700\u8981\u68c0\u6d4b\u7684\u78c1\u76d8\u8def\u5f84</p> required <p>Returns:</p> Name Type Description <code>True</code> <code>bool</code> <p>\u5f53\u524d\u4e3aext4\u78c1\u76d8\uff0c\u652f\u6301\u81ea\u9002\u5e94\u5bb9\u91cf\u5206\u914d</p> <code>False</code> <code>bool</code> <p>\u5f53\u524d\u4e0d\u662fext4\u78c1\u76d8\uff0c\u4e0d\u652f\u6301\u81ea\u9002\u5e94\u5bb9\u91cf\u5206\u914d</p>"},{"location":"api/#lmdb.tools.decode_data","title":"<code>decode_data(obj)</code>","text":"<p>\u89e3\u7801\u4e00\u4e2a\u5e8f\u5217\u5316\u7684\u6570\u636e\u5bf9\u8c61\u3002</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <p>Python \u5b57\u5178 \u4e00\u4e2a\u63cf\u8ff0\u5e8f\u5217\u5316\u6570\u636e\u5bf9\u8c61\u7684\u5b57\u5178\u3002</p> required"},{"location":"api/#lmdb.tools.decode_str","title":"<code>decode_str(obj, encoding='utf-8', errors='strict')</code>","text":"<p>\u5c06\u8f93\u5165\u5b57\u8282\u5bf9\u8c61\u89e3\u7801\u4e3a\u5b57\u7b26\u4e32\u3002</p>"},{"location":"api/#lmdb.tools.decode_str--parameters","title":"Parameters","text":"<p>obj : byte object encoding : string     Default is <code>utf-8</code>. errors : string    \u6307\u5b9a\u5e94\u5982\u4f55\u5904\u7406\u7f16\u7801\u9519\u8bef\u3002\u9ed8\u8ba4\u4e3a <code>strict</code>.</p>"},{"location":"api/#lmdb.tools.encode_data","title":"<code>encode_data(obj)</code>","text":"<p>\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u8be5\u5b57\u5178\u5305\u542b\u5bf9\u8f93\u5165\u6570\u636e\u5bf9\u8c61\u8fdb\u884c\u7f16\u7801\u540e\u7684\u4fe1\u606f\u3002</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <p>\u6570\u636e\u5bf9\u8c61 \u5982\u679c\u4f20\u5165\u7684\u6570\u636e\u5bf9\u8c61\u65e2\u4e0d\u662f\u5b57\u7b26\u4e32\u4e5f\u4e0d\u662f\u666e\u901a\u7684 NumPy \u6570\u7ec4\uff0c \u5219\u8be5\u5bf9\u8c61\u5c06\u6309\u539f\u6837\u8fd4\u56de\u3002</p> required"},{"location":"api/#lmdb.tools.encode_str","title":"<code>encode_str(string, encoding='utf-8', errors='strict')</code>","text":"<p>\u8fd4\u56de\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u7f16\u7801\u5b57\u8282\u5bf9\u8c61\u3002</p>"},{"location":"api/#lmdb.tools.encode_str--parameters","title":"Parameters","text":"<p>string : string encoding : string     Default is <code>utf-8</code>. errors : string    \u6307\u5b9a\u5e94\u5982\u4f55\u5904\u7406\u7f16\u7801\u9519\u8bef\u3002\u9ed8\u8ba4\u4e3a <code>strict</code>.</p>"},{"location":"api/#api_1","title":"\u4e09\u7ef4\u7b97\u6cd5API","text":"<pre><code>@path   \uff1asindre_package -&gt; tools.py\n@IDE    \uff1aPyCharm\n@Author \uff1asindre\n@Email  \uff1ayx@mviai.com\n@Date   \uff1a2024/6/17 15:38\n@Version: V0.1\n@License: (C)Copyright 2021-2023 , UP3D\n@Reference: \n@History:\n- 2024/6/17 :\n\n(\u4e00)\u672c\u4ee3\u7801\u7684\u8d28\u91cf\u4fdd\u8bc1\u671f\uff08\u7b80\u79f0\u201c\u8d28\u4fdd\u671f\u201d\uff09\u4e3a\u4e0a\u7ebf\u5185 1\u4e2a\u6708\uff0c\u8d28\u4fdd\u671f\u5185\u4e59\u65b9\u5bf9\u6240\u4ee3\u7801\u5b9e\u884c\u5305\u4fee\u6539\u670d\u52a1\u3002\n(\u4e8c)\u672c\u4ee3\u7801\u63d0\u4f9b\u4e09\u5305\u670d\u52a1\uff08\u5305\u9605\u8bfb\u3001\u5305\u7f16\u8bd1\u3001\u5305\u8fd0\u884c\uff09\u4e0d\u5305\u719f\n(\u4e09)\u672c\u4ee3\u7801\u6240\u6709\u89e3\u91ca\u6743\u5f52\u6743\u5f52\u795e\u517d\u6240\u6709\uff0c\u7981\u6b62\u672a\u5f00\u5149\u76f2\u76ee\u4e0a\u7ebf\n(\u56db)\u8bf7\u4e25\u683c\u6309\u7167\u4fdd\u517b\u624b\u518c\u5bf9\u4ee3\u7801\u8fdb\u884c\u4fdd\u517b\uff0c\u672c\u4ee3\u7801\u7279\u70b9\uff1a\n      i. \u8fd0\u884c\u5728\u98ce\u7535\u3001\u6c34\u7535\u7684\u673a\u5668\u4e0a\n     ii. \u673a\u5668\u673a\u5934\u671d\u4e1c\uff0c\u6bd4\u8f83\u559c\u6b22\u592a\u9633\u7684\u7167\u5c04\n    iii. \u96c6\u6210\u6b64\u4ee3\u7801\u7684\u4eba\u5458\uff0c\u5e94\u62d2\u7edd\u9ec4\u8d4c\u6bd2\uff0c\u5bb9\u6613\u8bf1\u53d1\u672c\u4ee3\u7801\u6027\u80fd\u8d8a\u6765\u8d8a\u5f31\n\u58f0\u660e\uff1a\u672a\u5c65\u884c\u5c06\u89c6\u4e3a\u81ea\u4e3b\u653e\u5f03\u8d28\u4fdd\u671f\uff0c\u672c\u4eba\u4e0d\u627f\u62c5\u5bf9\u6b64\u4ea7\u751f\u7684\u4e00\u5207\u6cd5\u5f8b\u540e\u679c\n\u5982\u6709\u95ee\u9898\uff0c\u70ed\u7ebf: 114\n\n</code></pre> <p>\u4e13\u6ce8\u4e8e\u7259\u988cmesh\u7684\u7279\u6b8a\u5b9e\u73b0</p>"},{"location":"api/#utils3d.algorithm.A_Star","title":"<code>A_Star</code>","text":""},{"location":"api/#utils3d.algorithm.A_Star.__init__","title":"<code>__init__(vertices, faces)</code>","text":"<p>\u4f7f\u7528A*\u7b97\u6cd5\u5728\u4e09\u7ef4\u4e09\u89d2\u7f51\u683c\u4e2d\u5bfb\u627e\u6700\u77ed\u8def\u5f84</p> <p>\u53c2\u6570\uff1a vertices: numpy\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(N,3)\uff0c\u8868\u793a\u9876\u70b9\u5750\u6807 faces: numpy\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(M,3)\uff0c\u8868\u793a\u4e09\u89d2\u5f62\u9762\u7684\u9876\u70b9\u7d22\u5f15</p>"},{"location":"api/#utils3d.algorithm.A_Star.build_adjacency","title":"<code>build_adjacency(faces)</code>","text":"<p>\u6784\u5efa\u9876\u70b9\u7684\u90bb\u63a5\u8868</p>"},{"location":"api/#utils3d.algorithm.A_Star.run","title":"<code>run(start_idx, end_idx, vertex_weights=None)</code>","text":"<p>\u4f7f\u7528A*\u7b97\u6cd5\u5728\u4e09\u7ef4\u4e09\u89d2\u7f51\u683c\u4e2d\u5bfb\u627e\u6700\u77ed\u8def\u5f84</p> <p>\u53c2\u6570\uff1a start_idx: \u8d77\u59cb\u9876\u70b9\u7684\u7d22\u5f15 end_idx: \u76ee\u6807\u9876\u70b9\u7684\u7d22\u5f15 vertex_weights: \u53ef\u9009\uff0c\u5f62\u72b6\u4e3a(N,)\uff0c\u9876\u70b9\u6743\u91cd\u6570\u7ec4\uff0c\u9ed8\u8ba4\u4e3aNone</p> <p>\u8fd4\u56de\uff1a path: \u5217\u8868\uff0c\u8868\u793a\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u9876\u70b9\u7d22\u5f15\u8def\u5f84\uff0c\u82e5\u4e0d\u53ef\u8fbe\u8fd4\u56deNone</p>"},{"location":"api/#utils3d.algorithm.BestKFinder","title":"<code>BestKFinder</code>","text":""},{"location":"api/#utils3d.algorithm.BestKFinder.__init__","title":"<code>__init__(points, labels)</code>","text":"<p>\u521d\u59cb\u5316\u7c7b\uff0c\u63a5\u6536\u70b9\u4e91\u7f51\u683c\u6570\u636e\u548c\u5bf9\u5e94\u7684\u6807\u7b7e</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>ndarray</code> <p>\u70b9\u4e91\u6570\u636e\uff0c\u5f62\u72b6\u4e3a (N, 3)</p> required <code>labels</code> <code>ndarray</code> <p>\u70b9\u4e91\u6807\u7b7e\uff0c\u5f62\u72b6\u4e3a (N,)</p> required"},{"location":"api/#utils3d.algorithm.BestKFinder.calculate_boundary_points","title":"<code>calculate_boundary_points(k)</code>","text":"<p>\u8ba1\u7b97\u8fb9\u754c\u70b9 :param k: \u6700\u8fd1\u90bb\u70b9\u7684\u6570\u91cf :return: \u8fb9\u754c\u70b9\u7684\u6807\u7b7e\u6570\u7ec4</p>"},{"location":"api/#utils3d.algorithm.BestKFinder.evaluate_boundary_points","title":"<code>evaluate_boundary_points(bd_labels)</code>","text":"<p>\u8bc4\u4f30\u8fb9\u754c\u70b9\u7684\u5206\u5e03\u5408\u7406\u6027 \u8fd9\u91cc\u7b80\u5355\u4f7f\u7528\u8fb9\u754c\u70b9\u7684\u6570\u91cf\u5360\u6bd4\u4f5c\u4e3a\u8bc4\u4f30\u6307\u6807 :param bd_labels: \u8fb9\u754c\u70b9\u7684\u6807\u7b7e\u6570\u7ec4 :return: \u8bc4\u4f30\u5f97\u5206</p>"},{"location":"api/#utils3d.algorithm.BestKFinder.find_best_k","title":"<code>find_best_k(k_values)</code>","text":"<p>\u627e\u51fa\u6700\u4f73\u7684\u6700\u8fd1\u90bb\u70b9\u5927\u5c0f</p> <p>:param k_values: \u5f85\u6d4b\u8bd5\u7684\u6700\u8fd1\u90bb\u70b9\u5927\u5c0f\u5217\u8868 :return: \u6700\u4f73\u7684\u6700\u8fd1\u90bb\u70b9\u5927\u5c0f</p>"},{"location":"api/#utils3d.algorithm.FlyByGenerator","title":"<code>FlyByGenerator</code>","text":"<p>\u4ece3D\u7f51\u683c\u6a21\u578b\u751f\u6210\u591a\u89c6\u89d22D\u56fe\u50cf\u7684\u6e32\u67d3\u5668</p> <p>\u652f\u6301\u4ece\u4e0d\u540c\u89c6\u89d2\u6e32\u67d33D\u7f51\u683c\uff0c\u751f\u6210\u5305\u542b\u6cd5\u7ebf\u3001\u6df1\u5ea6\u7b49\u7279\u5f81\u76842D\u56fe\u50cf\uff0c \u5e76\u63d0\u4f9b\u50cf\u7d20\u5230\u9876\u70b9\u7684\u6620\u5c04\u529f\u80fd\uff0c\u7528\u4e8e\u540e\u7eed\u7f51\u683c\u9876\u70b9\u6807\u7b7e\u7684\u751f\u6210\u3002</p>"},{"location":"api/#utils3d.algorithm.FlyByGenerator.__init__","title":"<code>__init__(vertices, faces, resolution=224, use_z=False, split_z=False, rescale_features=False)</code>","text":"<p>\u521d\u59cb\u5316\u6e32\u67d3\u5668</p> <p>Parameters:</p> Name Type Description Default <code>vertices</code> <code>ndarray</code> <p>\u7f51\u683c\u9876\u70b9\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (N, 3)</p> required <code>faces</code> <code>ndarray</code> <p>\u7f51\u683c\u9762\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (M, 3) \u6216 (M, 4)\uff0c\u8868\u793a\u4e09\u89d2\u5f62\u6216\u56db\u8fb9\u5f62\u9762</p> required <code>resolution</code> <code>int</code> <p>\u8f93\u51fa\u56fe\u50cf\u7684\u5206\u8fa8\u7387\uff0c\u9ed8\u8ba4\u4e3a224\u00d7224</p> <code>224</code> <code>use_z</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u6df1\u5ea6\u7f13\u51b2(z-buffer)</p> <code>False</code> <code>split_z</code> <code>bool</code> <p>\u662f\u5426\u5c06\u6df1\u5ea6\u4f5c\u4e3a\u72ec\u7acb\u901a\u9053\u8f93\u51fa</p> <code>False</code> <code>rescale_features</code> <code>bool</code> <p>\u662f\u5426\u5c06\u7279\u5f81\u503c\u5f52\u4e00\u5316\u5230[-1, 1]\u6216[0, 1]</p> <code>False</code>"},{"location":"api/#utils3d.algorithm.FlyByGenerator.cleanup","title":"<code>cleanup()</code>","text":"<p>\u6e05\u7406\u8d44\u6e90</p>"},{"location":"api/#utils3d.algorithm.FlyByGenerator.get_mesh_labels","title":"<code>get_mesh_labels(view_labels, pixel_mappings)</code>","text":"<p>\u4ece\u591a\u4e2a\u89c6\u89d2\u7684\u6807\u7b7e\u56fe\u50cf\u751f\u6210\u7f51\u683c\u9876\u70b9\u6807\u7b7e</p> <p>Parameters:</p> Name Type Description Default <code>view_labels</code> <code>List[ndarray]</code> <p>\u6bcf\u4e2a\u89c6\u89d2\u7684\u6807\u7b7e\u56fe\u50cf\u5217\u8868</p> required <code>pixel_mappings</code> <code>List[Dict]</code> <p>\u6bcf\u4e2a\u89c6\u89d2\u7684\u50cf\u7d20\u5230\u9876\u70b9\u6620\u5c04\u5217\u8868</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>\u7f51\u683c\u9876\u70b9\u6807\u7b7e\u6570\u7ec4</p>"},{"location":"api/#utils3d.algorithm.FlyByGenerator.get_pixel2point","title":"<code>get_pixel2point(view_index)</code>","text":"<p>\u83b7\u53d6\u6307\u5b9a\u89c6\u89d2\u7684\u50cf\u7d20\u5230\u9876\u70b9\u6620\u5c04\uff08\u7b80\u5316\u7248\u672c\uff09</p> <p>Parameters:</p> Name Type Description Default <code>view_index</code> <code>int</code> <p>\u89c6\u89d2\u7d22\u5f15</p> required <p>Returns:</p> Type Description <code>Dict[Tuple[int, int], int]</code> <p>\u50cf\u7d20\u5750\u6807\u5230\u9876\u70b9\u7d22\u5f15\u7684\u6620\u5c04\u5b57\u5178</p>"},{"location":"api/#utils3d.algorithm.FlyByGenerator.render_views","title":"<code>render_views()</code>","text":"<p>\u6e32\u67d3\u6240\u6709\u89c6\u89d2\u7684\u56fe\u50cf</p> <p>Returns:</p> Type Description <code>ndarray</code> <p>\u6e32\u67d3\u56fe\u50cf\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(num_views, height, width, channels)</p>"},{"location":"api/#utils3d.algorithm.FlyByGenerator.set_sphere_sampling","title":"<code>set_sphere_sampling(method, param, radius=4.0, turns=4)</code>","text":"<p>\u8bbe\u7f6e\u7403\u4f53\u91c7\u6837\u70b9\u65b9\u6cd5</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>\u91c7\u6837\u65b9\u6cd5\uff0c\"subdivision\"\u6216\"spiral\"</p> required <code>param</code> <code>int</code> <p>\u7ec6\u5206\u7ea7\u522b(\u7528\u4e8esubdivision)\u6216\u70b9\u6570(\u7528\u4e8espiral)</p> required <code>radius</code> <code>float</code> <p>\u91c7\u6837\u7403\u534a\u5f84</p> <code>4.0</code> <code>turns</code> <code>int</code> <p>\u87ba\u65cb\u65b9\u6cd5\u7684\u65cb\u8f6c\u5708\u6570</p> <code>4</code>"},{"location":"api/#utils3d.algorithm.GraphCutRefiner","title":"<code>GraphCutRefiner</code>","text":""},{"location":"api/#utils3d.algorithm.GraphCutRefiner.__init__","title":"<code>__init__(vertices, faces, vertex_labels, smooth_factor=None, temperature=None, keep_label=True)</code>","text":"<p>\u57fa\u4e8e\u9876\u70b9\u7684\u56fe\u5207\u4f18\u5316\u5668</p> <p>Parameters:</p> Name Type Description Default <code>vertices</code> <code>array - like</code> <p>\u9876\u70b9\u5750\u6807\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (n_vertices, 3)\u3002</p> required <code>faces</code> <code>array - like</code> <p>\u9762\u7247\u7d22\u5f15\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (n_faces, 3)\u3002</p> required <code>vertex_labels</code> <code>array - like</code> <p>\u9876\u70b9\u521d\u59cb\u6807\u7b7e\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (n_vertices,)\u3002</p> required <code>smooth_factor</code> <code>float</code> <p>\u5e73\u6ed1\u5f3a\u5ea6\u7cfb\u6570\uff0c\u8d8a\u5927\u8fb9\u754c\u8d8a\u5e73\u6ed1\u3002\u9ed8\u8ba4\u503c\u4e3a None\uff0c\u6b64\u65f6\u4f1a\u81ea\u52a8\u8ba1\u7b97\u3002\u8303\u56f4\u901a\u5e38\u5728 0.1 \u5230 0.6 \u4e4b\u95f4\u3002</p> <code>None</code> <code>temperature</code> <code>float</code> <p>\u6e29\u5ea6\u53c2\u6570\uff0c\u8d8a\u5927\u6807\u7b7e\u8d8a\u5e73\u6ed1\uff0c\u5904\u7406\u901f\u5ea6\u8d8a\u5feb\u3002\u9ed8\u8ba4\u503c\u4e3a None\uff0c\u6b64\u65f6\u4f1a\u81ea\u52a8\u8ba1\u7b97\u3002\u5178\u578b\u503c\u8303\u56f4\u5728 50 \u5230 500 \u4e4b\u95f4\uff0c\u4f1a\u968f\u7f51\u683c\u590d\u6742\u5ea6\u81ea\u52a8\u8c03\u6574\u3002</p> <code>None</code> <code>keep_label</code> <code>bool</code> <p>\u662f\u5426\u4fdd\u6301\u4f18\u5316\u524d\u540e\u6807\u7b7e\u7c7b\u522b\u4e00\u81f4\u6027\uff0c\u9ed8\u8ba4\u503c\u4e3a True\u3002</p> <code>True</code>"},{"location":"api/#utils3d.algorithm.GraphCutRefiner.refine_labels","title":"<code>refine_labels()</code>","text":"<p>\u6267\u884c\u6807\u7b7e\u4f18\u5316 :return: \u4f18\u5316\u540e\u7684\u9876\u70b9\u6807\u7b7e\u6570\u7ec4 (n_vertices,)</p>"},{"location":"api/#utils3d.algorithm.LabelUpsampler","title":"<code>LabelUpsampler</code>","text":""},{"location":"api/#utils3d.algorithm.LabelUpsampler.__init__","title":"<code>__init__(classifier_type='gbdt', knn_params={'n_neighbors': 3}, gbdt_params={'n_estimators': 100, 'max_depth': 5})</code>","text":"<p>\u6807\u7b7e\u4e0a\u91c7\u6837\uff0c\u7528\u4e8e\u5c06\u7b80\u5316\u540e\u7684\u6807\u7b7e\u6620\u5c04\u56de\u539f\u59cb\u7f51\u683c/\u70b9\u4e91</p> <p>Parameters:</p> Name Type Description Default <code>classifier_type</code> <p>str, optional (default='gbdt') \u5206\u7c7b\u5668\u7c7b\u578b\uff0c\u652f\u6301 'knn', 'gbdt', 'hgbdt', 'rfc'</p> <code>'gbdt'</code> <code>knn_params</code> <p>dict, optional KNN\u5206\u7c7b\u5668\u53c2\u6570,\u9ed8\u8ba4 {'n_neighbors': 3}</p> <code>{'n_neighbors': 3}</code> <code>gbdt_params</code> <p>dict, optional GBDT/HGBDT/RFC\u5206\u7c7b\u5668\u53c2\u6570,\u9ed8\u8ba4 {'n_estimators': 100, 'max_depth': 5}</p> <code>{'n_estimators': 100, 'max_depth': 5}</code>"},{"location":"api/#utils3d.algorithm.LabelUpsampler.fit","title":"<code>fit(train_features, train_labels)</code>","text":"<p>\u8bad\u7ec3\u6a21\u578b: \u5efa\u8bae\uff1a \u70b9\u4e91\uff1a \u6309\u7167[x,y,z,nx,ny,nz,cv] # \u9876\u70b9\u5750\u6807+\u9876\u70b9\u6cd5\u7ebf+\u66f2\u7387+\u5176\u4ed6\u7279\u5f81 \u7f51\u683c\uff1a \u6309\u7167[bx,by,bz,fnx,fny,fny] # \u9762\u7247\u91cd\u5fc3\u5750\u6807+\u9762\u7247\u6cd5\u7ebf+\u5176\u4ed6\u7279\u5f81</p>"},{"location":"api/#utils3d.algorithm.LabelUpsampler.predict","title":"<code>predict(query_features)</code>","text":"<p>\u9884\u6d4b\u6807\u7b7e\uff0c\u8f93\u5165\u7279\u5f81\u5e94\u4e0e\u8bad\u7ec3\u7279\u5f81\u4e00\u4e00\u5bf9\u5e94\uff1b</p>"},{"location":"api/#utils3d.algorithm.MeshRandomWalks","title":"<code>MeshRandomWalks</code>","text":""},{"location":"api/#utils3d.algorithm.MeshRandomWalks.__init__","title":"<code>__init__(vertices, faces, face_normals=None)</code>","text":"<p>\u968f\u673a\u6e38\u8d70\u5206\u5272\u7f51\u683c</p> <p>\u53c2\u8003\uff1ahttps://www.cnblogs.com/shushen/p/5144823.html</p> <p>Parameters:</p> Name Type Description Default <code>vertices</code> <p>\u9876\u70b9\u5750\u6807\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(N, 3)</p> required <code>faces</code> <p>\u9762\u7247\u7d22\u5f15\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(M, 3)</p> required <code>face_normals</code> <p>\u53ef\u9009\u7684\u9762\u6cd5\u7ebf\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(M, 3)</p> <code>None</code> <p>Note:</p> <pre><code>```python\n\n    # \u52a0\u8f7d\u5e76\u9884\u5904\u7406\u7f51\u683c\n    mesh = vedo.load(r\"upper_jaws.ply\")\n    mesh.compute_normals()\n\n    # \u521b\u5efa\u5206\u5272\u5668\u5b9e\u4f8b\n    segmenter = MeshRandomWalks(\n        vertices=mesh.points,\n        faces=mesh.faces(),\n        face_normals=mesh.celldata[\"Normals\"]\n    )\n\n    head = [1063,3571,1501,8143]\n    tail = [7293,3940,8021]\n\n    # \u6267\u884c\u5206\u5272\n    labels, unmarked = segmenter.segment(\n        foreground_seeds=head,\n        background_seeds=tail\n    )\n    p1 = vedo.Points(mesh.points[head],r=20,c=\"red\")\n    p2 = vedo.Points(mesh.points[tail],r=20,c=\"blue\")\n    # \u53ef\u89c6\u5316\u7ed3\u679c\n    mesh.pointdata[\"labels\"] = labels\n    mesh.cmap(\"jet\", \"labels\")\n    vedo.show([mesh,p1,p2], axes=1, viewup='z').close()\n```\n</code></pre>"},{"location":"api/#utils3d.algorithm.MeshRandomWalks.segment","title":"<code>segment(foreground_seeds, background_seeds, vertex_weights=None)</code>","text":"<p>\u6267\u884c\u7f51\u683c\u5206\u5272</p> \u53c2\u6570 <p>foreground_seeds: \u524d\u666f\u79cd\u5b50\u70b9\u7d22\u5f15\u5217\u8868 background_seeds: \u80cc\u666f\u79cd\u5b50\u70b9\u7d22\u5f15\u5217\u8868 vertex_weights: \u53ef\u9009\u7684\u9876\u70b9\u6743\u91cd\u77e9\u9635\uff08\u7a00\u758f\u77e9\u9635\uff09</p> \u8fd4\u56de <p>labels: \u9876\u70b9\u6807\u7b7e\u6570\u7ec4 (0: \u80cc\u666f\uff0c1: \u524d\u666f) unmarked: \u672a\u6807\u8bb0\u9876\u70b9\u7684\u5e03\u5c14\u63a9\u7801</p>"},{"location":"api/#utils3d.algorithm.NpEncoder","title":"<code>NpEncoder</code>","text":"<p>               Bases: <code>JSONEncoder</code></p> Notes <p>\u5c06numpy\u7c7b\u578b\u7f16\u7801\u6210json\u683c\u5f0f</p>"},{"location":"api/#utils3d.algorithm.UnifiedLabelRefiner","title":"<code>UnifiedLabelRefiner</code>","text":""},{"location":"api/#utils3d.algorithm.UnifiedLabelRefiner.__init__","title":"<code>__init__(vertices, faces, labels, class_num, smooth_factor=None, temperature=None)</code>","text":"<p>\u7edf\u4e00\u591a\u6807\u7b7e\u4f18\u5316\u5668\uff0c\u652f\u6301\u9876\u70b9/\u9762\u7247\u6982\u7387\u8f93\u5165</p> <p>Parameters:</p> Name Type Description Default <code>vertices</code> <code>ndarray</code> <p>\u9876\u70b9\u5750\u6807\u6570\u7ec4\uff0c\u5f62\u72b6 (Nv, 3)</p> required <code>faces</code> <code>ndarray</code> <p>\u9762\u7247\u7d22\u5f15\u6570\u7ec4\uff0c\u5f62\u72b6 (Nf, 3)</p> required <code>labels</code> <code>ndarray</code> <p>\u521d\u59cb\u6807\u7b7e\uff0c\u53ef\u4ee5\u662f\u7c7b\u522b\u7d22\u5f15\uff08\u4e00\u7ef4\uff09(n,) \u6216\u6982\u7387\u77e9\u9635\uff0c\u5f62\u72b6\u4e3a\uff1a                         - \u9876\u70b9\u6a21\u5f0f\uff1a(Nv, class_num)                          - \u9762\u7247\u6a21\u5f0f\uff1a(Nf, class_num)</p> required <code>class_num</code> <code>int</code> <p>\u603b\u7c7b\u522b\u6570\u91cf\uff08\u5fc5\u987b\u7b49\u4e8elabels.shape[1]\uff09</p> required <code>smooth_factor</code> <code>float</code> <p>\u8fb9\u6743\u7f29\u653e\u56e0\u5b50\uff0c\u9ed8\u8ba4\u81ea\u52a8\u8ba1\u7b97</p> <code>None</code> <code>temperature</code> <code>float</code> <p>\u6807\u7b7e\u8f6f\u5316\u6e29\u5ea6\uff08None\u8868\u793a\u4e0d\u8f6f\u5316\uff09</p> <code>None</code>"},{"location":"api/#utils3d.algorithm.UnifiedLabelRefiner.refine","title":"<code>refine()</code>","text":"<p>\u6267\u884c\u4f18\u5316\u5e76\u8fd4\u56de\u4f18\u5316\u540e\u7684\u6807\u7b7e\u7d22\u5f15</p>"},{"location":"api/#utils3d.algorithm.add_base","title":"<code>add_base(vd_mesh, value_z=-20, close_base=True, return_strips=False)</code>","text":"<p>\u7ed9\u7f51\u683c\u8fb9\u754cz\u65b9\u5411\u6dfb\u52a0\u5e95\u5ea7</p> <p>Parameters:</p> Name Type Description Default <code>vd_mesh</code> <code>_type_</code> <p>vedo.mesh</p> required <code>value_z</code> <code>int</code> <p>\u5e95\u5ea7\u957f\u5ea6. Defaults to -20.</p> <code>-20</code> <code>close_base</code> <code>bool</code> <p>\u5e95\u5ea7\u662f\u5426\u95ed\u5408. Defaults to True.</p> <code>True</code> <code>return_strips</code> <code>bool</code> <p>\u662f\u5426\u8fd4\u56de\u6dfb\u52a0\u7684\u7f51\u683c. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>_type_</code> <p>\u6dfb\u52a0\u5e95\u5ea7\u7684\u7f51\u683c</p>"},{"location":"api/#utils3d.algorithm.angle_axis_np","title":"<code>angle_axis_np(angle, axis)</code>","text":"<p>\u8ba1\u7b97\u7ed5\u7ed9\u5b9a\u8f74\u65cb\u8f6c\u6307\u5b9a\u89d2\u5ea6\u7684\u65cb\u8f6c\u77e9\u9635\u3002</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>float</code> <p>\u65cb\u8f6c\u89d2\u5ea6\uff08\u5f27\u5ea6\uff09\u3002</p> required <code>axis</code> <code>ndarray</code> <p>\u65cb\u8f6c\u8f74\uff0c\u5f62\u72b6\u4e3a (3,) \u7684 numpy \u6570\u7ec4\u3002</p> required <p>Returns:</p> Type Description <p>np.array: 3x3 \u7684\u65cb\u8f6c\u77e9\u9635\uff0c\u6570\u636e\u7c7b\u578b\u4e3a np.float32\u3002</p>"},{"location":"api/#utils3d.algorithm.apply_transform","title":"<code>apply_transform(vertices, transform)</code>","text":"<pre><code>\u5bf94*4\u77e9\u9635\u8fdb\u884c\u5e94\u7528\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>vertices</code> <code>array</code> <p>\u9876\u70b9</p> required <code>transform</code> <code>array</code> <p>4*4 \u77e9\u9635</p> required <p>Returns:</p> Type Description <code>array</code> <p>\u53d8\u6362\u540e\u7684\u9876\u70b9</p>"},{"location":"api/#utils3d.algorithm.array2voxel","title":"<code>array2voxel(voxel_array)</code>","text":"<pre><code>\u5c06\u56fa\u5b9a\u5927\u5c0f\u7684\u4e09\u7ef4\u6570\u7ec4\u8f6c\u6362\u4e3a voxel_grid_index \u6570\u7ec4\u3002\n\u8be5\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u5f62\u72b6\u4e3a (voxel_size, voxel_size, voxel_size) \u7684\u4e09\u7ef4\u6570\u7ec4\uff0c\n\u627e\u51fa\u5176\u4e2d\u503c\u4e3a 1 \u7684\u5143\u7d20\u7684\u7d22\u5f15\uff0c\u5c06\u8fd9\u4e9b\u7d22\u5f15\u7ec4\u5408\u6210\u4e00\u4e2a\u5f62\u72b6\u4e3a (N, 3) \u7684\u6570\u7ec4\uff0c\n\u7c7b\u4f3c\u4e8e\u4ece open3d \u7684 o3d.voxel_grid.get_voxels () \u65b9\u6cd5\u83b7\u53d6\u7684\u7ed3\u679c\u3002\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>voxel_array</code> <code>ndarray</code> <p>\u5f62\u72b6\u4e3a (voxel_size, voxel_size, voxel_size) \u7684\u4e09\u7ef4\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u503c\u4e3a 1 \u7684\u4f4d\u7f6e\u4ee3\u8868\u5bf9\u5e94\u7684\u4f53\u7d20\u7f51\u683c\u7d22\u5f15\u3002</p> required <p>Returns:</p> <pre><code>numpy.ndarray: \u5f62\u72b6\u4e3a (N, 3) \u7684\u6570\u7ec4\uff0c\u8868\u793a\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u6bcf\u4e2a\u4f53\u7d20\u7684\u7f51\u683c\u7d22\u5f15\uff0c\u7c7b\u4f3c\u4e8e\u4ece o3d.voxel_grid.get_voxels () \u65b9\u6cd5\u83b7\u53d6\u7684\u7ed3\u679c\u3002\n</code></pre> <p>Example:</p> <pre><code>```python\n\n# \u83b7\u53d6 grid_index_array\nvoxel_list = voxel_grid.get_voxels()\ngrid_index_array = list(map(lambda x: x.grid_index, voxel_list))\ngrid_index_array = np.array(grid_index_array)\nvoxel_grid_array = voxel2array(grid_index_array, voxel_size=32)\ngrid_index_array = array2voxel(voxel_grid_array)\npointcloud_array = grid_index_array  # 0.03125 \u662f\u4f53\u7d20\u5927\u5c0f\npc = o3d.geometry.PointCloud()\npc.points = o3d.utility.Vector3dVector(pointcloud_array)\no3d_voxel = o3d.geometry.VoxelGrid.create_from_point_cloud(pc, voxel_size=0.05)\no3d.visualization.draw_geometries([pcd, cc, o3d_voxel])\n\n\n```\n</code></pre>"},{"location":"api/#utils3d.algorithm.collision_depth","title":"<code>collision_depth(mesh1, mesh2)</code>","text":"<p>\u8ba1\u7b97\u4e24\u4e2a\u7f51\u683c\u95f4\u7684\u78b0\u649e\u6df1\u5ea6\u6216\u6700\u5c0f\u95f4\u9694\u8ddd\u79bb\u3002</p> <p>\u4f7f\u7528VTK\u7684\u5e26\u7b26\u53f7\u8ddd\u79bb\u7b97\u6cd5\u68c0\u6d4b\u78b0\u649e\u72b6\u6001\uff1a - \u6b63\u503c\uff1a\u4e24\u7f51\u683c\u5206\u79bb\uff0c\u8fd4\u56de\u503c\u4e3a\u6700\u8fd1\u8ddd\u79bb - \u96f6\u503c\uff1a\u8868\u9762\u6070\u597d\u63a5\u89e6 - \u8d1f\u503c\uff1a\u53d1\u751f\u7a7f\u900f\uff0c\u8fd4\u56de\u503c\u4e3a\u6700\u5927\u7a7f\u900f\u6df1\u5ea6\uff08\u7edd\u5bf9\u503c\uff09</p> <p>Parameters:</p> Name Type Description Default <code>mesh1</code> <code>Mesh</code> <p>\u7b2c\u4e00\u4e2a\u7f51\u683c\u5bf9\u8c61\uff0c\u9700\u5305\u542b\u9876\u70b9\u6570\u636e</p> required <code>mesh2</code> <code>Mesh</code> <p>\u7b2c\u4e8c\u4e2a\u7f51\u683c\u5bf9\u8c61\uff0c\u9700\u5305\u542b\u9876\u70b9\u6570\u636e</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>\u5e26\u7b26\u53f7\u7684\u8ddd\u79bb\u503c\uff0c\u7b26\u53f7\u8868\u793a\u78b0\u649e\u72b6\u6001\uff0c\u7edd\u5bf9\u503c\u8868\u793a\u8ddd\u79bb\u91cf\u7ea7</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>\u5f53VTK\u8ba1\u7b97\u7ba1\u9053\u51fa\u73b0\u9519\u8bef\u65f6\u629b\u51fa</p> Notes <ol> <li>\u5f53\u8f93\u5165\u7f51\u683c\u9876\u70b9\u6570&gt;1000\u65f6\u4f1a\u4ea7\u751f\u6027\u80fd\u8b66\u544a</li> <li>\u8fd4\u56defloat('inf')\u8868\u793a\u8ba1\u7b97\u5f02\u5e38\u6216\u65e0\u9650\u8fdc\u8ddd\u79bb</li> </ol>"},{"location":"api/#utils3d.algorithm.color_mapping","title":"<code>color_mapping(value, vmin=-1, vmax=1)</code>","text":"<p>\u5c06\u5411\u91cf\u6620\u5c04\u4e3a\u989c\u8272\uff0c\u9075\u4ecevcg\u6620\u5c04\u6807\u51c6</p>"},{"location":"api/#utils3d.algorithm.compute_curvature_by_igl","title":"<code>compute_curvature_by_igl(v, f, method='Mean')</code>","text":"<p>\u7528igl\u8ba1\u7b97\u5e73\u5747\u66f2\u7387\u5e76\u5f52\u4e00\u5316</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <p>\u9876\u70b9;</p> required <code>f</code> <p>\u9762\u7247:</p> required <code>method</code> <p>\u8fd4\u56de\u66f2\u7387\u7c7b\u578b</p> <code>'Mean'</code> <p>Returns:</p> Type Description <ul> <li>vertex_curvature (numpy.ndarray): \u9876\u70b9\u66f2\u7387\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (n,)\uff0c\u5176\u4e2d n \u662f\u9876\u70b9\u7684\u6570\u91cf\u3002 \u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u5bf9\u5e94\u9876\u70b9\u7684\u66f2\u7387\u3002</li> </ul> <p>Notes:</p> <pre><code>\u8f93\u51fa: PD1 (\u4e3b\u65b9\u54111), PD2 (\u4e3b\u65b9\u54112), PV1 (\u4e3b\u66f2\u73871), PV2 (\u4e3b\u66f2\u73872)\n\npd1 : #v by 3 maximal curvature direction for each vertex\npd2 : #v by 3 minimal curvature direction for each vertex\npv1 : #v by 1 maximal curvature value for each vertex\npv2 : #v by 1 minimal curvature value for each vertex\n</code></pre>"},{"location":"api/#utils3d.algorithm.compute_curvature_by_meshlab","title":"<code>compute_curvature_by_meshlab(ms)</code>","text":"<p>\u4f7f\u7528 MeshLab \u8ba1\u7b97\u7f51\u683c\u7684\u66f2\u7387\u548c\u9876\u70b9\u989c\u8272\u3002</p> <p>\u8be5\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u9876\u70b9\u77e9\u9635\u548c\u4e00\u4e2a\u9762\u77e9\u9635\u4f5c\u4e3a\u8f93\u5165\uff0c\u521b\u5efa\u4e00\u4e2a MeshLab \u7684 MeshSet \u5bf9\u8c61\uff0c \u5e76\u5c06\u8f93\u5165\u7684\u9876\u70b9\u548c\u9762\u6dfb\u52a0\u5230 MeshSet \u4e2d\u3002\u7136\u540e\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u9876\u70b9\u7684\u4e3b\u66f2\u7387\u65b9\u5411\uff0c \u6700\u540e\u83b7\u53d6\u9876\u70b9\u989c\u8272\u77e9\u9635\u548c\u9876\u70b9\u66f2\u7387\u6570\u7ec4\u3002</p> <p>Parameters:</p> Name Type Description Default <code>ms</code> <p>pymeshlab\u683c\u5f0fmesh;</p> required <p>Returns:</p> Type Description <ul> <li>vertex_colors (numpy.ndarray): \u9876\u70b9\u989c\u8272\u77e9\u9635\uff0c\u5f62\u72b6\u4e3a (n, 3)\uff0c\u5176\u4e2d n \u662f\u9876\u70b9\u7684\u6570\u91cf\u3002 \u6bcf\u4e2a\u5143\u7d20\u7684\u8303\u56f4\u662f [0, 255]\uff0c\u8868\u793a\u9876\u70b9\u7684\u989c\u8272\u3002</li> </ul> <ul> <li>vertex_curvature (numpy.ndarray): \u9876\u70b9\u66f2\u7387\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (n,)\uff0c\u5176\u4e2d n \u662f\u9876\u70b9\u7684\u6570\u91cf\u3002 \u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u5bf9\u5e94\u9876\u70b9\u7684\u66f2\u7387\u3002</li> </ul> <ul> <li>new_vertex (numpy.ndarray): \u65b0\u7684\u9876\u70b9\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (n,)\uff0c\u5176\u4e2d n \u662f\u9876\u70b9\u7684\u6570\u91cf\u3002</li> </ul>"},{"location":"api/#utils3d.algorithm.compute_face_normals","title":"<code>compute_face_normals(vertices, faces)</code>","text":"<p>\u8ba1\u7b97\u4e09\u89d2\u5f62\u7f51\u683c\u4e2d\u6bcf\u4e2a\u9762\u7684\u6cd5\u7ebf Args:     vertices: \u9876\u70b9\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (N, 3)     faces: \u9762\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (M, 3)\uff0c\u6bcf\u4e2a\u9762\u7531\u4e09\u4e2a\u9876\u70b9\u7d22\u5f15\u7ec4\u6210 Returns:     \u9762\u6cd5\u7ebf\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (M, 3)</p>"},{"location":"api/#utils3d.algorithm.compute_vertex_normals","title":"<code>compute_vertex_normals(vertices, faces)</code>","text":"<p>\u8ba1\u7b97\u4e09\u89d2\u5f62\u7f51\u683c\u4e2d\u6bcf\u4e2a\u9876\u70b9\u7684\u6cd5\u7ebf Args:     vertices: \u9876\u70b9\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (N, 3)     faces: \u9762\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (M, 3)\uff0c\u6bcf\u4e2a\u9762\u7531\u4e09\u4e2a\u9876\u70b9\u7d22\u5f15\u7ec4\u6210 Returns:     \u9876\u70b9\u6cd5\u7ebf\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (N, 3)</p>"},{"location":"api/#utils3d.algorithm.create_voxels","title":"<code>create_voxels(vertices, resolution=256)</code>","text":"<pre><code>\u901a\u8fc7\u9876\u70b9\u521b\u5efa\u9635\u5217\u65b9\u683c\u4f53\u7d20\n</code></pre> <p>Args:     vertices: \u9876\u70b9     resolution:  \u5206\u8fa8\u7387</p> <p>Returns:</p> Type Description <p>\u8fd4\u56de res**3 \u7684\u9876\u70b9 , mc\u91cd\u5efa\u9700\u8981\u7684\u7f29\u653e\u53ca\u4f4d\u79fb</p> Notes <p>v, f = mcubes.marching_cubes(data.reshape(256, 256, 256), 0)</p> <p>m=vedo.Mesh([v*scale+translation, f])</p>"},{"location":"api/#utils3d.algorithm.cut_mesh_point_loop","title":"<code>cut_mesh_point_loop(mesh, pts, invert=False)</code>","text":"<p>\u57fa\u4e8evtk+dijkstra\u5b9e\u73b0\u7684\u57fa\u4e8e\u7ebf\u7684\u5206\u5272;</p> <p>\u7ebf\u652f\u6301\u5728\u7f51\u683c\u4e0a\u6216\u8005\u7f51\u683c\u5916\uff1b</p> <p>Parameters:</p> Name Type Description Default <code>mesh</code> <code>_type_</code> <p>\u5f85\u5207\u5272\u7f51\u683c</p> required <code>pts</code> <code>Points</code> <p>\u5207\u5272\u7ebf</p> required <code>invert</code> <code>bool</code> <p>\u9009\u62e9\u4fdd\u7559\u5916\u90e8. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>_type_</code> <p>\u5207\u5272\u540e\u7684\u7f51\u683c</p>"},{"location":"api/#utils3d.algorithm.cut_mesh_with_meshlib","title":"<code>cut_mesh_with_meshlib(v, f, loop_points, get_bigger_part=False, smooth_boundary=False)</code>","text":"<p>\u6cbf\u6307\u5b9a\u7684\u70b9\u73af\u5207\u5272\u7f51\u683c\u5e76\u8fd4\u56de\u9009\u5b9a\u7684\u90e8\u5206</p> <p>\u7ed9\u5b9a\u7684\u70b9\u73af\u6295\u5f71\u5230\u7f51\u683c\u8868\u9762\uff0c\u521b\u5efa\u95ed\u5408\u8f6e\u5ed3\uff0c\u6cbf\u6b64\u8f6e\u5ed3\u5207\u5272\u7f51\u683c\uff0c \u5e76\u8fd4\u56de\u7f51\u683c\u7684\u8f83\u5927\u6216\u8f83\u5c0f\u90e8\u5206\u3002\u53ef\u9009\u62e9\u5bf9\u5207\u5272\u8fb9\u754c\u8fdb\u884c\u5e73\u6ed1\u5904\u7406\u3002</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>ndarray</code> <p>\u8f93\u5165\u7f51\u683c\u7684\u9876\u70b9\u5750\u6807\uff0c\u5f62\u72b6\u4e3a (N, 3)</p> required <code>f</code> <code>ndarray</code> <p>\u8f93\u5165\u7f51\u683c\u7684\u9762\u7d22\u5f15\uff0c\u5f62\u72b6\u4e3a (M, 3)</p> required <code>loop_points</code> <p>\u5b9a\u4e49\u5207\u5272\u73af\u76843D\u70b9\u5217\u8868\uff0c\u6bcf\u4e2a\u70b9\u4e3a [x, y, z],\uff0c\u5f62\u72b6\u4e3a (B, 3)</p> required <code>get_bigger_part</code> <code>bool</code> <p>\u5982\u679c\u4e3aTrue\uff0c\u8fd4\u56de\u5207\u5272\u540e\u8f83\u5927\u7684\u90e8\u5206\uff1b\u5426\u5219\u8fd4\u56de\u8f83\u5c0f\u7684\u90e8\u5206</p> <code>False</code> <code>smooth_boundary</code> <code>bool</code> <p>\u5982\u679c\u4e3aTrue\uff0c\u5bf9\u5207\u5272\u8fb9\u754c\u8fdb\u884c\u5e73\u6ed1\u5904\u7406</p> <code>False</code> <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple</code> <p>\u5305\u542b: kept_mesh_v: \u5207\u5272\u540e\u7f51\u683c\u7684\u9876\u70b9\u5750\u6807\uff0c\u5f62\u72b6\u4e3a (P, 3) kept_mesh_f: \u5207\u5272\u540e\u7f51\u683c\u7684\u9762\u7d22\u5f15\uff0c\u5f62\u72b6\u4e3a (Q, 3) removed_mesh_v: \u5176\u4ed6\u7f51\u683c\u7684\u9876\u70b9\u5750\u6807\uff0c\u5f62\u72b6\u4e3a (P, 3) removed_mesh_f: \u5176\u4ed6\u7f51\u683c\u7684\u9762\u7d22\u5f15\uff0c\u5f62\u72b6\u4e3a (Q, 3)</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>\u5982\u679c\u5207\u5272\u64cd\u4f5c\u5931\u8d25\u6216\u4ea7\u751f\u65e0\u6548\u7ed3\u679c</p> Example <p>kept_mesh_v,kept_mesh_f,removed_mesh_v,removed_mesh_f = cut_mesh(vertices, faces, margin_points, get_bigger_part=True, smooth_boundary=True)</p>"},{"location":"api/#utils3d.algorithm.detect_boundary_points","title":"<code>detect_boundary_points(points, labels, config=None)</code>","text":"<p>\u57fa\u4e8e\u5c40\u90e8\u6807\u7b7e\u4e00\u81f4\u6027\u7684\u8fb9\u754c\u70b9\u68c0\u6d4b\u51fd\u6570</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>ndarray</code> <p>\u70b9\u4e91\u5750\u6807\uff0c\u5f62\u72b6\u4e3a (N, 3)</p> required <code>labels</code> <code>ndarray</code> <p>\u70b9\u4e91\u6807\u7b7e\uff0c\u5f62\u72b6\u4e3a (N,)</p> required <code>config</code> <code>dict</code> <p>\u914d\u7f6e\u53c2\u6570\uff0c\u5305\u542b: - knn_k: KNN\u67e5\u8be2\u7684\u90bb\u5c45\u6570\uff08\u9ed8\u8ba440\uff09 - bdl_ratio: \u8fb9\u754c\u5224\u5b9a\u9608\u503c\uff08\u9ed8\u8ba40.8\uff09</p> <code>None</code> <p>Returns:</p> Type Description <p>np.ndarray: \u8fb9\u754c\u70b9\u63a9\u7801\uff0c\u5f62\u72b6\u4e3a (N,)\uff0c\u8fb9\u754c\u70b9\u4e3aTrue\uff0c\u975e\u8fb9\u754c\u70b9\u4e3aFalse</p>"},{"location":"api/#utils3d.algorithm.equidistant_mesh","title":"<code>equidistant_mesh(mesh, d=-0.01, merge=True)</code>","text":"<p>\u6b64\u51fd\u6570\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u4e0e\u8f93\u5165\u7f51\u683c\u7b49\u8ddd\u7684\u65b0\u7f51\u683c\uff0c\u53ef\u9009\u62e9\u5c06\u65b0\u7f51\u683c\u4e0e\u539f\u7f51\u683c\u5408\u5e76\u3002</p> <p>Parameters:</p> Name Type Description Default <code>mesh</code> <code>Mesh</code> <p>\u8f93\u5165\u7684\u4e09\u7ef4\u7f51\u683c\u5bf9\u8c61\u3002</p> required <code>d</code> <code>(float, \u53ef\u9009)</code> <p>\u9876\u70b9\u504f\u79fb\u7684\u8ddd\u79bb\uff0c\u9ed8\u8ba4\u4e3a -0.01\u3002\u8d1f\u503c\u8868\u793a\u5411\u5185\u504f\u79fb\uff0c\u6b63\u503c\u8868\u793a\u5411\u5916\u504f\u79fb\u3002</p> <code>-0.01</code> <code>merge</code> <code>(bool, \u53ef\u9009)</code> <p>\u662f\u5426\u5c06\u539f\u7f51\u683c\u548c\u504f\u79fb\u540e\u7684\u7f51\u683c\u5408\u5e76\uff0c\u9ed8\u8ba4\u4e3a True\u3002</p> <code>True</code> <p>Returns:</p> Type Description <p>vedo.Mesh \u6216 vedo.Assembly: \u5982\u679c merge \u4e3a True\uff0c\u5219\u8fd4\u56de\u5408\u5e76\u540e\u7684\u7f51\u683c\uff1b\u5426\u5219\u8fd4\u56de\u504f\u79fb\u540e\u7684\u7f51\u683c\u3002</p>"},{"location":"api/#utils3d.algorithm.face_labels_to_vertex_labels","title":"<code>face_labels_to_vertex_labels(vertices, faces, face_labels)</code>","text":"<p>\u5c06\u4e09\u89d2\u7f51\u683c\u7684\u9762\u7247\u6807\u7b7e\u8f6c\u6362\u6210\u9876\u70b9\u6807\u7b7e</p> <p>Parameters:</p> Name Type Description Default <code>vertices</code> <code>Union[array, list]</code> <p>\u7259\u988c\u4e09\u89d2\u7f51\u683c</p> required <code>faces</code> <code>Union[array, list]</code> <p>\u9762\u7247\u6807\u7b7e</p> required <code>face_labels</code> <code>array</code> <p>\u9876\u70b9\u6807\u7b7e</p> required <p>Returns:</p> Type Description <code>array</code> <p>\u9876\u70b9\u5c5e\u6027</p>"},{"location":"api/#utils3d.algorithm.farthest_point_sampling","title":"<code>farthest_point_sampling(vertices, n_sample=2000, auto_seg=True, n_batches=10)</code>","text":"<p>\u6700\u8fdc\u70b9\u91c7\u6837\uff0c\u652f\u6301\u81ea\u52a8\u5206\u6279\u5904\u7406</p> <p>\u6839\u636e\u53c2\u6570\u914d\u7f6e\uff0c\u81ea\u52a8\u51b3\u5b9a\u662f\u5426\u5c06\u8f93\u5165\u70b9\u4e91\u5206\u5272\u4e3a\u591a\u4e2a\u6279\u6b21\u8fdb\u884c\u5904\u7406\u3002\u5f53\u5904\u7406\u5927\u89c4\u6a21\u6570\u636e\u65f6\uff0c \u5efa\u8bae\u542f\u7528auto_seg\u4ee5\u964d\u4f4e\u5185\u5b58\u9700\u6c42\u5e76\u5229\u7528\u5e76\u884c\u52a0\u901f\u3002</p> <p>Parameters:</p> Name Type Description Default <code>vertices</code> <code>ndarray</code> <p>\u8f93\u5165\u70b9\u4e91\u5750\u6807\uff0c\u5f62\u72b6\u4e3a(N, 3)\u7684\u6d6e\u70b9\u6570\u7ec4</p> required <code>n_sample</code> <code>int</code> <p>\u603b\u91c7\u6837\u70b9\u6570\uff0c\u5f53auto_seg=False\u65f6\u751f\u6548\u3002\u9ed8\u8ba42000</p> <code>2000</code> <code>auto_seg</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u81ea\u52a8\u5206\u6279\u5904\u7406(\u63d0\u901f\uff0c\u4f46\u4f1a\u4e22\u5931\u5168\u5c40\u8ddd\u79bb\u4fe1\u606f)\u3002\u9ed8\u8ba4False</p> <code>True</code> <code>n_batches</code> <code>int</code> <p>\u81ea\u52a8\u5206\u6279\u65f6\u7684\u6279\u6b21\u6570\u91cf\u3002\u9ed8\u8ba410</p> <code>10</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: \u91c7\u6837\u70b9\u7d22\u5f15\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(n_sample,)</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5f53\u8f93\u5165\u6570\u7ec4\u7ef4\u5ea6\u4e0d\u6b63\u786e\u65f6\u629b\u51fa</p> Notes <p>\u5178\u578b\u573a\u666f: - \u5c0f\u89c4\u6a21\u6570\u636e\uff08\u59825\u4e07\u70b9\u4ee5\u4e0b\uff09: auto_seg=False\uff0c\u5355\u6279\u6b21\u5904\u7406 - \u5927\u89c4\u6a21\u6570\u636e\uff08\u5982\u767e\u4e07\u7ea7\u70b9\uff09: auto_seg=True\uff0c\u520610\u6279\u5904\u7406\uff0c\u6bcf\u6279\u91c7\u68372000\u70b9</p> <p>\u793a\u4f8b:</p> <p>vertices = np.random.rand(100000, 3).astype(np.float32)</p>"},{"location":"api/#utils3d.algorithm.farthest_point_sampling--102000","title":"\u81ea\u52a8\u520610\u6279\uff0c\u6bcf\u6279\u91c72000\u70b9","text":"<p>indices = farthest_point_sampling(vertices, auto_seg=True)</p>"},{"location":"api/#utils3d.algorithm.farthest_point_sampling--5000","title":"\u5355\u6279\u91c75000\u70b9","text":"<p>indices = farthest_point_sampling(vertices, n_sample=5000)</p>"},{"location":"api/#utils3d.algorithm.farthest_point_sampling_by_open3d","title":"<code>farthest_point_sampling_by_open3d(vertices, n_sample=2000)</code>","text":"<p>\u57fa\u4e8eopen3d\u6700\u8fdc\u70b9\u91c7\u6837\uff0c\u8fd4\u56de\u91c7\u6837\u540e\u7684\u70b9</p>"},{"location":"api/#utils3d.algorithm.farthest_point_sampling_by_pointops2","title":"<code>farthest_point_sampling_by_pointops2(vertices, len_vertices, n_sample=2000, device='cuda')</code>","text":"<p>\u57fa\u4e8epointops2\u6700\u8fdc\u70b9\u91c7\u6837\uff0c\u8fd4\u56de\u91c7\u6837\u540e\u7684\u7d22\u5f15\uff0c\u8981\u6c42\u8f93\u5165\u4e3atorch.tensor</p>"},{"location":"api/#utils3d.algorithm.fill_hole_with_center","title":"<code>fill_hole_with_center(mesh, boundaries, return_vf=False)</code>","text":"<pre><code>\u7528\u4e2d\u5fc3\u70b9\u65b9\u5f0f\u5f3a\u5236\u8865\u6d1e\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>mesh</code> <code>_type_</code> <p>vedo.Mesh</p> required <code>boundaries</code> <p>vedo.boundaries</p> required <code>return_vf</code> <p>\u662f\u5426\u8fd4\u56de\u8865\u6d1e\u7684mesh</p> <code>False</code>"},{"location":"api/#utils3d.algorithm.fix_component_by_meshlab","title":"<code>fix_component_by_meshlab(ms)</code>","text":"<p>\u79fb\u9664\u4f4e\u8d28\u91cf\u7684\u7ec4\u4ef6\uff0c\u5982\u5c0f\u7684\u8fde\u901a\u5206\u91cf,\u79fb\u9664\u7f51\u683c\u4e2d\u7684\u6d6e\u52a8\u5c0f\u7ec4\u4ef6\uff08\u5c0f\u9762\u79ef\u4e0d\u8fde\u901a\u90e8\u5206\uff09\u3002</p> <p>Parameters:</p> Name Type Description Default <code>ms</code> <p>pymeshlab.MeshSet \u5bf9\u8c61</p> required <p>Returns:</p> Type Description <p>pymeshlab.MeshSet \u5bf9\u8c61</p>"},{"location":"api/#utils3d.algorithm.fix_floater_by_meshlab","title":"<code>fix_floater_by_meshlab(mesh, nbfaceratio=0.1, nonclosedonly=False)</code>","text":"<p>\u79fb\u9664\u7f51\u683c\u4e2d\u7684\u6d6e\u52a8\u5c0f\u7ec4\u4ef6\uff08\u5c0f\u9762\u79ef\u4e0d\u8fde\u901a\u90e8\u5206\uff09\u3002</p> <p>Parameters:</p> Name Type Description Default <code>mesh</code> <code>MeshSet</code> <p>\u8f93\u5165\u7684\u7f51\u683c\u6a21\u578b\u3002</p> required <code>nbfaceratio</code> <code>float</code> <p>\u9762\u79ef\u6bd4\u7387\u9608\u503c\uff0c\u5c0f\u4e8e\u8be5\u6bd4\u7387\u7684\u90e8\u5206\u5c06\u88ab\u79fb\u9664\u3002</p> <code>0.1</code> <code>nonclosedonly</code> <code>bool</code> <p>\u662f\u5426\u4ec5\u79fb\u9664\u975e\u5c01\u95ed\u90e8\u5206\u3002</p> <code>False</code> <p>Returns:</p> Type Description <code>Mesh</code> <p>pymeshlab.MeshSet: \u79fb\u9664\u6d6e\u52a8\u5c0f\u7ec4\u4ef6\u540e\u7684\u7f51\u683c\u6a21\u578b\u3002</p>"},{"location":"api/#utils3d.algorithm.fix_invalid_by_meshlab","title":"<code>fix_invalid_by_meshlab(ms)</code>","text":"<p>\u5904\u7406\u5197\u4f59\u5143\u7d20\uff0c\u5982\u5408\u79fb\u9664\u91cd\u590d\u9762\u548c\u9876\u70b9\u7b49, \u6e05\u7406\u65e0\u6548\u7684\u51e0\u4f55\u7ed3\u6784\uff0c\u5982\u6298\u53e0\u9762\u3001\u96f6\u9762\u79ef\u9762\u548c\u672a\u5f15\u7528\u7684\u9876\u70b9\u3002</p> <p>Parameters:</p> Name Type Description Default <code>ms</code> <p>pymeshlab.MeshSet \u5bf9\u8c61</p> required <p>Returns:</p> Type Description <p>pymeshlab.MeshSet \u5bf9\u8c61</p>"},{"location":"api/#utils3d.algorithm.fix_topology_by_meshlab","title":"<code>fix_topology_by_meshlab(ms)</code>","text":"<p>\u4fee\u590d\u62d3\u6251\u95ee\u9898\uff0c\u5982 T \u578b\u9876\u70b9\u3001\u975e\u6d41\u5f62\u8fb9\u548c\u975e\u6d41\u5f62\u9876\u70b9\uff0c\u5e76\u5bf9\u9f50\u4e0d\u5339\u914d\u7684\u8fb9\u754c\u3002</p> <p>Parameters:</p> Name Type Description Default <code>ms</code> <p>pymeshlab.MeshSet \u5bf9\u8c61</p> required <p>Returns:</p> Type Description <p>pymeshlab.MeshSet \u5bf9\u8c61</p>"},{"location":"api/#utils3d.algorithm.furthestsampling_jit","title":"<code>furthestsampling_jit(xyz, offset, new_offset)</code>","text":"<p>\u4f7f\u7528\u5e76\u884c\u6279\u6b21\u5904\u7406\u7684\u6700\u8fdc\u70b9\u91c7\u6837\u7b97\u6cd5\u5b9e\u73b0</p> <p>\u8be5\u65b9\u6cd5\u5c06\u8f93\u5165\u70b9\u4e91\u5212\u5206\u4e3a\u591a\u4e2a\u6279\u6b21\uff0c\u6bcf\u4e2a\u6279\u6b21\u72ec\u7acb\u8fdb\u884c\u6700\u8fdc\u70b9\u91c7\u6837\u3002\u901a\u8fc7\u7ef4\u62a4\u6700\u5c0f\u8ddd\u79bb\u6570\u7ec4\uff0c \u786e\u4fdd\u6bcf\u6b21\u8fed\u4ee3\u9009\u62e9\u8ddd\u79bb\u5df2\u9009\u70b9\u96c6\u6700\u8fdc\u7684\u65b0\u70b9\uff0c\u5b9e\u73b0\u9ad8\u6548\u91c7\u6837\u3002</p> <p>Parameters:</p> Name Type Description Default <code>xyz</code> <code>ndarray</code> <p>\u8f93\u5165\u70b9\u4e91\u5750\u6807\uff0c\u5f62\u72b6\u4e3a(N, 3)\u7684C\u8fde\u7eedfloat32\u6570\u7ec4</p> required <code>offset</code> <code>ndarray</code> <p>\u539f\u59cb\u70b9\u4e91\u7684\u5206\u6bb5\u504f\u79fb\u6570\u7ec4\uff0c\u8868\u793a\u6bcf\u4e2a\u6279\u6b21\u7684\u7ed3\u675f\u4f4d\u7f6e\u3002\u4f8b\u5982[1000, 2000]\u8868\u793a\u4e24\u4e2a\u6279\u6b21</p> required <code>new_offset</code> <code>ndarray</code> <p>\u91c7\u6837\u540e\u7684\u5206\u6bb5\u504f\u79fb\u6570\u7ec4\uff0c\u8868\u793a\u6bcf\u4e2a\u6279\u6b21\u7684\u76ee\u6807\u91c7\u6837\u6570\u3002\u4f8b\u5982[200, 400]\u8868\u793a\u6bcf\u6279\u91c7200\u70b9</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: \u91c7\u6837\u70b9\u7d22\u5f15\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(total_samples,)\uff0c\u5176\u4e2dtotal_samples = new_offset[-1]</p> Notes <p>\u5b9e\u73b0\u7279\u70b9: - \u4f7f\u7528Numba\u5e76\u884c\u52a0\u901f\uff0c\u652f\u6301\u591a\u6838\u5e76\u884c\u5904\u7406\u4e0d\u540c\u6279\u6b21 - \u91c7\u7528\u5e73\u65b9\u8ddd\u79bb\u8ba1\u7b97\u907f\u514d\u5f00\u65b9\u8fd0\u7b97 - \u6bcf\u6279\u6b21\u72ec\u7acb\u521d\u59cb\u5316\u8ddd\u79bb\u6570\u7ec4\uff0c\u907f\u514d\u8de8\u6279\u6b21\u5e72\u6270 - \u81ea\u52a8\u5904\u7406\u8fb9\u754c\u60c5\u51b5\uff08\u7a7a\u6279\u6b21\u6216\u96f6\u91c7\u6837\u6279\u6b21\uff09</p> <p>\u5178\u578b\u8c03\u7528\u6d41\u7a0b:</p> <p>n_total = 10000 offset = np.array([1000, 2000, ..., 10000], dtype=np.int32) new_offset = np.array([200, 400, ..., 2000], dtype=np.int32) sampled_indices = furthestsampling_jit(xyz, offset, new_offset)</p>"},{"location":"api/#utils3d.algorithm.get_axis_rotation","title":"<code>get_axis_rotation(axis, angle)</code>","text":"<pre><code>\u7ed5\u7740\u6307\u5b9a\u8f74\u83b7\u53d63*3\u65cb\u8f6c\u77e9\u9635\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>axis</code> <code>list</code> <p>\u8f74\u5411,[0,0,1]</p> required <code>angle</code> <code>float</code> <p>\u65cb\u8f6c\u89d2\u5ea6,90.0</p> required <p>Returns:</p> Type Description <code>array</code> <p>3*3\u65cb\u8f6c\u77e9\u9635</p>"},{"location":"api/#utils3d.algorithm.get_obb_box","title":"<code>get_obb_box(x_pts, z_pts, vertices)</code>","text":"<p>\u7ed9\u5b9a\u4efb\u610f2\u4e2a\u8f74\u5411\u4ea4\u70b9\u53ca\u9876\u70b9\uff0c\u8fd4\u56de\u5b9a\u5411\u5305\u56f4\u6846mesh Args:     x_pts: x\u8f74\u4ea4\u70b9     z_pts: z\u8f74\u4ea4\u70b9     vertices: \u6240\u6709\u9876\u70b9</p> <p>Returns:</p> Type Description <code>Tuple[list, list, array]</code> <p>\u5305\u56f4\u6846\u7684\u9876\u70b9\uff0c \u9762\u7247\u7d22\u5f15\uff0c3*3\u65cb\u8f6c\u77e9\u9635</p>"},{"location":"api/#utils3d.algorithm.get_obb_box_max_min","title":"<code>get_obb_box_max_min(x_pts, z_pts, z_max_pts, z_min_pts, x_max_pts, x_min_pts, y_max_pts, y_min_pts, center)</code>","text":"<p>\u7ed9\u5b9a\u4efb\u610f2\u4e2a\u8f74\u5411\u4ea4\u70b9\u53ca\u6700\u5927/\u6700\u5c0f\u70b9\uff0c\u8fd4\u56de\u5b9a\u5411\u5305\u56f4\u6846mesh</p> <p>Parameters:</p> Name Type Description Default <code>x_pts</code> <code>array</code> <p>x\u8f74\u4ea4\u70b9</p> required <code>z_pts</code> <code>array</code> <p>z\u8f74\u4ea4\u70b9</p> required <code>z_max_pts</code> <code>array</code> <p>\u6700\u5927z\u9876\u70b9</p> required <code>z_min_pts</code> <code>array</code> <p>\u6700\u5c0fz\u9876\u70b9</p> required <code>x_max_pts</code> <code>array</code> <p>\u6700\u5927x\u9876\u70b9</p> required <code>x_min_pts</code> <code>array</code> <p>\u6700\u5c0fx\u9876\u70b9</p> required <code>y_max_pts</code> <code>array</code> <p>\u6700\u5927y\u9876\u70b9</p> required <code>y_min_pts</code> <code>array</code> <p>\u6700\u5c0fy\u9876\u70b9</p> required <code>center</code> <code>array</code> <p>\u4e2d\u5fc3\u70b9</p> required <p>Returns:</p> Type Description <code>Tuple[list, list, array]</code> <p>\u5305\u56f4\u6846\u7684\u9876\u70b9\uff0c \u9762\u7247\u7d22\u5f15\uff0c3*3\u65cb\u8f6c\u77e9\u9635</p>"},{"location":"api/#utils3d.algorithm.get_pca_rotation","title":"<code>get_pca_rotation(vertices)</code>","text":"<pre><code>\u901a\u8fc7pca\u5206\u6790\u9876\u70b9\uff0c\u83b7\u53d63*3\u65cb\u8f6c\u77e9\u9635\uff0c\u5e76\u5e94\u7528\u5230\u9876\u70b9\uff1b\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>vertices</code> <code>array</code> <p>\u4e09\u7ef4\u9876\u70b9</p> required <p>Returns:</p> Type Description <code>array</code> <p>\u5e94\u7528\u65cb\u8f6c\u77e9\u9635\u540e\u7684\u9876\u70b9</p>"},{"location":"api/#utils3d.algorithm.get_pca_transform","title":"<code>get_pca_transform(mesh)</code>","text":"<pre><code>\u5c06\u8f93\u5165\u7684\u9876\u70b9\u6570\u636e\u6839\u636e\u66f2\u7387\u53caPCA\u5206\u6790\u5f97\u5230\u7684\u4e3b\u6210\u5206\u5411\u91cf\uff0c\n\u5e76\u8f6c\u6362\u62104*4\u53d8\u6362\u77e9\u9635\u3002\n</code></pre> Notes <p>\u5fc5\u987b\u4e3a\u5e95\u90e8\u975e\u5c01\u95ed\u7684\u7f51\u683c</p> <p>Parameters:</p> Name Type Description Default <code>mesh</code> <code>Mesh</code> <p>vedo\u7f51\u683c\u5bf9\u8c61</p> required <p>Returns:</p> Type Description <code>array</code> <p>4*4 \u53d8\u6362\u77e9\u9635</p>"},{"location":"api/#utils3d.algorithm.harmonic_by_igl","title":"<code>harmonic_by_igl(v, f, map_vertices_to_circle=True)</code>","text":"<p>\u8c10\u6ce2\u53c2\u6570\u5316\u540e\u76842D\u7f51\u683c</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>_type_</code> <p>\u9876\u70b9</p> required <code>f</code> <code>_type_</code> <p>\u9762\u7247</p> required <code>map_vertices_to_circle</code> <p>\u662f\u5426\u6620\u5c04\u5230\u5706\u5f62\uff08\u6b63\u65b9\u5f62)</p> <code>True</code> <p>Returns:</p> Type Description <p>uv,v_p: \u521b\u5efa\u53c2\u6570\u5316\u540e\u76842D\u7f51\u683c,3D\u5750\u6807</p> <p>Note:</p> <pre><code>```\n\n# \u521b\u5efa\u7a7a\u95f4\u7d22\u5f15\nuv_kdtree = KDTree(uv)\n\n# \u521d\u59cb\u5316\u53ef\u89c6\u5316\u7cfb\u7edf\nplt = Plotter(shape=(1, 2), axes=False, title=\"Interactive Parametrization\")\n\n# \u521b\u5efa\u7f51\u683c\u5bf9\u8c61\nmesh_3d = Mesh([v, f]).cmap(\"jet\", calculate_curvature(v, f)).lighting(\"glossy\")\nmesh_2d = Mesh([v_p, f]).wireframe(True).cmap(\"jet\", calculate_curvature(v, f))\n\n# \u5b58\u50a8\u9009\u4e2d\u6807\u8bb0\nmarkers_3d = []\nmarkers_2d = []\n\ndef on_click(event):\n    if not event.actor or event.actor not in [mesh_2d, None]:\n        return\n    if not hasattr(event, 'picked3d') or event.picked3d is None:\n        return\n\n    try:\n        # \u83b7\u53d6\u70b9\u51fb\u5750\u6807\n        uv_click = np.array(event.picked3d[:2])\n\n        # \u67e5\u627e\u6700\u8fd1\u9876\u70b9\n        _, idx = uv_kdtree.query(uv_click)\n        v3d = v[idx]\n        uv_point = uv[idx]  # \u83b7\u53d6\u5bf9\u5e942D\u5750\u6807\n\n\n        # \u521b\u5efa3D\u6807\u8bb0\uff08\u4f7f\u7528\u7403\u4f53\uff09\n        marker_3d = Sphere(v3d, r=0.1, c='cyan', res=12)\n        markers_3d.append(marker_3d)\n\n        # \u521b\u5efa2D\u6807\u8bb0\uff08\u4f7f\u7528\u5927\u53f7\u70b9\uff09\n        marker_2d = Point(uv_point, c='magenta', r=10, alpha=0.8)\n        markers_2d.append(marker_2d)\n\n        # \u66f4\u65b0\u89c6\u56fe\n        plt.at(0).add(marker_3d)\n        plt.at(1).add(marker_2d)\n        plt.render()\n\n    except Exception as e:\n        log.info(f\"Error processing click: {str(e)}\")\n\nplt.at(0).show(mesh_3d, \"3D Visualization\", viewup=\"z\")\nplt.at(1).show(mesh_2d, \"2D Parametrization\").add_callback('mouse_click', on_click)\nplt.interactive().close()\n\n\n```\n</code></pre>"},{"location":"api/#utils3d.algorithm.hole_filling_by_Radial","title":"<code>hole_filling_by_Radial(boundary_coords)</code>","text":"<p>\u53c2\u8003 </p> <p>[https://www.cnblogs.com/shushen/p/5759679.html]</p> <p>\u5b9e\u73b0\u7684\u6700\u5c0f\u89d2\u5ea6\u6cd5\u8865\u6d1e\u6cd5\uff1b</p> <p>Parameters:</p> Name Type Description Default <code>boundary_coords</code> <code>_type_</code> <p>\u6709\u5e8f\u8fb9\u754c\u9876\u70b9</p> required <p>Returns:</p> Type Description <p>v,f: \u4fee\u8865\u540e\u7684\u66f2\u9762</p> Note <pre><code>\n# \u521b\u5efa\u5e26\u5b54\u6d1e\u7684\u7b80\u5355\u7f51\u683c\ns = vedo.load(r\"J10166160052_16.obj\")\n# \u5047\u8bbe\u8fb9\u754c\u70b9\u5373\u7f51\u683c\u8fb9\u754c\u70b9\nboundary =vedo.Spline((s.boundaries().join(reset=True).vertices),res=100)\n# \u901a\u8fc7\u8fb9\u754c\u70b9\u8fdb\u884c\u8865\u6d1e\nfilled_mesh =vedo.Mesh(hole_filling(boundary.vertices))\n# \u6e32\u67d3\u8865\u6d1e\u540e\u7684\u66f2\u9762\nvedo.show([filled_mesh,boundary,s.alpha(0.8)], bg='white').close()\n\n</code></pre>"},{"location":"api/#utils3d.algorithm.isotropic_remeshing_by_acvd","title":"<code>isotropic_remeshing_by_acvd(vedo_mesh, target_num=10000)</code>","text":"<p>\u5bf9\u7ed9\u5b9a\u7684 vedo \u7f51\u683c\u8fdb\u884c\u5747\u8d28\u5316\u5904\u7406\uff0c\u4f7f\u5176\u8fbe\u5230\u6307\u5b9a\u7684\u76ee\u6807\u9762\u6570\u3002</p> <p>\u8be5\u51fd\u6570\u4f7f\u7528 pyacvd \u5e93\u4e2d\u7684 Clustering \u7c7b\u5bf9\u8f93\u5165\u7684 vedo \u7f51\u683c\u8fdb\u884c\u5904\u7406\u3002 \u5982\u679c\u7f51\u683c\u7684\u9876\u70b9\u6570\u5c0f\u4e8e\u7b49\u4e8e\u76ee\u6807\u9762\u6570\uff0c\u4f1a\u5148\u5bf9\u7f51\u683c\u8fdb\u884c\u7ec6\u5206\uff0c\u7136\u540e\u8fdb\u884c\u805a\u7c7b\u64cd\u4f5c\uff0c \u6700\u7ec8\u751f\u6210\u4e00\u4e2a\u9762\u6570\u63a5\u8fd1\u76ee\u6807\u9762\u6570\u7684\u5747\u8d28\u5316\u7f51\u683c\u3002</p> <p>Parameters:</p> Name Type Description Default <code>vedo_mesh</code> <code>Mesh</code> <p>\u8f93\u5165\u7684 vedo \u7f51\u683c\u5bf9\u8c61\uff0c\u9700\u8981\u8fdb\u884c\u5747\u8d28\u5316\u5904\u7406\u7684\u7f51\u683c\u3002</p> required <code>target_num</code> <code>int</code> <p>\u76ee\u6807\u9762\u6570\uff0c\u5373\u7ecf\u8fc7\u5904\u7406\u540e\u7f51\u683c\u7684\u9762\u6570\u63a5\u8fd1\u8be5\u503c\u3002 \u9ed8\u8ba4\u4e3a 10000\u3002</p> <code>10000</code> <p>Returns:</p> Type Description <p>vedo.Mesh: \u7ecf\u8fc7\u5747\u8d28\u5316\u5904\u7406\u540e\u7684 vedo \u7f51\u683c\u5bf9\u8c61\uff0c\u5176\u9762\u6570\u63a5\u8fd1\u76ee\u6807\u9762\u6570\u3002</p> Notes <p>\u8be5\u51fd\u6570\u4f9d\u8d56\u4e8e pyacvd \u548c pyvista \u5e93\uff0c\u4f7f\u7528\u524d\u8bf7\u786e\u4fdd\u8fd9\u4e9b\u5e93\u5df2\u6b63\u786e\u5b89\u88c5\u3002</p>"},{"location":"api/#utils3d.algorithm.isotropic_remeshing_by_meshlab","title":"<code>isotropic_remeshing_by_meshlab(mesh, target_edge_length=0.5, iterations=1)</code>","text":"<p>\u4f7f\u7528 PyMeshLab \u5b9e\u73b0\u7f51\u683c\u5747\u5300\u5316\u3002</p> <p>Parameters:</p> Name Type Description Default <code>mesh</code> <p>\u8f93\u5165\u7684\u7f51\u683c\u5bf9\u8c61 (pymeshlab.MeshSet)\u3002</p> required <code>target_edge_length</code> <p>\u76ee\u6807\u8fb9\u957f\u6bd4\u4f8b %\u3002</p> <code>0.5</code> <code>iterations</code> <p>\u8fed\u4ee3\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a 1\u3002</p> <code>1</code> <p>Returns:</p> Type Description <code>Mesh</code> <p>\u5747\u5300\u5316\u540e\u7684\u7f51\u683c\u5bf9\u8c61\u3002</p>"},{"location":"api/#utils3d.algorithm.labels2colors","title":"<code>labels2colors(labels)</code>","text":"<p>\u5c06labels\u8f6c\u6362\u6210\u989c\u8272\u6807\u7b7e Args:     labels: numpy\u7c7b\u578b,\u5f62\u72b6(N)\u5bf9\u5e94\u9876\u70b9\u7684\u6807\u7b7e\uff1b</p> <p>Returns:</p> Type Description <p>RGBA\u989c\u8272\u6807\u7b7e;</p>"},{"location":"api/#utils3d.algorithm.labels_mapping","title":"<code>labels_mapping(old_vertices, old_faces, new_vertices, old_labels, fast=True)</code>","text":"<p>\u5c06\u539f\u59cb\u7f51\u683c\u7684\u6807\u7b7e\u5c5e\u6027\u7cbe\u786e\u6620\u5c04\u5230\u65b0\u7f51\u683c</p> \u53c2\u6570 <p>old_mesh(vedo) : \u539f\u59cb\u7f51\u683c\u5bf9\u8c61 new_mesh(vedo): \u91cd\u7f51\u683c\u5316\u540e\u7684\u65b0\u7f51\u683c\u5bf9\u8c61 old_labels (np.ndarray): \u539f\u59cb\u9876\u70b9\u6807\u7b7e\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (N,) </p> \u8fd4\u56de <p>new_labels (np.ndarray): \u6620\u5c04\u540e\u7684\u65b0\u9876\u70b9\u6807\u7b7e\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (M,)</p>"},{"location":"api/#utils3d.algorithm.load","title":"<code>load(path)</code>","text":"<p>\u57fa\u4e8e\u6587\u4ef6\u6269\u5c55\u540d\u81ea\u52a8\u89e3\u6790\u4e0d\u540c\u683c\u5f0f\u7684\u6587\u4ef6\u5e76\u52a0\u8f7d\u6570\u636e\u3002</p> <p>\u652f\u6301\u7684\u6587\u4ef6\u7c7b\u578b\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a - JSON: \u89e3\u6790\u4e3a\u5b57\u5178\u6216\u5217\u8868 - TOML: \u89e3\u6790\u4e3a\u5b57\u5178 - INI: \u89e3\u6790\u4e3aConfigParser\u5bf9\u8c61 - Numpy: .npy/.npz\u683c\u5f0f\u7684\u6570\u503c\u6570\u7ec4 - Pickle: Python\u5bf9\u8c61\u5e8f\u5217\u5316\u683c\u5f0f - TXT: \u7eaf\u6587\u672c\u6587\u4ef6 - LMDB: \u8f7b\u91cf\u7ea7\u952e\u503c\u6570\u636e\u5e93 - PyTorch: .pt/.pth\u6a21\u578b\u6587\u4ef6 - PTS: pts\u76843D\u70b9\u4e91\u6570\u636e\u6587\u4ef6 - constructionInfo: XML\u683c\u5f0f\u7684\u7259\u9f7f\u6a21\u578b\u6570\u636e</p> <p>\u5bf9\u4e8e\u672a\u77e5\u683c\u5f0f\uff0c\u5c1d\u8bd5\u4f7f\u7528vedo\u5e93\u52a0\u8f7d\uff0c\u652f\u6301\u591a\u79cd3D\u6a21\u578b\u683c\u5f0f\u3002</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>\u6587\u4ef6\u8def\u5f84\u6216\u76ee\u5f55\u8def\u5f84(LMDB\u683c\u5f0f)</p> required <p>Returns:</p> Name Type Description <code>Any</code> <p>\u6839\u636e\u6587\u4ef6\u7c7b\u578b\u8fd4\u56de\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784\uff0c\u52a0\u8f7d\u5931\u8d25\u65f6\u8fd4\u56deNone\u3002  - JSON/TOML: dict\u6216list  - INI: ConfigParser\u5bf9\u8c61  - Numpy: ndarray\u6216NpzFile  - Pickle: \u4efb\u610fPython\u5bf9\u8c61  - TXT: \u5b57\u7b26\u4e32  - LMDB: sindre.lmdb.Reader\u5bf9\u8c61(\u4f7f\u7528\u540e\u9700\u8c03\u7528close())  - PyTorch: \u6a21\u578b\u6743\u91cd\u6216\u5f20\u91cf  - PTS: \u5305\u542b\u7259\u9f7fID\u548c\u8fb9\u7f18\u70b9\u7684\u5b57\u5178  - constructionInfo: \u5305\u542b\u9879\u76ee\u4fe1\u606f\u548c\u591a\u9897\u7259\u9f7f\u6570\u636e\u7684\u5b57\u5178  - vedo\u652f\u6301\u7684\u683c\u5f0f: vedo.Mesh\u6216vedo.Volume\u7b49\u5bf9\u8c61</p> <p>Raises:</p> Type Description <code>Exception</code> <p>\u8bb0\u5f55\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u7684\u9519\u8bef\uff0c\u4f46\u51fd\u6570\u4f1a\u6355\u83b7\u5e76\u8fd4\u56deNone</p> Notes <ul> <li>LMDB\u6570\u636e\u9700\u8981\u624b\u52a8\u5173\u95ed: \u4f7f\u7528\u5b8c\u6210\u540e\u8c03\u7528data.close()</li> <li>3D\u6a21\u578b\u52a0\u8f7d\u4f9d\u8d56vedo\u5e93\uff0c\u786e\u4fdd\u73af\u5883\u5df2\u5b89\u88c5</li> <li>PyTorch\u6a21\u578b\u9ed8\u8ba4\u52a0\u8f7d\u5230CPU\uff0c\u907f\u514dCUDA\u8bbe\u5907\u4e0d\u53ef\u7528\u65f6\u7684\u9519\u8bef</li> </ul>"},{"location":"api/#utils3d.algorithm.mesh2sdf","title":"<code>mesh2sdf(v, f, size=64)</code>","text":"<p>\u4f53\u7d20\u5316\u7f51\u683c\uff0c\u8be5\u51fd\u6570\u9002\u7528\u4e8e\u975e\u6c34\u5bc6\u7f51\u683c\uff08\u5e26\u5b54\u7684\u7f51\u683c\uff09\u3001\u81ea\u76f8\u4ea4\u7f51\u683c\u3001\u5177\u6709\u975e\u6d41\u5f62\u51e0\u4f55\u4f53\u7684\u7f51\u683c\u4ee5\u53ca\u5177\u6709\u65b9\u5411\u4e0d\u4e00\u81f4\u7684\u9762\u7684\u7f51\u683c\u3002</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>array - like</code> <p>\u7f51\u683c\u7684\u9876\u70b9\u6570\u7ec4\u3002</p> required <code>f</code> <code>array - like</code> <p>\u7f51\u683c\u7684\u9762\u6570\u7ec4\u3002</p> required <code>size</code> <code>int</code> <p>\u4f53\u7d20\u5316\u7684\u5927\u5c0f\uff0c\u9ed8\u8ba4\u4e3a 64\u3002</p> <code>64</code> <p>Returns:</p> Name Type Description <code>array</code> <p>\u4f53\u7d20\u5316\u540e\u7684\u6570\u7ec4\u3002</p> <p>Raises:</p> Type Description <code>ImportError</code> <p>\u5982\u679c\u672a\u5b89\u88c5 'mesh-to-sdf' \u5e93\uff0c\u4f1a\u63d0\u793a\u5b89\u88c5\u3002</p>"},{"location":"api/#utils3d.algorithm.resample_mesh","title":"<code>resample_mesh(vertices, faces, density=1, num_samples=None)</code>","text":"<p>\u5728\u7531\u9876\u70b9\u548c\u9762\u5b9a\u4e49\u7684\u7f51\u683c\u8868\u9762\u4e0a\u8fdb\u884c\u70b9\u4e91\u91cd\u91c7\u6837\u3002</p> <ol> <li>\u5bc6\u5ea6\u6a21\u5f0f\uff1a\u6839\u636e\u5355\u4f4d\u9762\u7247\u9762\u79ef\u81ea\u52a8\u8ba1\u7b97\u603b\u91c7\u6837\u6570</li> <li>\u6307\u5b9a\u6570\u91cf\u6a21\u5f0f\uff1a\u76f4\u63a5\u6307\u5b9a\u9700\u8981\u91c7\u6837\u7684\u603b\u70b9\u6570</li> </ol> <p>\u8be5\u51fd\u6570\u4f7f\u7528\u5411\u91cf\u5316\u64cd\u4f5c\u9ad8\u6548\u5730\u5728\u7f51\u683c\u8868\u9762\u8fdb\u884c\u5747\u5300\u91c7\u6837\uff0c\u91c7\u6837\u5bc6\u5ea6\u7531\u5355\u4f4d\u9762\u79ef\u70b9\u6570\u51b3\u5b9a\u3002 \u91c7\u6837\u7b56\u7565\u57fa\u4e8e\u91cd\u5fc3\u5750\u6807\u7cfb\uff0c\u91c7\u7528\u5206\u5c42\u968f\u673a\u62bd\u6837\u65b9\u6cd5\u3002</p> <p>\u6ce8\u610f\uff1a     \u96f6\u9762\u79ef\u4e09\u89d2\u5f62\u4f1a\u88ab\u81ea\u52a8\u8df3\u8fc7\uff0c\u56e0\u4e3a\u4e0d\u4f1a\u5206\u914d\u91c7\u6837\u70b9\u3002</p> <p>\u53c2\u8003\u5b9e\u73b0\uff1a     https://chrischoy.github.io/research/barycentric-coordinate-for-mesh-sampling/</p> <p>Parameters:</p> Name Type Description Default <code>vertices</code> <code>ndarray</code> <p>\u7f51\u683c\u9876\u70b9\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(V, 3)\uff0cV\u8868\u793a\u9876\u70b9\u6570\u91cf</p> required <code>faces</code> <code>ndarray</code> <p>\u4e09\u89d2\u5f62\u9762\u7247\u7d22\u5f15\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(F, 3)\uff0c\u6570\u636e\u7c7b\u578b\u5e94\u4e3a\u6574\u6570</p> required <code>density</code> <code>(float, \u53ef\u9009)</code> <p>\u6bcf\u5355\u4f4d\u9762\u79ef\u7684\u91c7\u6837\u70b9\u6570\uff0c\u9ed8\u8ba4\u4e3a1</p> <code>1</code> <code>num_samples</code> <code>(int, \u53ef\u9009)</code> <p>\u6307\u5b9a\u603b\u91c7\u6837\u70b9\u6570\uff0c\u82e5\u63d0\u4f9b\u5219\u5ffd\u7565density\u53c2\u6570</p> <code>None</code> <p>Returns:</p> Type Description <p>numpy.ndarray: \u91cd\u91c7\u6837\u540e\u7684\u70b9\u4e91\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(N, 3)\uff0cN\u4e3a\u603b\u91c7\u6837\u70b9\u6570</p> Notes <p>\u91c7\u6837\u70b9\u751f\u6210\u516c\u5f0f\uff08\u91cd\u5fc3\u5750\u6807\u7cfb\uff09\uff1a     P = (1 - \u221ar\u2081)A + \u221ar\u2081(1 - r\u2082)B + \u221ar\u2081 r\u2082 C \u5176\u4e2d\uff1a - r\u2081, r\u2082 \u2208 [0, 1) \u4e3a\u968f\u673a\u6570 - A, B, C \u4e3a\u4e09\u89d2\u5f62\u9876\u70b9 - \u8be5\u516c\u5f0f\u53ef\u786e\u4fdd\u5728\u4e09\u89d2\u5f62\u8868\u9762\u5747\u5300\u91c7\u6837</p> <p>\u7b97\u6cd5\u6d41\u7a0b\uff1a 1. \u8ba1\u7b97\u6bcf\u4e2a\u9762\u7684\u9762\u79ef\u5e76\u5206\u914d\u91c7\u6837\u70b9\u6570 2. \u901a\u8fc7\u968f\u673a\u820d\u5165\u5904\u7406\u603b\u70b9\u6570\u8bef\u5dee 3. \u4f7f\u7528\u5411\u91cf\u5316\u64cd\u4f5c\u6279\u91cf\u751f\u6210\u91c7\u6837\u70b9</p> References <p>[1] Barycentric coordinate system - https://en.wikipedia.org/wiki/Barycentric_coordinate_system</p>"},{"location":"api/#utils3d.algorithm.restore_transform","title":"<code>restore_transform(vertices, transform)</code>","text":"<pre><code>\u6839\u636e\u63d0\u4f9b\u7684\u9876\u70b9\u53ca\u77e9\u9635\uff0c\u8fdb\u884c\u9006\u53d8\u6362(\u8fd8\u539f\u5e94\u7528\u77e9\u9635\u4e4b\u524d\u7684\u72b6\u6001\uff09\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>vertices</code> <code>array</code> <p>\u9876\u70b9</p> required <code>transform</code> <code>array</code> <p>4*4\u53d8\u6362\u77e9\u9635</p> required <p>Returns:</p> Type Description <code>array</code> <p>\u8fd8\u539f\u540e\u7684\u9876\u70b9\u5750\u6807</p>"},{"location":"api/#utils3d.algorithm.sample_sdf_mesh","title":"<code>sample_sdf_mesh(v, f, number_of_points=200000)</code>","text":"<p>\u5728\u66f2\u9762\u9644\u8fd1\u4e0d\u5747\u5300\u5730\u91c7\u6837 SDF \u70b9\uff0c\u8be5\u51fd\u6570\u9002\u7528\u4e8e\u975e\u6c34\u5bc6\u7f51\u683c\uff08\u5e26\u5b54\u7684\u7f51\u683c\uff09\u3001\u81ea\u76f8\u4ea4\u7f51\u683c\u3001\u5177\u6709\u975e\u6d41\u5f62\u51e0\u4f55\u4f53\u7684\u7f51\u683c\u4ee5\u53ca\u5177\u6709\u65b9\u5411\u4e0d\u4e00\u81f4\u7684\u9762\u7684\u7f51\u683c\u3002 \u8fd9\u662f DeepSDF \u8bba\u6587\u4e2d\u63d0\u51fa\u548c\u4f7f\u7528\u7684\u65b9\u6cd5\u3002</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>array - like</code> <p>\u7f51\u683c\u7684\u9876\u70b9\u6570\u7ec4\u3002</p> required <code>f</code> <code>array - like</code> <p>\u7f51\u683c\u7684\u9762\u6570\u7ec4\u3002</p> required <code>number_of_points</code> <code>int</code> <p>\u91c7\u6837\u70b9\u7684\u6570\u91cf\uff0c\u9ed8\u8ba4\u4e3a 200000\u3002</p> <code>200000</code> <p>Returns:</p> Name Type Description <code>tuple</code> <p>\u5305\u542b\u91c7\u6837\u70b9\u6570\u7ec4\u548c\u5bf9\u5e94\u7684 SDF \u503c\u6570\u7ec4\u7684\u5143\u7ec4\u3002</p> <p>Raises:</p> Type Description <code>ImportError</code> <p>\u5982\u679c\u672a\u5b89\u88c5 'mesh-to-sdf' \u5e93\uff0c\u4f1a\u63d0\u793a\u5b89\u88c5\u3002</p>"},{"location":"api/#utils3d.algorithm.save_np_json","title":"<code>save_np_json(output_path, obj)</code>","text":"<p>\u4fdd\u5b58np\u5f62\u5f0f\u7684json</p> <p>Parameters:</p> Name Type Description Default <code>output_path</code> <code>str</code> <p>\u4fdd\u5b58\u8def\u5f84</p> required <code>obj</code> <p>\u4fdd\u5b58\u5bf9\u8c61</p> required"},{"location":"api/#utils3d.algorithm.simplify_by_meshlab","title":"<code>simplify_by_meshlab(vertices, faces, max_facenum=30000)</code>","text":"<p>\u901a\u8fc7\u4e8c\u6b21\u8fb9\u6298\u53e0\u7b97\u6cd5\u51cf\u5c11\u7f51\u683c\u4e2d\u7684\u9762\u6570\uff0c\u7b80\u5316\u6a21\u578b\u3002</p> <p>Parameters:</p> Name Type Description Default <code>mesh</code> <code>MeshSet</code> <p>\u8f93\u5165\u7684\u7f51\u683c\u6a21\u578b\u3002</p> required <code>max_facenum</code> <code>int</code> <p>\u7b80\u5316\u540e\u7684\u76ee\u6807\u6700\u5927\u9762\u6570\uff0c\u9ed8\u8ba4\u4e3a 200000\u3002</p> <code>30000</code> <p>Returns:</p> Type Description <code>Mesh</code> <p>pymeshlab.MeshSet: \u7b80\u5316\u540e\u7684\u7f51\u683c\u6a21\u578b\u3002</p>"},{"location":"api/#utils3d.algorithm.subdivide_loop_by_trimesh","title":"<code>subdivide_loop_by_trimesh(vertices, faces, iterations=5, max_face_num=100000, face_mask=None)</code>","text":"<p>\u5bf9\u7ed9\u5b9a\u7684\u9876\u70b9\u548c\u9762\u7247\u8fdb\u884c Loop \u7ec6\u5206\u3002</p> <p>Parameters:</p> Name Type Description Default <code>vertices</code> <code>array - like</code> <p>\u8f93\u5165\u7684\u9876\u70b9\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (n, 3)\uff0c\u5176\u4e2d n \u662f\u9876\u70b9\u6570\u91cf\u3002</p> required <code>faces</code> <code>array - like</code> <p>\u8f93\u5165\u7684\u9762\u7247\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (m, 3)\uff0c\u5176\u4e2d m \u662f\u9762\u7247\u6570\u91cf\u3002</p> required <code>iterations</code> <code>int</code> <p>\u7ec6\u5206\u7684\u8fed\u4ee3\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a 5\u3002</p> <code>5</code> <code>max_face_num</code> <code>int</code> <p>\u7ec6\u5206\u8fc7\u7a0b\u4e2d\u5141\u8bb8\u7684\u6700\u5927\u9762\u7247\u6570\u91cf\uff0c\u8fbe\u5230\u6b64\u6570\u91cf\u65f6\u505c\u6b62\u7ec6\u5206\uff0c\u9ed8\u8ba4\u4e3a 100000\u3002</p> <code>100000</code> <code>face_mask</code> <code>array - like</code> <p>\u9762\u7247\u63a9\u7801\u6570\u7ec4\uff0c\u7528\u4e8e\u6307\u5b9a\u54ea\u4e9b\u9762\u7247\u9700\u8981\u8fdb\u884c\u7ec6\u5206\uff0c\u9ed8\u8ba4\u4e3a None\u3002</p> <code>None</code> <p>Returns:</p> Name Type Description <code>tuple</code> <p>\u5305\u542b\u7ec6\u5206\u540e\u7684\u9876\u70b9\u6570\u7ec4\u3001\u7ec6\u5206\u540e\u7684\u9762\u7247\u6570\u7ec4\u548c\u9762\u7247\u63a9\u7801\u6570\u7ec4\u7684\u5143\u7ec4\u3002</p> Notes <p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u793a\u4f8b\u4ee3\u7801\uff0c\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u8be5\u51fd\u6570\uff1a</p> <pre><code># 1. \u83b7\u53d6\u6bcf\u4e2a\u70b9\u7684\u6700\u8fd1\u8868\u9762\u70b9\u53ca\u5bf9\u5e94\u9762\nface_indices = set()\nkdtree = cKDTree(mesh.vertices)\nfor p in pts:\n    # \u67e5\u627e\u534a\u5f842mm\u5185\u7684\u9876\u70b9\n    vertex_indices = kdtree.query_ball_point(p, r=1.0)\n    for v_idx in vertex_indices:\n        # \u83b7\u53d6\u5305\u542b\u8fd9\u4e9b\u9876\u70b9\u7684\u9762\u7247\n        faces = mesh.vertex_faces[v_idx]\n        faces = faces[faces != -1]  # \u53bb\u9664\u65e0\u6548\u7d22\u5f15\n        face_indices.update(faces.tolist())\nface_indices = np.array([[i] for i in list(face_indices)])\nnew_vertices, new_face, _ = subdivide_loop(v, f, face_mask=face_indices)\n</code></pre>"},{"location":"api/#utils3d.algorithm.vertex_labels_to_face_labels","title":"<code>vertex_labels_to_face_labels(faces, vertex_labels)</code>","text":"<pre><code>\u5c06\u4e09\u89d2\u7f51\u683c\u7684\u9876\u70b9\u6807\u7b7e\u8f6c\u6362\u6210\u9762\u7247\u6807\u7b7e\uff0c\u5b58\u5728\u4e00\u4e2a\u9762\u7247\uff0c\u591a\u4e2a\u5c5e\u6027\uff0c\u5219\u83b7\u53d6\u51fa\u73b0\u6700\u591a\u7684\u5c5e\u6027\u3002\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>faces</code> <code>Union[array, list]</code> <p>\u4e09\u89d2\u7f51\u683c\u9762\u7247\u7d22\u5f15</p> required <code>vertex_labels</code> <code>Union[array, list]</code> <p>\u9876\u70b9\u6807\u7b7e</p> required <p>Returns:</p> Type Description <code>array</code> <p>\u9762\u7247\u5c5e\u6027</p>"},{"location":"api/#utils3d.algorithm.voxel2array","title":"<code>voxel2array(grid_index_array, voxel_size=32)</code>","text":"<p>\u5c06 voxel_grid_index \u6570\u7ec4\u8f6c\u6362\u4e3a\u56fa\u5b9a\u5927\u5c0f\u7684\u4e09\u7ef4\u6570\u7ec4\u3002</p> <p>\u8be5\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u5f62\u72b6\u4e3a (N, 3) \u7684 voxel_grid_index \u6570\u7ec4\uff0c \u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u5f62\u72b6\u4e3a (voxel_size, voxel_size, voxel_size) \u7684\u4e09\u7ef4\u6570\u7ec4\u3002 \u5176\u4e2d\uff0c\u539f voxel_grid_index \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u7f51\u683c\u7d22\u5f15\uff0c \u5728\u8f6c\u6362\u540e\u7684\u4e09\u7ef4\u6570\u7ec4\u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u7684\u503c\u4f1a\u88ab\u8bbe\u4e3a 1\uff0c\u5176\u4f59\u4f4d\u7f6e\u4e3a 0\u3002</p> <p>Parameters:</p> Name Type Description Default <code>grid_index_array</code> <code>ndarray</code> <p>\u5f62\u72b6\u4e3a (N, 3) \u7684\u6570\u7ec4\uff0c \u901a\u5e38\u4ece open3d \u7684 o3d.voxel_grid.get_voxels() \u65b9\u6cd5\u83b7\u53d6\uff0c \u8868\u793a\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u6bcf\u4e2a\u4f53\u7d20\u7684\u7f51\u683c\u7d22\u5f15\u3002</p> required <code>voxel_size</code> <code>int</code> <p>\u8f6c\u6362\u540e\u4e09\u7ef4\u6570\u7ec4\u7684\u8fb9\u957f\uff0c\u9ed8\u8ba4\u4e3a 32\u3002</p> <code>32</code> <p>Returns:</p> Type Description <p>numpy.ndarray: \u5f62\u72b6\u4e3a (voxel_size, voxel_size, voxel_size) \u7684\u4e09\u7ef4\u6570\u7ec4\uff0c \u5176\u4e2d\u539f voxel_grid_index \u6570\u7ec4\u5bf9\u5e94\u7684\u7f51\u683c\u7d22\u5f15\u4f4d\u7f6e\u503c\u4e3a 1\uff0c\u5176\u4f59\u4e3a 0\u3002</p> Example <pre><code># \u83b7\u53d6 grid_index_array\nvoxel_list = voxel_grid.get_voxels()\ngrid_index_array = list(map(lambda x: x.grid_index, voxel_list))\ngrid_index_array = np.array(grid_index_array)\nvoxel_grid_array = voxel2array(grid_index_array, voxel_size=32)\ngrid_index_array = array2voxel(voxel_grid_array)\npointcloud_array = grid_index_array  # 0.03125 \u662f\u4f53\u7d20\u5927\u5c0f\npc = o3d.geometry.PointCloud()\npc.points = o3d.utility.Vector3dVector(pointcloud_array)\no3d_voxel = o3d.geometry.VoxelGrid.create_from_point_cloud(pc, voxel_size=0.05)\no3d.visualization.draw_geometries([pcd, cc, o3d_voxel])\n</code></pre>"},{"location":"api/#utils3d.pointcloud_augment.Flip","title":"<code>Flip</code>","text":"<p>\u5bf9\u70b9\u4e91\u6570\u636e\u8fdb\u884c\u968f\u673a\u7ffb\u8f6c\u589e\u5f3a\u3002</p> <p>Attributes:</p> Name Type Description <code>axis_x</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528X\u8f74\u7ffb\u8f6c\uff0c\u9ed8\u8ba4\u4e3aTrue</p> <code>axis_y</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528Y\u8f74\u7ffb\u8f6c\uff0c\u9ed8\u8ba4\u4e3aTrue</p> <code>axis_z</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528Z\u8f74\u7ffb\u8f6c\uff0c\u9ed8\u8ba4\u4e3aTrue</p>"},{"location":"api/#utils3d.pointcloud_augment.Flip.__call__","title":"<code>__call__(points)</code>","text":"<p>\u5bf9\u8f93\u5165\u70b9\u4e91\u5e94\u7528\u968f\u673a\u7ffb\u8f6c\u53d8\u6362\u3002</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>Tensor</code> <p>\u8f93\u5165\u70b9\u4e91\u6570\u636e\uff0c\u5f62\u72b6\u4e3a (N, 3) \u6216 (N, 6)\uff08\u5305\u542b\u6cd5\u7ebf\uff09</p> required <p>Returns:</p> Type Description <p>torch.Tensor: \u53d8\u6362\u540e\u7684\u70b9\u4e91\u6570\u636e</p>"},{"location":"api/#utils3d.pointcloud_augment.Flip.__init__","title":"<code>__init__(axis_x=True, axis_y=True, axis_z=True)</code>","text":"<p>\u521d\u59cb\u5316\u7ffb\u8f6c\u589e\u5f3a\u5668\u3002</p> <p>Parameters:</p> Name Type Description Default <code>axis_x</code> <code>bool</code> <p>\u662f\u5426\u6cbfX\u8f74\u7ffb\u8f6c. Defaults to True.</p> <code>True</code> <code>axis_y</code> <code>bool</code> <p>\u662f\u5426\u6cbfY\u8f74\u7ffb\u8f6c. Defaults to True.</p> <code>True</code> <code>axis_z</code> <code>bool</code> <p>\u662f\u5426\u6cbfZ\u8f74\u7ffb\u8f6c. Defaults to True.</p> <code>True</code>"},{"location":"api/#utils3d.pointcloud_augment.Flip_np","title":"<code>Flip_np</code>","text":""},{"location":"api/#utils3d.pointcloud_augment.Flip_np.__init__","title":"<code>__init__(axis_x=True, axis_y=True, axis_z=True)</code>","text":"<p>\u7528\u4e8e\u968f\u673a\u7ffb\u8f6c\u70b9\u4e91\u6570\u636e\u3002</p> <p>Parameters:</p> Name Type Description Default <code>axis_x</code> <code>bool</code> <p>\u662f\u5426\u5728 x \u8f74\u4e0a\u8fdb\u884c\u7ffb\u8f6c\uff0c\u9ed8\u8ba4\u4e3a True\u3002</p> <code>True</code> <code>axis_y</code> <code>bool</code> <p>\u662f\u5426\u5728 y \u8f74\u4e0a\u8fdb\u884c\u7ffb\u8f6c\uff0c\u9ed8\u8ba4\u4e3a True\u3002</p> <code>True</code> <code>axis_z</code> <code>bool</code> <p>\u662f\u5426\u5728 z \u8f74\u4e0a\u8fdb\u884c\u7ffb\u8f6c\uff0c\u9ed8\u8ba4\u4e3a True\u3002</p> <code>True</code>"},{"location":"api/#utils3d.pointcloud_augment.Jitter","title":"<code>Jitter</code>","text":"<p>\u5bf9\u70b9\u4e91\u5750\u6807\u6dfb\u52a0\u968f\u673a\u566a\u58f0\u3002</p>"},{"location":"api/#utils3d.pointcloud_augment.Jitter.__call__","title":"<code>__call__(points)</code>","text":"<p>\u5e94\u7528\u566a\u58f0\u6270\u52a8\u3002</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>Tensor</code> <p>\u8f93\u5165\u70b9\u4e91\u6570\u636e\uff0c\u5f62\u72b6\u4e3a (N, 3) \u6216 (N, 6)</p> required <p>Returns:</p> Type Description <p>torch.Tensor: \u53d8\u6362\u540e\u7684\u70b9\u4e91\u6570\u636e</p>"},{"location":"api/#utils3d.pointcloud_augment.Jitter.__init__","title":"<code>__init__(std=0.01, clip=0.05)</code>","text":"<p>\u521d\u59cb\u5316\u566a\u58f0\u589e\u5f3a\u5668\u3002</p> <p>Parameters:</p> Name Type Description Default <code>std</code> <code>float</code> <p>\u566a\u58f0\u6807\u51c6\u5dee. Defaults to 0.01.</p> <code>0.01</code> <code>clip</code> <code>float</code> <p>\u566a\u58f0\u622a\u65ad\u8303\u56f4. Defaults to 0.05.</p> <code>0.05</code>"},{"location":"api/#utils3d.pointcloud_augment.Jitter_np","title":"<code>Jitter_np</code>","text":"<p>               Bases: <code>object</code></p>"},{"location":"api/#utils3d.pointcloud_augment.Jitter_np.__init__","title":"<code>__init__(std=0.01, clip=0.05)</code>","text":"<p>\u7528\u4e8e\u7ed9\u70b9\u4e91\u6570\u636e\u6dfb\u52a0\u968f\u673a\u6296\u52a8\u3002</p> <p>Parameters:</p> Name Type Description Default <code>std</code> <code>float</code> <p>\u6296\u52a8\u7684\u9ad8\u65af\u5206\u5e03\u6807\u51c6\u5dee\uff0c\u9ed8\u8ba4\u4e3a 0.01\u3002</p> <code>0.01</code> <code>clip</code> <code>float</code> <p>\u6296\u52a8\u7684\u88c1\u526a\u8303\u56f4\uff0c\u9ed8\u8ba4\u4e3a 0.05\u3002</p> <code>0.05</code>"},{"location":"api/#utils3d.pointcloud_augment.Normalize","title":"<code>Normalize</code>","text":"<p>\u5bf9\u70b9\u4e91\u8fdb\u884c\u5f52\u4e00\u5316\u5904\u7406\u3002</p>"},{"location":"api/#utils3d.pointcloud_augment.Normalize.__call__","title":"<code>__call__(points)</code>","text":"<p>\u5e94\u7528\u5f52\u4e00\u5316\u5904\u7406\u3002</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>Tensor</code> <p>\u8f93\u5165\u70b9\u4e91\u6570\u636e\uff0c\u5f62\u72b6\u4e3a (N, C)</p> required <p>Returns:</p> Type Description <p>torch.Tensor: \u5f52\u4e00\u5316\u540e\u7684\u70b9\u4e91\u6570\u636e</p>"},{"location":"api/#utils3d.pointcloud_augment.Normalize.__init__","title":"<code>__init__(method='std', v_range=[0, 1])</code>","text":"<p>\u521d\u59cb\u5316\u5f52\u4e00\u5316\u5904\u7406\u5668\u3002</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>\u5f52\u4e00\u5316\u65b9\u6cd5\uff0c\u53ef\u9009\"std\"\uff08\u6807\u51c6\u5316\uff09\u6216\u5176\u4ed6\uff08\u6700\u5927\u6700\u5c0f\u5f52\u4e00\u5316\uff09.                     Defaults to \"std\".</p> <code>'std'</code> <code>v_range</code> <code>list</code> <p>\u5f53\u4f7f\u7528\u6700\u5927\u6700\u5c0f\u5f52\u4e00\u5316\u65f6\u7684\u76ee\u6807\u8303\u56f4. Defaults to [0, 1].</p> <code>[0, 1]</code>"},{"location":"api/#utils3d.pointcloud_augment.RandomCrop","title":"<code>RandomCrop</code>","text":""},{"location":"api/#utils3d.pointcloud_augment.RandomCrop.__init__","title":"<code>__init__(radius=0.15)</code>","text":"<p>\u968f\u673a\u79fb\u9664\u4e00\u4e2a\u70b9\u5468\u56f4\u6307\u5b9a\u534a\u5f84\u5185\u7684\u6240\u6709\u70b9</p> <p>Parameters:</p> Name Type Description Default <code>radius</code> <code>float</code> <p>\u79fb\u9664\u534a\u5f84\uff0c\u9ed8\u8ba4\u4e3a0.15</p> <code>0.15</code>"},{"location":"api/#utils3d.pointcloud_augment.RandomDropout","title":"<code>RandomDropout</code>","text":"<p>\u968f\u673a\u4e22\u5f03\u90e8\u5206\u70b9\u4e91\u6570\u636e\u3002</p>"},{"location":"api/#utils3d.pointcloud_augment.RandomDropout.__call__","title":"<code>__call__(pc)</code>","text":"<p>\u5e94\u7528\u968f\u673a\u4e22\u5f03\u3002</p> <p>Parameters:</p> Name Type Description Default <code>pc</code> <code>Tensor</code> <p>\u8f93\u5165\u70b9\u4e91\u6570\u636e\uff0c\u5f62\u72b6\u4e3a (N, C)</p> required <p>Returns:</p> Type Description <p>torch.Tensor: \u4e22\u5f03\u540e\u7684\u70b9\u4e91\u6570\u636e</p>"},{"location":"api/#utils3d.pointcloud_augment.RandomDropout.__init__","title":"<code>__init__(max_dropout_ratio=0.2)</code>","text":"<p>\u521d\u59cb\u5316\u4e22\u5f03\u589e\u5f3a\u5668\u3002</p> <p>Parameters:</p> Name Type Description Default <code>max_dropout_ratio</code> <code>float</code> <p>\u6700\u5927\u4e22\u5f03\u6bd4\u4f8b. Defaults to 0.2.</p> <code>0.2</code>"},{"location":"api/#utils3d.pointcloud_augment.RandomDropout_np","title":"<code>RandomDropout_np</code>","text":"<p>               Bases: <code>object</code></p>"},{"location":"api/#utils3d.pointcloud_augment.RandomDropout_np.__init__","title":"<code>__init__(max_dropout_ratio=0.2, return_idx=False)</code>","text":"<p>\u7528\u4e8e\u968f\u673a\u4e22\u5f03\u70b9\u4e91\u6570\u636e\u4e2d\u7684\u70b9\u3002</p> <p>Parameters:</p> Name Type Description Default <code>max_dropout_ratio</code> <code>float</code> <p>\u6700\u5927\u4e22\u5f03\u6bd4\u4f8b\uff0c\u8303\u56f4\u4e3a [0, 1)\uff0c\u9ed8\u8ba4\u4e3a 0.2\u3002</p> <code>0.2</code>"},{"location":"api/#utils3d.pointcloud_augment.RotateAxis","title":"<code>RotateAxis</code>","text":"<p>\u7ed5\u6307\u5b9a\u8f74\u968f\u673a\u65cb\u8f6c\u70b9\u4e91\u3002</p>"},{"location":"api/#utils3d.pointcloud_augment.RotateAxis.__call__","title":"<code>__call__(points)</code>","text":"<p>\u5e94\u7528\u7ed5\u8f74\u968f\u673a\u65cb\u8f6c\u53d8\u6362\u3002</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>Tensor</code> <p>\u8f93\u5165\u70b9\u4e91\u6570\u636e\uff0c\u5f62\u72b6\u4e3a (N, 3) \u6216 (N, 6)</p> required <p>Returns:</p> Type Description <p>torch.Tensor: \u53d8\u6362\u540e\u7684\u70b9\u4e91\u6570\u636e</p>"},{"location":"api/#utils3d.pointcloud_augment.RotateAxis.__init__","title":"<code>__init__(axis=[0.0, 0.0, 1.0])</code>","text":"<p>\u521d\u59cb\u5316\u65cb\u8f6c\u589e\u5f3a\u5668\u3002</p> <p>Parameters:</p> Name Type Description Default <code>axis</code> <code>Tensor</code> <p>\u65cb\u8f6c\u8f74\u5411\u91cf\uff0c\u5f62\u72b6\u4e3a (3,). Defaults to Z\u8f74.</p> <code>[0.0, 0.0, 1.0]</code>"},{"location":"api/#utils3d.pointcloud_augment.RotateAxis_np","title":"<code>RotateAxis_np</code>","text":""},{"location":"api/#utils3d.pointcloud_augment.RotateAxis_np.__init__","title":"<code>__init__(axis=[0.0, 0.0, 0.0])</code>","text":"<p>\u521d\u59cb\u5316 RotateAxis \u7c7b\uff0c\u7528\u4e8e\u7ed5\u6307\u5b9a\u8f74\u968f\u673a\u65cb\u8f6c\u70b9\u4e91\u6570\u636e\u3002</p> <p>Parameters:</p> Name Type Description Default <code>axis</code> <code>ndarray</code> <p>\u65cb\u8f6c\u8f74\uff0c\u5f62\u72b6\u4e3a (3,),\u9ed8\u8ba4\u4e3a [0.0, 0.0, 0.0]\uff08z \u8f74\uff09\u3002</p> <code>[0.0, 0.0, 0.0]</code>"},{"location":"api/#utils3d.pointcloud_augment.RotateXYZ","title":"<code>RotateXYZ</code>","text":"<p>\u7ed5XYZ\u8f74\u5e94\u7528\u968f\u673a\u6b27\u62c9\u89d2\u65cb\u8f6c\u3002</p>"},{"location":"api/#utils3d.pointcloud_augment.RotateXYZ.__call__","title":"<code>__call__(points)</code>","text":"<p>\u5e94\u7528\u4e09\u7ef4\u968f\u673a\u65cb\u8f6c\u53d8\u6362\u3002</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>Tensor</code> <p>\u8f93\u5165\u70b9\u4e91\u6570\u636e\uff0c\u5f62\u72b6\u4e3a (N, 3) \u6216 (N, 6)</p> required <p>Returns:</p> Type Description <p>torch.Tensor: \u53d8\u6362\u540e\u7684\u70b9\u4e91\u6570\u636e</p>"},{"location":"api/#utils3d.pointcloud_augment.RotateXYZ.__init__","title":"<code>__init__(angle_sigma=2, angle_clip=torch.pi)</code>","text":"<p>\u521d\u59cb\u5316\u65cb\u8f6c\u589e\u5f3a\u5668\u3002</p> <p>Parameters:</p> Name Type Description Default <code>angle_sigma</code> <code>float</code> <p>\u65cb\u8f6c\u89d2\u5ea6\u7684\u6807\u51c6\u5dee. Defaults to 2.</p> <code>2</code> <code>angle_clip</code> <code>float</code> <p>\u65cb\u8f6c\u89d2\u5ea6\u7684\u622a\u65ad\u8303\u56f4. Defaults to torch.pi.</p> <code>pi</code>"},{"location":"api/#utils3d.pointcloud_augment.RotateXYZ_np","title":"<code>RotateXYZ_np</code>","text":"<p>               Bases: <code>object</code></p>"},{"location":"api/#utils3d.pointcloud_augment.RotateXYZ_np.__init__","title":"<code>__init__(angle_sigma=2, angle_clip=np.pi)</code>","text":"<p>\u7528\u4e8e\u5728\u4e09\u4e2a\u8f74\u4e0a\u968f\u673a\u5fae\u6270\u65cb\u8f6c\u70b9\u4e91\u6570\u636e\u3002</p> <p>Parameters:</p> Name Type Description Default <code>angle_sigma</code> <code>float</code> <p>\u65cb\u8f6c\u5f27\u5ea6\u7684\u9ad8\u65af\u5206\u5e03\u6807\u51c6\u5dee\uff0c\u9ed8\u8ba4\u4e3a 2;</p> <code>2</code> <code>angle_clip</code> <code>float</code> <p>\u65cb\u8f6c\u5f27\u5ea6\u7684\u88c1\u526a\u8303\u56f4\uff0c\u9ed8\u8ba4\u4e3a np.pi\u3002</p> <code>pi</code>"},{"location":"api/#utils3d.pointcloud_augment.Scale","title":"<code>Scale</code>","text":"<p>\u5bf9\u70b9\u4e91\u6570\u636e\u8fdb\u884c\u968f\u673a\u7f29\u653e\u589e\u5f3a\u3002</p>"},{"location":"api/#utils3d.pointcloud_augment.Scale.__call__","title":"<code>__call__(points)</code>","text":"<p>\u5bf9\u8f93\u5165\u70b9\u4e91\u5e94\u7528\u968f\u673a\u7f29\u653e\u53d8\u6362\u3002</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>Tensor</code> <p>\u8f93\u5165\u70b9\u4e91\u6570\u636e\uff0c\u5f62\u72b6\u4e3a (N, 3) \u6216 (N, 6)</p> required <p>Returns:</p> Type Description <p>torch.Tensor: \u53d8\u6362\u540e\u7684\u70b9\u4e91\u6570\u636e</p>"},{"location":"api/#utils3d.pointcloud_augment.Scale.__init__","title":"<code>__init__(lo=0.8, hi=1.25)</code>","text":"<p>\u521d\u59cb\u5316\u7f29\u653e\u589e\u5f3a\u5668\u3002</p> <p>Parameters:</p> Name Type Description Default <code>lo</code> <code>float</code> <p>\u7f29\u653e\u4e0b\u9650. Defaults to 0.8.</p> <code>0.8</code> <code>hi</code> <code>float</code> <p>\u7f29\u653e\u4e0a\u9650. Defaults to 1.25.</p> <code>1.25</code>"},{"location":"api/#utils3d.pointcloud_augment.Scale_np","title":"<code>Scale_np</code>","text":""},{"location":"api/#utils3d.pointcloud_augment.Scale_np.__init__","title":"<code>__init__(lo=0.8, hi=1.25)</code>","text":"<p>\u521d\u59cb\u5316 Scale \u7c7b\uff0c\u7528\u4e8e\u968f\u673a\u7f29\u653e\u70b9\u4e91\u6570\u636e\u3002</p> <p>Parameters:</p> Name Type Description Default <code>lo</code> <code>float</code> <p>\u7f29\u653e\u56e0\u5b50\u7684\u4e0b\u9650\uff0c\u9ed8\u8ba4\u4e3a 0.8\u3002</p> <code>0.8</code> <code>hi</code> <code>float</code> <p>\u7f29\u653e\u56e0\u5b50\u7684\u4e0a\u9650\uff0c\u9ed8\u8ba4\u4e3a 1.25\u3002</p> <code>1.25</code>"},{"location":"api/#utils3d.pointcloud_augment.ToTensor","title":"<code>ToTensor</code>","text":"<p>\u5c06\u8f93\u5165\u6570\u636e\u8f6c\u6362\u4e3atorch.Tensor\u683c\u5f0f\u3002</p>"},{"location":"api/#utils3d.pointcloud_augment.ToTensor.__call__","title":"<code>__call__(points)</code>","text":"<p>\u6267\u884c\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u548c\u8bbe\u5907\u8f6c\u79fb\u3002</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>ndarray | Tensor</code> <p>\u8f93\u5165\u70b9\u4e91\u6570\u636e</p> required <p>Returns:</p> Type Description <p>torch.Tensor: \u8f6c\u6362\u540e\u7684\u5f20\u91cf</p>"},{"location":"api/#utils3d.pointcloud_augment.ToTensor.__init__","title":"<code>__init__(device='cpu')</code>","text":"<p>\u521d\u59cb\u5316\u8f6c\u6362\u5668\u3002</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>str</code> <p>\u76ee\u6807\u8bbe\u5907. Defaults to \"cpu\".</p> <code>'cpu'</code>"},{"location":"api/#utils3d.pointcloud_augment.Translate","title":"<code>Translate</code>","text":"<p>\u5bf9\u70b9\u4e91\u5e94\u7528\u968f\u673a\u5e73\u79fb\u53d8\u6362\u3002</p>"},{"location":"api/#utils3d.pointcloud_augment.Translate.__call__","title":"<code>__call__(points)</code>","text":"<p>\u5e94\u7528\u5e73\u79fb\u53d8\u6362\u3002</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>Tensor</code> <p>\u8f93\u5165\u70b9\u4e91\u6570\u636e\uff0c\u5f62\u72b6\u4e3a (N, 3) \u6216 (N, 6)</p> required <p>Returns:</p> Type Description <p>torch.Tensor: \u53d8\u6362\u540e\u7684\u70b9\u4e91\u6570\u636e</p>"},{"location":"api/#utils3d.pointcloud_augment.Translate.__init__","title":"<code>__init__(translate_range=0.1)</code>","text":"<p>\u521d\u59cb\u5316\u5e73\u79fb\u589e\u5f3a\u5668\u3002</p> <p>Parameters:</p> Name Type Description Default <code>translate_range</code> <code>float</code> <p>\u5e73\u79fb\u8303\u56f4. Defaults to 0.1.</p> <code>0.1</code>"},{"location":"api/#utils3d.pointcloud_augment.Translate_np","title":"<code>Translate_np</code>","text":"<p>               Bases: <code>object</code></p>"},{"location":"api/#utils3d.pointcloud_augment.Translate_np.__init__","title":"<code>__init__(translate_range=0.1)</code>","text":"<p>\u7528\u4e8e\u968f\u673a\u5e73\u79fb\u70b9\u4e91\u6570\u636e\u3002</p> <p>Parameters:</p> Name Type Description Default <code>translate_range</code> <code>float</code> <p>\u5e73\u79fb\u7684\u8303\u56f4\uff0c\u9ed8\u8ba4\u4e3a 0.1\u3002</p> <code>0.1</code>"},{"location":"api/#utils3d.pointcloud_augment.angle_axis","title":"<code>angle_axis(angle, axis)</code>","text":"<p>\u8ba1\u7b97\u7ed5\u7ed9\u5b9a\u8f74\u65cb\u8f6c\u6307\u5b9a\u89d2\u5ea6\u7684\u65cb\u8f6c\u77e9\u9635\uff08PyTorch\u7248\u672c\uff09\u3002</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>float</code> <p>\u65cb\u8f6c\u89d2\u5ea6\uff08\u5f27\u5ea6\uff09\u3002</p> required <code>axis</code> <code>Tensor</code> <p>\u65cb\u8f6c\u8f74\uff0c\u5f62\u72b6\u4e3a (3,) \u7684Tensor\u3002</p> required <p>Returns:</p> Type Description <p>torch.Tensor: 3x3 \u7684\u65cb\u8f6c\u77e9\u9635\uff0c\u6570\u636e\u7c7b\u578b\u4e3a torch.float32\u3002</p>"},{"location":"api/#utils3d.pointcloud_augment.angle_axis_np","title":"<code>angle_axis_np(angle, axis)</code>","text":"<p>\u8ba1\u7b97\u7ed5\u7ed9\u5b9a\u8f74\u65cb\u8f6c\u6307\u5b9a\u5f27\u5ea6\u7684\u65cb\u8f6c\u77e9\u9635\u3002 \u7f57\u5fb7\u91cc\u683c\u65af\u516c\u5f0f;</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>float</code> <p>\u65cb\u8f6c\u5f27\u5ea6\u3002</p> required <code>axis</code> <code>ndarray</code> <p>\u65cb\u8f6c\u8f74\uff0c\u5f62\u72b6\u4e3a (3,) \u7684 numpy \u6570\u7ec4\u3002</p> required <p>Returns:</p> Type Description <p>np.array: 3x3 \u7684\u65cb\u8f6c\u77e9\u9635\uff0c\u6570\u636e\u7c7b\u578b\u4e3a np.float32\u3002</p>"},{"location":"api/#utils3d.pointcloud_augment.set_seeds","title":"<code>set_seeds(seed=1024, cudnn_enable=False)</code>","text":"<p>\u4e3aPython\u73af\u5883\u548c\u4e3b\u8981\u6df1\u5ea6\u5b66\u4e60\u5e93\u8bbe\u7f6e\u56fa\u5b9a\u7684\u968f\u673a\u6570\u79cd\u5b50\uff0c\u786e\u4fdd\u7ed3\u679c\u53ef\u590d\u73b0\u3002</p> \u53c2\u6570 <p>seed (int): \u8981\u4f7f\u7528\u7684\u57fa\u7840\u968f\u673a\u6570\u79cd\u5b50\uff0c\u9ed8\u8ba4\u503c\u4e3a42\u3002 cudnn_enable (bool): \u662f\u5426\u5c06CuDNN\u8bbe\u7f6e\u4e3a\u786e\u5b9a\u6027\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u503c\u4e3aFalse\u3002</p>"},{"location":"api/#utils3d.dental_tools.convert_fdi2idx","title":"<code>convert_fdi2idx(labels)</code>","text":"<p>\u5c06\u53e3\u8154\u7259\u5217\u7684FDI\u7f16\u53f7(11-18,21-28/31-38,41-48)\u8f6c\u6362\u4e3a(1-16),\u53ea\u652f\u6301\u5355\u988c: \u4e0a\u988c\uff1a - \u53f3\u4e0a(11-18) \u2192 1-8 - \u5de6\u4e0a(21-28) \u2192 9-16</p> <p>\u4e0b\u988c\uff1a - \u5de6\u4e0b(31-38) \u2192 1-8 - \u53f3\u4e0b(41-48) \u2192 9-16 - 0\u6216\u5c0f\u4e8e0    \u2192 0</p> <pre><code>          1 9\n        2    10\n      3        11\n    4            12\n  5                13\n6                    14\n</code></pre> <p>7                        15 8                            16</p>"},{"location":"api/#utils3d.dental_tools.convert_labels2color","title":"<code>convert_labels2color(data)</code>","text":"<pre><code>\u5c06\u7259\u9f7f\u6807\u7b7e\u8f6c\u6362\u6210RGBA\u989c\u8272\n</code></pre> Notes <p>\u53ea\u652f\u6301\u4ee5\u4e0b\u6807\u7b7e\u7c7b\u578b\uff1a</p> <pre><code>upper_dict = [0, 18, 17, 16, 15, 14, 13, 12, 11, 21, 22, 23, 24, 25, 26, 27, 28]\n\nlower_dict = [0, 48, 47, 46, 45, 44, 43, 42, 41, 31, 32, 33, 34, 35, 36, 37, 38]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Union[array, list]</code> <p>\u5c5e\u6027</p> required <p>Returns:</p> Name Type Description <code>colors</code> <code>list</code> <p>\u5bf9\u5e94\u5c5e\u6027\u7684RGBA\u7c7b\u578b\u989c\u8272</p>"},{"location":"api/#utils3d.dental_tools.cut_crown_with_meshlib","title":"<code>cut_crown_with_meshlib(mesh, margin_points)</code>","text":"<p>\u4f7f\u7528\u8fb9\u7f18\u70b9\u5206\u5272\u7259\u51a0\u7f51\u683c\u6a21\u578b\uff0c\u8fd4\u56de\u4fdd\u7559\u90e8\u5206\u548c\u79fb\u9664\u90e8\u5206\u3002</p> <p>\u8be5\u51fd\u6570\u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\u5b9e\u73b0\u7259\u51a0\u5206\u5272\uff1a 1. \u5728\u8f93\u5165\u7f51\u683c\u4e2d\u5b9a\u4f4d\u8ddd\u79bb\u8fb9\u7f18\u7ebf\u6700\u8fd1\u7684\u8fde\u901a\u533a\u57df 2. \u4f7f\u7528\u8fb9\u7f18\u7ebf\u5207\u5272\u8be5\u533a\u57df 3. \u6839\u636e\u8fb9\u754c\u8ddd\u79bb\u9a8c\u8bc1\u5207\u5272\u7ed3\u679c 4. \u5408\u5e76\u5269\u4f59\u7f51\u683c\u7ec4\u4ef6</p> <p>\u53c2\u6570\uff1a     mesh: vedo.Mesh\u5bf9\u8c61\uff0c\u8868\u793a\u5f85\u5206\u5272\u7684\u7259\u51a0\u7f51\u683c\u6a21\u578b     margin_points: np.ndarray\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(N,3)\u7684\u8fb9\u7f18\u70b9\u96c6</p> <p>\u8fd4\u56de\uff1a     Tuple[vedo.Mesh, vedo.Mesh]:         \u7b2c\u4e00\u4e2aMesh\u4e3a\u4fdd\u7559\u90e8\u5206\uff08\u7259\u51a0\u4e3b\u4f53\uff09         \u7b2c\u4e8c\u4e2aMesh\u4e3a\u79fb\u9664\u90e8\u5206\uff08\u7259\u9f88\u533a\u57df\uff09</p> <p>\u5f02\u5e38\uff1a     \u5f53\u8fb9\u7f18\u70b9\u4e0e\u7f51\u683c\u7684\u6700\u5c0f\u8ddd\u79bb\u8d85\u8fc71mm\u65f6\u89e6\u53d1\u65ad\u8a00\u9519\u8bef</p>"},{"location":"api/#utils3d.dental_tools.cut_mesh_point_loop_crow","title":"<code>cut_mesh_point_loop_crow(mesh, pts, error_show=True, invert=True)</code>","text":"<p>\u5b9e\u73b0\u7684\u57fa\u4e8e\u7ebf\u7684\u7259\u9f7f\u51a0\u5206\u5272;</p> <p>Parameters:</p> Name Type Description Default <code>mesh</code> <code>_type_</code> <p>\u5f85\u5207\u5272\u7f51\u683c</p> required <code>pts</code> <code>Points / Line</code> <p>\u5207\u5272\u7ebf</p> required <code>error_show(bool,</code> <code>optional</code> <p>\u88c1\u526a\u5931\u8d25\u662f\u5426\u8fdb\u884c\u6e32\u67d3. Defaults to True.</p> required <code>invert(bool)</code> <p>\u662f\u5426\u53d6\u53cd\uff1b</p> required <p>Returns:</p> Name Type Description <code>_type_</code> <p>\u5207\u5272\u540e\u7684\u7f51\u683c</p>"},{"location":"api/#utils3d.dental_tools.cut_with_ribbon","title":"<code>cut_with_ribbon(mesh, pts)</code>","text":"<p>\u4f7f\u7528\u70b9\u5e8f\u5217\u5207\u5272\u7f51\u683c</p> <p>\u53c2\u6570: pts: \u5207\u5272\u70b9\u5e8f\u5217 (k, 3)</p> <p>\u8fd4\u56de: new_v: \u5207\u5272\u540e\u9876\u70b9 new_f: \u5207\u5272\u540e\u9762</p>"},{"location":"api/#utils3d.dental_tools.deform_and_merge_mesh","title":"<code>deform_and_merge_mesh(mesh_path, base_mesh_path, ref_direction=np.array([0, 0, -1]), angle_threshold=30, boundary_samples=200, non_boundary_samples=500, boundary_radius=1.0, seed=1024)</code>","text":"<p>\u5c06\u7f51\u683c\u53d8\u5f62\u5e76\u4e0e\u57fa\u7840\u7f51\u683c\u5408\u5e76,\u7528\u4e8e\u5c06AI\u751f\u6210\u95ed\u5408\u51a0\u88c1\u526a\u5e76\u62df\u5408\u5230\u57fa\u5ea7\u4e0a\uff1b</p> <p>\u8be5\u51fd\u6570\uff1a     1. \u57fa\u4e8e\u53c2\u8003\u65b9\u5411\u7684\u89d2\u5ea6\u9608\u503c\u5904\u7406\u8f93\u5165\u7f51\u683c     2. \u8bc6\u522b\u8fb9\u754c\u533a\u57df     3. \u751f\u6210\u53d8\u5f62\u63a7\u5236\u70b9     4. \u5c06\u8fb9\u754c\u533a\u57df\u53d8\u5f62\u4ee5\u5339\u914d\u57fa\u7840\u7f51\u683c     5. \u5c06\u53d8\u5f62\u540e\u7684\u7f51\u683c\u4e0e\u57fa\u7840\u7f51\u683c\u5408\u5e76</p> <p>Notes:</p> <p>'''     # \u81ea\u5b9a\u4e49\u53c2\u8003\u65b9\u5411\u5411\u91cf     sm = SindreMesh(r\"J10177170088_UpperJaw_gen.ply\")     custom_direction = np.array(sm.vertices[42734] - sm.vertices[48221])</p> <pre><code>result_mesh = deform_and_merge_mesh(\n    mesh_path=r\"J10177170088_UpperJaw_gen.ply\",\n    base_mesh_path=r\"17.ply\",\n    ref_direction=custom_direction,\n    angle_threshold=30,\n    boundary_samples=200,\n    non_boundary_samples=500\n)\n\nresult_mesh.write(\"merged_result.ply\")\nshow(result_mesh, axes=1).close()\n</code></pre> <p>'''</p> <p>Parameters:</p> Name Type Description Default <code>mesh_path</code> <code>str</code> <p>\u4e3b\u7f51\u683cPLY\u6587\u4ef6\u8def\u5f84</p> required <code>base_mesh_path</code> <code>str</code> <p>\u57fa\u7840\u7f51\u683cPLY\u6587\u4ef6\u8def\u5f84</p> required <code>ref_direction</code> <code>ndarray</code> <p>\u53c2\u8003\u65b9\u5411\u5411\u91cf (\u9ed8\u8ba4 [0,0,1])</p> <code>array([0, 0, -1])</code> <code>angle_threshold</code> <code>float</code> <p>\u7528\u4e8e\u9762\u7247\u8fc7\u6ee4\u7684\u89d2\u5ea6\u9608\u503c (\u5ea6)</p> <code>30</code> <code>boundary_samples</code> <code>int</code> <p>\u8fb9\u754c\u70b9\u91c7\u6837\u6570\u91cf</p> <code>200</code> <code>non_boundary_samples</code> <code>int</code> <p>\u975e\u8fb9\u754c\u70b9\u91c7\u6837\u6570\u91cf</p> <code>500</code> <code>boundary_radius</code> <code>float</code> <p>\u8fb9\u754c\u533a\u57df\u8bc6\u522b\u534a\u5f84</p> <code>1.0</code> <code>seed</code> <code>int</code> <p>\u968f\u673a\u79cd\u5b50 (\u786e\u4fdd\u7ed3\u679c\u53ef\u91cd\u73b0)</p> <code>1024</code> <p>Returns:</p> <pre><code>vedo.Mesh: \u5408\u5e76\u5e76\u6e05\u7406\u540e\u7684\u7f51\u683c\n</code></pre>"},{"location":"api/#utils3d.dental_tools.subdivide_with_pts","title":"<code>subdivide_with_pts(v, f, line_pts, r=0.15, iterations=3, method='mid')</code>","text":"<p>\u5bf9\u7ed9\u5b9a\u7684\u7f51\u683c\u548c\u7ebf\u70b9\u96c6\u8fdb\u884c\u5c40\u90e8\u7ec6\u5206\u3002</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>array - like</code> <p>\u8f93\u5165\u7f51\u683c\u7684\u9876\u70b9\u6570\u7ec4\u3002</p> required <code>f</code> <code>array - like</code> <p>\u8f93\u5165\u7f51\u683c\u7684\u9762\u6570\u7ec4\u3002</p> required <code>line_pts</code> <code>array - like</code> <p>\u7ebf\u7684\u70b9\u96c6\u6570\u7ec4\u3002</p> required <code>r</code> <code>float</code> <p>\u67e5\u627e\u7ebf\u70b9\u9644\u8fd1\u9876\u70b9\u7684\u534a\u5f84\uff0c\u9ed8\u8ba4\u4e3a 0.15.</p> <code>0.15</code> <code>method</code> <code>str</code> <p>\u7ec6\u5206\u65b9\u6cd5\uff0c\u53ef\u9009\u503c\u4e3a \"mid\"\uff08\u4e2d\u70b9\u7ec6\u5206\uff09\u6216\u5176\u4ed6\u503c\uff08\u5bf9\u5e94 ls3_loop \u7ec6\u5206\uff09\uff0c\u9ed8\u8ba4\u4e3a \"mid\"\u3002</p> <code>'mid'</code> <p>Returns:</p> Type Description <ul> <li>new_vertices (np.ndarray): \u7ec6\u5206\u540e\u7684\u9876\u70b9\u6570\u7ec4;</li> </ul> <ul> <li>new_face (np.ndarray): \u7ec6\u5206\u540e\u7684\u9762\u6570\u7ec4;</li> </ul> Notes <pre><code># \u95ed\u5408\u7ebf\u53ef\u80fd\u5728\u66f2\u9762\u4e0a\uff0c\u66f2\u9762\u5185\uff0c\u66f2\u9762\u5916\nline = Line(pts)\nmesh = isotropic_remeshing_by_acvd(mesh)\nv, f = np.array(mesh.vertices), np.array(mesh.cells)\nnew_vertices, new_face = subdivide_with_pts(v, f, pts)\n\nshow([(Mesh([new_vertices, new_face]).c(\"green\"), Line(pts, lw = 2, c = \"red\")),\n     (Mesh([v, f]).c(\"pink\"), Line(pts, lw = 2, c = \"red\"))], N = 2).close()\n</code></pre>"},{"location":"api/#utils3d.dental_tools.transform_crown","title":"<code>transform_crown(near_mesh, jaw_mesh)</code>","text":"<pre><code>\u8c03\u6574\u5355\u51a0\u7684\u8f74\u5411\n</code></pre> Tip <p>1.\u901a\u8fc7\u8fde\u901a\u57df\u5206\u5272\u4e24\u4e2a\u90bb\u7259;</p> <p>2.\u4ee5\u90bb\u7259\u8d28\u5fc3\u4e3a\u786e\u5b9ax\u8f74\uff1b</p> <p>3.\u901a\u8fc7\u627e\u5bf9\u988c\u6700\u8fd1\u7684\u70b9\u786e\u5b9az\u8f74\u65b9\u5411;\u5982\u679cz\u8f74\u65b9\u5411\u4e0a\u6709mesh\uff0c\u5219\u4fdd\u6301\u539f\u6837\uff0c\u5426\u5219\u5c06z\u8f74\u53d6\u53cd\u5411;</p> <p>4.\u8f93\u51fa\u8c03\u6574\u540e\u7684\u7259\u51a0</p> <p>Parameters:</p> Name Type Description Default <code>near_mesh</code> <code>Mesh</code> <p>\u4e24\u4e2a\u90bb\u7259\u7ec4\u6210\u7684mesh</p> required <code>jaw_mesh</code> <code>Mesh</code> <p>\u4e24\u4e2a\u90bb\u7259\u7684\u5bf9\u988c</p> required <p>Returns:</p> Type Description <code>Mesh</code> <p>\u53d8\u6362\u540e\u7684\u5355\u51a0mesh</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh","title":"<code>SindreMesh</code>","text":"<p>\u4e09\u7ef4\u7f51\u683c\u4e2d\u8f6c\u7c7b\uff0c\u5047\u8bbe\u90fd\u662f\u4e09\u89d2\u9762\u7247</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.center","title":"<code>center</code>  <code>cached</code> <code>property</code>","text":"<p>\u8ba1\u7b97\u7f51\u683c\u7684\u52a0\u6743\u8d28\u5fc3\uff08\u57fa\u4e8e\u9762\u7247\u9762\u79ef\u52a0\u6743\uff09\u3002</p> <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: \u52a0\u6743\u8d28\u5fc3\u5750\u6807\uff0c\u5f62\u72b6\u4e3a (3,)\u3002</p> Notes <p>\u4f7f\u7528\u4e09\u89d2\u5f62\u9762\u7247\u9762\u79ef\u4f5c\u4e3a\u6743\u91cd\uff0c\u5bf9\u4e09\u89d2\u5f62\u8d28\u5fc3\u5750\u6807\u8fdb\u884c\u52a0\u6743\u5e73\u5747\u3002 \u8be5\u7ed3\u679c\u7b49\u4ef7\u4e8e\u7f51\u683c\u7684\u51e0\u4f55\u4e2d\u5fc3\u3002</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.faces_area","title":"<code>faces_area</code>  <code>cached</code> <code>property</code>","text":"<p>\u8ba1\u7b97\u6bcf\u4e2a\u4e09\u89d2\u5f62\u9762\u7247\u7684\u9762\u79ef\u3002</p> Notes <p>\u4f7f\u7528\u53c9\u4e58\u516c\u5f0f\u8ba1\u7b97\u9762\u79ef\uff1a \u9762\u79ef = 0.5 * ||(v1 - v0) \u00d7 (v2 - v0)||</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.faces_center","title":"<code>faces_center</code>  <code>cached</code> <code>property</code>","text":"<p>\u6bcf\u4e2a\u4e09\u89d2\u5f62\u7684\u4e2d\u5fc3\uff08\u91cd\u5fc3 [1/3,1/3,1/3]\uff09</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.faces_vertices","title":"<code>faces_vertices</code>  <code>cached</code> <code>property</code>","text":"<p>\u5c06\u9762\u7247\u7d22\u5f15\u7528\u9876\u70b9\u6765\u8868\u793a</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.get_adj_list","title":"<code>get_adj_list</code>  <code>cached</code> <code>property</code>","text":"<p>\u90bb\u63a5\u8868\u5c5e\u6027</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.get_adj_matrix","title":"<code>get_adj_matrix</code>  <code>cached</code> <code>property</code>","text":"<p>\u57fa\u4e8e\u53bb\u91cd\u8fb9\u6784\u5efa\u90bb\u63a5\u77e9\u9635</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.get_edges","title":"<code>get_edges</code>  <code>cached</code> <code>property</code>","text":"<p>\u672a\u53bb\u91cd\u8fb9\u7f18\u5c5e\u6027</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.nfaces","title":"<code>nfaces</code>  <code>cached</code> <code>property</code>","text":"<p>\u83b7\u53d6\u9876\u70b9\u6570\u91cf</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.npoints","title":"<code>npoints</code>  <code>cached</code> <code>property</code>","text":"<p>\u83b7\u53d6\u9876\u70b9\u6570\u91cf</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.to_dict","title":"<code>to_dict</code>  <code>property</code>","text":"<p>\u5c06\u5c5e\u6027\u8f6c\u6362\u6210python\u5b57\u5178</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.to_json","title":"<code>to_json</code>  <code>property</code>","text":"<p>\u8f6c\u6362\u6210json</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.to_meshlab","title":"<code>to_meshlab</code>  <code>property</code>","text":"<p>\u8f6c\u6362\u6210meshlab</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.to_open3d","title":"<code>to_open3d</code>  <code>property</code>","text":"<p>\u8f6c\u6362\u6210open3d</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.to_open3d_t","title":"<code>to_open3d_t</code>  <code>property</code>","text":"<p>\u8f6c\u6362\u6210open3d_t</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.to_trimesh","title":"<code>to_trimesh</code>  <code>property</code>","text":"<p>\u8f6c\u6362\u6210trimesh</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.to_vedo","title":"<code>to_vedo</code>  <code>property</code>","text":"<p>\u8f6c\u6362\u6210vedo</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.to_vedo_pointcloud","title":"<code>to_vedo_pointcloud</code>  <code>property</code>","text":"<p>\u8f6c\u6362\u6210vedo\u70b9\u4e91</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.__repr__","title":"<code>__repr__()</code>","text":"<p>\u7f51\u683c\u8d28\u91cf\u68c0\u6d4b</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.apply_inv_transform","title":"<code>apply_inv_transform(mat)</code>","text":"<p>\u5bf9\u9876\u70b9\u5e94\u75284x4/3x3\u53d8\u6362\u77e9\u9635\u8fdb\u884c\u9006\u53d8\u6362(\u652f\u6301\u975e\u6b63\u4ea4\u77e9\u9635)</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.apply_transform","title":"<code>apply_transform(mat)</code>","text":"<p>\u5bf9\u9876\u70b9\u5e94\u75284x4/3x3\u53d8\u6362\u77e9\u9635(\u652f\u6301\u975e\u6b63\u4ea4\u77e9\u9635)</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.apply_transform_normals","title":"<code>apply_transform_normals(mat)</code>","text":"<p>\u5904\u7406\u9876\u70b9\u6cd5\u7ebf\u7684\u53d8\u6362\uff08\u652f\u6301\u975e\u5747\u5300\u7f29\u653e\u548c\u53cd\u5c04\u53d8\u6362\uff09---\u5e9f\u5f03\uff0c\u5728\u590d\u6742\u975e\u6b63\u5b9a\u77e9\u9635\uff0c\u91cd\u65b0\u8ba1\u7b97\u6cd5\u7ebf\u6bd4\u53d8\u6362\u66f4\u5feb\uff0c\u66f4\u52a0\u51c6\u786e</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.check","title":"<code>check()</code>","text":"<p>\u68c0\u6d4b\u6570\u636e\u5b8c\u6574\u6027,\u6b63\u5e38\u8fd4\u56deTrue</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.clone","title":"<code>clone()</code>","text":"<p>\u5feb\u901f\u514b\u9686\u5f53\u524d\u7f51\u683c\u5bf9\u8c61</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.compute_normals","title":"<code>compute_normals(force=False)</code>","text":"<p>\u8ba1\u7b97\u9876\u70b9\u6cd5\u7ebf\u53ca\u9762\u7247\u6cd5\u7ebf.force\u4ee3\u8868\u662f\u5426\u5f3a\u5236\u91cd\u65b0\u8ba1\u7b97</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.decimate","title":"<code>decimate(n=10000)</code>","text":"<p>\u5c06\u7f51\u683c\u4e0b\u91c7\u6837\u5230\u6307\u5b9a\u70b9\u6570\uff0c\u91c7\u7528\u9762\u584c\u9677</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.get_boundary","title":"<code>get_boundary(return_points=True, max_boundary=False)</code>","text":"<p>\u83b7\u53d6\u975e\u6c34\u5bc6\u7f51\u683c\u7684\u8fb9\u754c\u73af\uff08\u53ef\u80fd\u6709\u591a\u4e2a\u73af\uff09;</p> <p>Method: 1. \u83b7\u53d6\u6240\u6709\u7684\u8fb9\uff08\u672a\u53bb\u91cd\uff09\uff0c\u5e76\u7edf\u8ba1\u6bcf\u6761\u8fb9\u51fa\u73b0\u7684\u6b21\u6570\u3002\u5728\u4e09\u89d2\u7f51\u683c\u4e2d\uff0c\u5185\u90e8\u8fb9\u4f1a\u88ab\u4e24\u4e2a\u4e09\u89d2\u5f62\u5171\u4eab\uff0c\u800c\u8fb9\u754c\u8fb9\u53ea\u88ab\u4e00\u4e2a\u4e09\u89d2\u5f62\u4f7f\u7528\u3002 2. \u7b5b\u9009\u51fa\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u8fb9\uff0c\u8fd9\u4e9b\u8fb9\u5c31\u662f\u8fb9\u754c\u8fb9\u3002 3. \u5c06\u8fb9\u754c\u8fb9\u8fde\u63a5\u6210\u6709\u5e8f\u7684\u73af\uff08\u6216\u591a\u4e2a\u73af\uff09\u3002\u901a\u8fc7\u6784\u5efa\u8fb9\u754c\u8fb9\u7684\u56fe\uff0c\u7136\u540e\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u6216\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u6765\u8fde\u63a5\u76f8\u90bb\u7684\u8fb9\u3002</p> <p>Parameters:</p> Name Type Description Default <code>return_points</code> <code>bool</code> <p>True\u8fd4\u56de\u9876\u70b9\u5750\u6807,False\u8fd4\u56de\u9876\u70b9\u7d22\u5f15</p> <code>True</code> <code>max_boundary</code> <code>bool</code> <p>True\u65f6\u53ea\u8fd4\u56de\u6700\u5927\u7684\u8fb9\u754c\u73af(\u6309\u9876\u70b9\u6570\u91cf)</p> <code>False</code> <p>Return:     list: \u8fb9\u754c\u73af\u5217\u8868\uff0c\u6bcf\u4e2a\u73af\u662f\u9876\u70b9\u7d22\u5f15\u7684\u6709\u5e8f\u5e8f\u5217\uff08\u95ed\u5408\u73af\uff0c\u9996\u5c3e\u9876\u70b9\u76f8\u540c\uff09,\u5f53max_boundary=True,\u5355\u4e2a\u8fb9\u754c\u73af\u6570\u7ec4</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.get_boundary_by_normal_angle","title":"<code>get_boundary_by_normal_angle(angle_threshold=30, max_boundary=True)</code>","text":"<p>\u901a\u8fc7\u76f8\u90bb\u4e09\u89d2\u9762\u6cd5\u7ebf\u5939\u89d2\u8bc6\u522b\u7279\u5f81\u8fb9\u754c\u73af</p> Note <ol> <li>\u8ba1\u7b97\u6240\u6709\u4e09\u89d2\u9762\u7684\u5f52\u4e00\u5316\u6cd5\u5411\u91cf</li> <li>\u904d\u5386\u7f51\u683c\u6240\u6709\u8fb9\uff0c\u7b5b\u9009\u51fa\u76f8\u90bb\u4e24\u9762\u6cd5\u7ebf\u5939\u89d2\u5927\u4e8e\u9608\u503c\u7684\u8fb9\uff08\u7279\u5f81\u8fb9\uff09</li> <li>\u5c06\u7279\u5f81\u8fb9\u8fde\u63a5\u6210\u6709\u5e8f\u5c01\u95ed\u73af</li> </ol> <p>Parameters:</p> Name Type Description Default <code>self</code> <p>\u5fc5\u987b\u4e3a\u6c34\u5bc6\u7f51\u683c;</p> required <code>angle_threshold</code> <p>\u6cd5\u7ebf\u5939\u89d2\u9608\u503c(\u5ea6),\u9ed8\u8ba430\u5ea6;</p> <code>30</code> <code>max_boundary</code> <p>\u662f\u5426\u4ec5\u8fd4\u56de\u6700\u957f\u8fb9\u754c\u73af,\u9ed8\u8ba4True;</p> <code>True</code> <p>Returns:</p> Type Description <p>\u8fb9\u754c\u73af\u9876\u70b9\u7d22\u5f15\u5217\u8868(\u82e5max_boundary=True\u5219\u8fd4\u56de\u5355\u4e2a\u73af)</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.get_boundary_by_ref_normal_angle","title":"<code>get_boundary_by_ref_normal_angle(ref_normal=[0, 0, -1], angle=30)</code>","text":"<p>\u901a\u8fc7\u53c2\u8003\u6cd5\u7ebf\u548c\u89d2\u5ea6\u9608\u503c\u83b7\u53d6\u7f51\u683c\u8fb9\u754c\u9876\u70b9</p> Note <p>\u5c06\u8f93\u5165\u7684\u53c2\u8003\u6cd5\u7ebf\u8f6c\u6362\u4e3a numpy \u6570\u7ec4 \u8ba1\u7b97\u7f51\u683c\u6240\u6709\u9762\u7684\u6cd5\u7ebf\u4e0e\u53c2\u8003\u6cd5\u7ebf\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6 \u7b5b\u9009\u51fa\u4e0e\u53c2\u8003\u6cd5\u7ebf\u5939\u89d2\u5c0f\u4e8e\u9608\u503c\u89d2\u5ea6\u7684\u9762\uff08\u4f59\u5f26\u503c\u5927\u4e8e\u9608\u503c\u89d2\u5ea6\u7684\u4f59\u5f26\u503c\uff09 \u5bf9\u7b5b\u9009\u51fa\u7684\u9762\u8fdb\u884c\u5904\u7406\uff0c\u63d0\u53d6\u5e76\u8fd4\u56de\u5176\u8fb9\u754c\u9876\u70b9</p> <p>Args:</p> <pre><code>self: \u7f51\u683c\u5bf9\u8c61\uff0c\u9700\u5305\u542b\u9762\u6cd5\u7ebf (face_normals)\u3001\u9876\u70b9 (vertices) \u548c\u9762 (faces) \u5c5e\u6027\uff1b\n\nref_normal: \u53c2\u8003\u6cd5\u7ebf\u5411\u91cf\uff0c\u9ed8\u8ba4\u503c\u4e3a [0, 0, -1] \u671d\u5411-z\u65b9\u5411;\n\nangle: \u89d2\u5ea6\u9608\u503c (\u5ea6)\uff0c\u9ed8\u8ba4 30 \u5ea6\uff0c\u7528\u4e8e\u7b5b\u9009\u4e0e\u53c2\u8003\u6cd5\u7ebf\u5939\u89d2\u5c0f\u4e8e\u8be5\u503c\u7684\u9762\uff1b\n</code></pre> <p>Returns:</p> <pre><code>\u8fb9\u754c\u9876\u70b9\u5750\u6807\uff1b\n</code></pre>"},{"location":"api/#utils3d.sindremesh.SindreMesh.get_color_mapping","title":"<code>get_color_mapping(value)</code>","text":"<p>\u5c06\u5411\u91cf\u6620\u5c04\u4e3a\u989c\u8272\uff0c\u9075\u4ecevcg\u6620\u5c04\u6807\u51c6</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.get_curvature","title":"<code>get_curvature()</code>","text":"<p>\u83b7\u53d6\u66f2\u7387</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.get_curvature_meshlab","title":"<code>get_curvature_meshlab()</code>","text":"<p>\u4f7f\u7528MeshLab\u83b7\u53d6\u66f4\u52a0\u7cbe\u786e\u66f2\u7387\uff0c\u81ea\u52a8\u5904\u7406\u975e\u6d41\u5f62\u51e0\u4f55</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.get_near_idx","title":"<code>get_near_idx(query_vertices)</code>","text":"<p>\u83b7\u53d6\u6700\u8fd1\u7d22\u5f15</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.get_texture","title":"<code>get_texture(write_path='texture_uv.png', image_size=(512, 512), uv=None)</code>","text":"<p>\u5c06\u989c\u8272\u8f6c\u6362\u4e3a\u7eb9\u7406\u8d34\u56fe,  Mesh([v, f]).texture(write_path,uv)</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.get_unused_vertices","title":"<code>get_unused_vertices()</code>","text":"<p>\u83b7\u53d6\u672a\u4f7f\u7528\u9876\u70b9\u7684\u7d22\u5f15</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.get_uv","title":"<code>get_uv(return_circle=False)</code>  <code>cached</code>","text":"<p>\u83b7\u53d6uv\u6620\u5c04 \u4e0e\u9876\u70b9\u4e00\u81f4(npoinst,2)</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.homogenize","title":"<code>homogenize(n=10000)</code>","text":"<p>\u5747\u5300\u5316\u7f51\u683c\u5230\u6307\u5b9a\u70b9\u6570\uff0c\u91c7\u7528\u805a\u7c7b</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.load","title":"<code>load(load_path)</code>","text":"<p>\u8bfb\u53d6(.sm .smesh)\u6587\u4ef6</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.print_o3d","title":"<code>print_o3d()</code>","text":"<p>\u4f7f\u7528open3d\u7f51\u683c\u8d28\u91cf\u68c0\u6d4b</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.rotate_xyz","title":"<code>rotate_xyz(angles_xyz, return_mat=False)</code>","text":"<p>\u6309\u7167\u7ed9\u5b9axyz\u89d2\u5ea6\u5217\u8868\u8fdb\u884cxyz\u5bf9\u5e94\u65cb\u8f6c</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.sample","title":"<code>sample(density=1, num_samples=None)</code>","text":"<p>\u7f51\u683c\u8868\u9762\u4e0a\u8fdb\u884c\u70b9\u4e91\u91cd\u91c7\u6837 Args:     density (float, \u53ef\u9009): \u6bcf\u5355\u4f4d\u9762\u79ef\u7684\u91c7\u6837\u70b9\u6570\uff0c\u9ed8\u8ba4\u4e3a1     num_samples (int, \u53ef\u9009): \u6307\u5b9a\u603b\u91c7\u6837\u70b9\u6570N\uff0c\u82e5\u63d0\u4f9b\u5219\u5ffd\u7565density\u53c2\u6570</p> <p>Returns:</p> Type Description <p>numpy.ndarray: \u91cd\u91c7\u6837\u540e\u7684\u70b9\u4e91\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(N, 3)\uff0cN\u4e3a\u603b\u91c7\u6837\u70b9\u6570</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.save","title":"<code>save(write_path)</code>","text":"<p>\u4fdd\u5b58mesh,pickle(.sm .smesh),\u5176\u4ed6\u7531vedo\u652f\u6301</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.scale_xyz","title":"<code>scale_xyz(dxdydz)</code>","text":"<p>\u7f29\u653exyz\u6307\u5b9a\u91cf,\u652f\u6301\u8f93\u51653\u4e2a\u5411\u91cf\u548c1\u4e2a\u5411\u91cf</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.set_vertex_labels","title":"<code>set_vertex_labels(vertex_labels)</code>","text":"<p>\u8bbe\u7f6e\u9876\u70b9labels,\u5e76\u81ea\u52a8\u6e32\u67d3\u989c\u8272</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.shift_xyz","title":"<code>shift_xyz(dxdydz)</code>","text":"<p>\u5e73\u79fbxyz\u6307\u5b9a\u91cf,\u652f\u6301\u8f93\u51653\u4e2a\u5411\u91cf\u548c1\u4e2a\u5411\u91cf</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.show","title":"<code>show(show_append=[], labels=None, exclude_list=[0], create_axes=True, return_vedo_obj=False)</code>","text":"<p>\u6e32\u67d3\u5c55\u793a\u7f51\u683c\u6570\u636e\uff0c\u5e76\u6839\u636e\u6807\u7b7e\u6dfb\u52a0\u6807\u8bb0\u548c\u5750\u6807\u8f74\u3002</p> <p>Parameters:</p> Name Type Description Default <code>show_append</code> <code>list) </code> <p>\u9700\u8981\u4e00\u8d77\u6e32\u67d3\u7684vedo\u5c5e\u6027</p> <code>[]</code> <code>labels</code> <code>ndarray</code> <p>\u7f51\u683c\u9876\u70b9\u7684\u6807\u7b7e\u6570\u7ec4\uff0c\u9ed8\u8ba4\u4e3aNone\u3002\u5982\u679c\u63d0\u4f9b\uff0c\u5c06\u6839\u636e\u6807\u7b7e\u4e3a\u9876\u70b9\u7740\u8272\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u975e\u6392\u9664\u6807\u7b7e\u6dfb\u52a0\u6807\u8bb0\u3002</p> <code>None</code> <code>exclude_list</code> <code>list</code> <p>\u8981\u6392\u9664\u7684\u6807\u7b7e\u5217\u8868\uff0c\u9ed8\u8ba4\u4e3a[0]\u3002\u5217\u8868\u4e2d\u7684\u6807\u7b7e\u5bf9\u5e94\u7684\u6807\u8bb0\u4e0d\u4f1a\u88ab\u663e\u793a\u3002</p> <code>[0]</code> <code>create_axes</code> <p>\u662f\u5426\u5f3a\u5236\u7ed8\u5236\u4e16\u754c\u5750\u6807\u7cfb\u3002</p> <code>True</code> <code>return_vedo_obj</code> <p>\u662f\u5426\u8fd4\u56devedo\u663e\u793a\u5bf9\u8c61\u5217\u8868\uff1b</p> <code>False</code> <p>Returns:</p> Name Type Description <code>None</code> <p>\u8be5\u65b9\u6cd5\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u76f4\u63a5\u8fdb\u884c\u6e32\u67d3\u5c55\u793a\u3002</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.split_component","title":"<code>split_component()</code>","text":"<p>\u5c06\u7f51\u683c\u6309\u7167\u8fde\u901a\u5206\u91cf\u5206\u5272,\u5e76\u8fd4\u56de\u6700\u5927\u548c\u5176\u4f59\u8fde\u901a\u5206\u91cf\u7684\u9876\u70b9\u7d22\u5f15</p> <p>Returns:</p> Name Type Description <code>tuple</code> <p>\u5305\u542b\u4e09\u4e2a\u6570\u7ec4\u7684\u5143\u7ec4 - \u7b2c\u4e00\u4e2a\u5143\u7d20: \u8fde\u901a\u5206\u91cf\u6570\u91cf - \u7b2c\u4e8c\u4e2a\u5143\u7d20: \u6700\u5927\u8fde\u901a\u5206\u91cf\u7684\u8282\u70b9\u7d22\u5f15 - \u7b2c\u4e09\u4e2a\u5143\u7d20: \u5269\u4f59\u90e8\u5206\u7684\u8282\u70b9\u7d22\u5f15\uff08\u5373\u975e\u6700\u5927\u8fde\u901a\u5206\u91cf\u7684\u6240\u6709\u8282\u70b9\uff09</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.subdivison","title":"<code>subdivison(face_mask, iterations=3, method='mid')</code>","text":"<p>\u5c40\u90e8\u7ec6\u5206</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.texture2colors","title":"<code>texture2colors(image_path='texture_uv.png', uv=None)</code>","text":"<p>\u5c06\u7eb9\u7406\u8d34\u56fe\u8f6c\u6362\u6210\u9876\u70b9\u989c\u8272</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.to_pytorch3d","title":"<code>to_pytorch3d(device='cpu')</code>","text":"<p>\u8f6c\u6362\u6210pytorch3d\u5f62\u5f0f</p> <p>Returns:</p> Name Type Description <code>mesh</code> <p>pytorch3d\u7c7b\u578bmesh</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.to_torch","title":"<code>to_torch(device='cpu')</code>","text":"<p>\u5c06\u9876\u70b9&amp;\u9762\u7247\u8f6c\u6362\u6210torch\u5f62\u5f0f</p> <p>Returns:</p> Type Description <p>vertices,faces,vertex_normals,vertex_colors: \u9876\u70b9\uff0c\u9762\u7247,\u6cd5\u7ebf\uff0c\u989c\u8272\uff08\u6ca1\u6709\u5219\u4e3aNone)</p>"},{"location":"api/#utils3d.sindremesh.SindreMesh.update_geometry","title":"<code>update_geometry(new_vertices, new_faces=None)</code>","text":"<p>\u66f4\u65b0\u7f51\u683c\u7684\u51e0\u4f55\u7ed3\u6784\uff08\u9876\u70b9\u548c\u9762\u7247\uff09\uff0c\u5e76\u901a\u8fc7\u6700\u8fd1\u90bb\u7b97\u6cd5\u5c06\u539f\u6709\u7684\u9876\u70b9\u5c5e\u6027\u6620\u5c04\u5230\u65b0\u9876\u70b9\u4e0a\u3002</p> <p>\u9002\u7528\u4e8e\u5728\u4fdd\u6301\u7f51\u683c\u62d3\u6251\u7ed3\u6784\u57fa\u672c\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u7f51\u683c\u8fdb\u884c\u53d8\u5f62\uff0c\u7ec6\u5316\uff0c\u7b80\u5316\u7684\u573a\u666f\u3002</p> <p>Parameters:</p> Name Type Description Default <code>new_vertices</code> <p>\u5f62\u72b6\u4e3a(N,3)\u7684\u6d6e\u70b9\u578b\u6570\u7ec4\uff0c\u8868\u793a\u65b0\u7684\u9876\u70b9\u5750\u6807</p> required <code>new_faces</code> <p>\u53ef\u9009\u53c2\u6570\uff0c\u5f62\u72b6\u4e3a(M,3)\u7684\u6574\u6570\u578b\u6570\u7ec4\uff0c\u8868\u793a\u65b0\u7684\u9762\u7247\u7d22\u5f15</p> <code>None</code> notes <ul> <li>\u5f53\u65b0\u9876\u70b9\u6570\u91cf\u4e0e\u539f\u9876\u70b9\u6570\u91cf\u4e0d\u540c\u65f6\uff0c\u539f\u9876\u70b9\u5c5e\u6027\u4f1a\u6839\u636e\u6700\u8fd1\u90bb\u5173\u7cfb\u8fdb\u884c\u6620\u5c04</li> <li>\u5982\u679c\u672a\u63d0\u4f9b\u65b0\u7684\u9762\u7247\u4fe1\u606f\uff0c\u51fd\u6570\u4f1a\u5c1d\u8bd5\u6839\u636e\u65e7\u9762\u7247\u548c\u9876\u70b9\u6620\u5c04\u5173\u7cfb\u91cd\u5efa\u9762\u7247</li> </ul>"},{"location":"api/#utils3d.vedo_tools.matrix3d_by_vedo","title":"<code>matrix3d_by_vedo</code>","text":"<p>               Bases: <code>Plotter</code></p> <p>Generate a rendering window with slicing planes for the input Volume.</p>"},{"location":"api/#utils3d.vedo_tools.matrix3d_by_vedo.__init__","title":"<code>__init__(data, cmaps=('gist_ncar_r', 'hot_r', 'bone', 'bone_r', 'jet', 'Spectral_r'), clamp=True, show_histo=True, show_icon=True, draggable=False, at=0, **kwargs)</code>","text":"<p>Generate a rendering window with slicing planes for the input Volume.</p> <p>Parameters:</p> Name Type Description Default <code>cmaps</code> <p>(list) list of color maps names to cycle when clicking button</p> <code>('gist_ncar_r', 'hot_r', 'bone', 'bone_r', 'jet', 'Spectral_r')</code> <code>clamp</code> <p>(bool) clamp scalar range to reduce the effect of tails in color mapping</p> <code>True</code> <code>use_slider3d</code> <p>(bool) show sliders attached along the axes</p> required <code>show_histo</code> <p>(bool) show histogram on bottom left</p> <code>True</code> <code>show_icon</code> <p>(bool) show a small 3D rendering icon of the volume</p> <code>True</code> <code>draggable</code> <p>(bool) make the 3D icon draggable</p> <code>False</code> <code>at</code> <p>(int) subwindow number to plot to</p> <code>0</code> <code>**kwargs</code> <p>(dict) keyword arguments to pass to Plotter.</p> <code>{}</code> <p>Examples:</p> <ul> <li>slicer1.py</li> </ul> <p></p>"},{"location":"api/#utils3d.vedo_tools.show_matrix_by_vedo","title":"<code>show_matrix_by_vedo(data)</code>","text":"<p>\u7528vedo\u6e32\u67d3\u77e9\u9635</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ndarray</code> <p>\u8f93\u5165\u76842d/3d\u6570\u7ec4\uff1b</p> required"},{"location":"api/#api_2","title":"\u795e\u7ecf\u7f51\u7edcAPI","text":"<p>Point Transformer V3 \u6a21\u578b\u5b9e\u73b0 \u7528\u4e8e\u70b9\u4e91\u5904\u7406\u7684\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\uff0c\u652f\u6301\u5e8f\u5217\u5316\u6ce8\u610f\u529b\u673a\u5236\u3001\u7a00\u758f\u5377\u79ef\u548c\u591a\u79cd\u7a7a\u95f4\u7f16\u7801\u65b9\u6cd5</p> <p>\u5173\u952e\u7279\u6027: - \u652f\u6301Z\u5e8f\u548c\u5e0c\u5c14\u4f2f\u7279\u66f2\u7ebf\u7f16\u7801\uff0c\u4fdd\u6301\u7a7a\u95f4\u5c40\u90e8\u6027 - \u4f7f\u7528\u7a00\u758f\u5377\u79ef(spconv)\u5904\u7406\u5927\u89c4\u6a21\u70b9\u4e91 - \u96c6\u6210Flash Attention\u52a0\u901f\u6ce8\u610f\u529b\u8ba1\u7b97 - \u6a21\u5757\u5316\u8bbe\u8ba1\uff0c\u5305\u542b\u53ef\u5806\u53e0\u7684Transformer\u5757</p> <p>\u4f5c\u8005: Xiaoyang Wu (xiaoyang.wu.cs@gmail.com) \u4f9d\u8d56: addict, spconv, torch_scatter, flash_attn(\u53ef\u9009)</p> <p>\u7ed3\u5408gridsample\u548cconv3d\u5904\u7406\u70b9\u4e91\u6570\u636e - anchor\u7684\u6587\u7ae0 - \u77e5\u4e4e https://zhuanlan.zhihu.com/p/1894179743487743623</p> <p>\u6838\u5fc3\u5b9e\u73b0\u601d\u8def     \u4f53\u7d20\u5316\u9884\u5904\u7406\uff1a\u5c06\u65e0\u5e8f\u70b9\u4e91\u6620\u5c04\u5230\u89c4\u5219\u7f51\u683c     \u7279\u5f81\u63d0\u53d6\uff1a\u63d0\u53d6\u4f53\u7d20\u5c40\u90e8\u51e0\u4f55\u7279\u5f81     \u52a8\u6001\u7f51\u683c\u91c7\u6837\uff1a\u9884\u6d4b\u504f\u79fb\u91cf\u8fdb\u884c\u7279\u5f81\u91cd\u91c7\u6837     \u7f51\u683c\u91cd\u5efa\uff1a\u751f\u6210\u89c4\u5219\u62d3\u6251\u7ed3\u6784</p> <p>\u5173\u952e\u5b9e\u73b0\u8bf4\u660e     \u4f53\u7d20\u5316\u6a21\u5757\uff1a     \u4f7f\u75283D\u76f4\u65b9\u56fe\u7edf\u8ba1\u70b9\u4e91\u5206\u5e03     \u5f52\u4e00\u5316\u5750\u6807\u5230[-1,1]\u533a\u95f4     \u8f93\u51fa\u4f53\u7d20\u5bc6\u5ea6\u56fe     \u52a8\u6001\u91c7\u6837\u5668\uff1a     \u901a\u8fc73D\u5377\u79ef\u9884\u6d4b\u6bcf\u4e2a\u4f53\u7d20\u7684\u504f\u79fb\u91cf     \u5bf9\u57fa\u7840\u7f51\u683c\u8fdb\u884c\u975e\u7ebf\u6027\u5f62\u53d8     grid_sample\u5b9e\u73b0\u7279\u5f81\u91cd\u91c7\u6837     \u7f51\u683c\u751f\u6210\uff1a     \u89e3\u7801\u5668\u8f93\u51fa\u4f53\u7d20\u5360\u7528\u6982\u7387     \u7ed3\u5408Marching Cubes\u7b97\u6cd5\u751f\u6210\u4e09\u89d2\u9762\u7247\uff08\u9700\u914d\u5408PyMCubes\u7b49\u5e93\uff09</p> <p>\u6027\u80fd\u4f18\u5316\u6280\u5de7     \u7a00\u758f\u4f53\u7d20\u5904\u7406\uff1a     # \u4f7f\u7528\u7a00\u758f\u5f20\u91cf\u52a0\u901f\u8ba1\u7b97     sparse_voxel = voxel.to_sparse()     \u591a\u5c3a\u5ea6\u7279\u5f81\u878d\u5408\uff1a     # \u6dfb\u52a0\u591a\u5c3a\u5ea6\u91c7\u6837\u8def\u5f84     self.sampler2 = DynamicGridSampler(64, 3)     \u81ea\u9002\u5e94\u7f51\u683c\u5bc6\u5ea6\uff1a     # \u6839\u636e\u70b9\u5bc6\u5ea6\u8c03\u6574\u7f51\u683c\u5206\u8fa8\u7387     adaptive_grid_size = int(points.std() * 64)</p>"},{"location":"api/#utils3d.networks.point_transformerV3--needed-pkgs-addict-flash_attn-requires-cudarecommended-spconv-requires-cuda-toolkit-torch_scatter-torch-version-specific","title":"Needed Pkgs: addict, flash_attn (requires CUDA)(recommended), spconv (requires CUDA toolkit), torch_scatter (torch version specific)","text":""},{"location":"api/#utils3d.networks.point_transformerV3--flash-attn-is-not-used-in-this-test","title":"flash attn is not used in this test","text":""},{"location":"api/#utils3d.networks.point_transformerV3--pip-install-addict-spconv-cuda-torch-scatter-f-httpsdatapygorgwhltorch-240cudahtml","title":"pip install addict spconv-${CUDA} torch-scatter -f https://data.pyg.org/whl/torch-2.4.0+${CUDA}.html","text":""},{"location":"api/#utils3d.networks.point_transformerV3--cuda-is-the-cuda-version-of-your-machine-eg-cu124-for-cuda-124-or-cpu-for-cpu","title":"${CUDA} is the CUDA version of your machine, e.g. cu124 for CUDA 12.4 OR cpu for cpu","text":""},{"location":"api/#utils3d.networks.point_transformerV3.DropPath","title":"<code>DropPath</code>","text":"<p>               Bases: <code>Module</code></p> <p>Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).</p>"},{"location":"api/#utils3d.networks.point_transformerV3.Point","title":"<code>Point</code>","text":"<p>               Bases: <code>Dict</code></p> <p>Point Structure of Pointcept</p> <p>A Point (point cloud) in Pointcept is a dictionary that contains various properties of a batched point cloud. The property with the following names have a specific definition as follows:</p> <ul> <li>\"coord\": original coordinate of point cloud;</li> <li>\"grid_coord\": grid coordinate for specific grid size (related to GridSampling); Point also support the following optional attributes:</li> <li>\"offset\": if not exist, initialized as batch size is 1;</li> <li>\"batch\": if not exist, initialized as batch size is 1;</li> <li>\"feat\": feature of point cloud, default input of model;</li> <li>\"grid_size\": Grid size of point cloud (related to GridSampling); (related to Serialization)</li> <li>\"serialized_depth\": depth of serialization, 2 ** depth * grid_size describe the maximum of point cloud range;</li> <li>\"serialized_code\": a list of serialization codes;</li> <li>\"serialized_order\": a list of serialization order determined by code;</li> <li>\"serialized_inverse\": a list of inverse mapping determined by code; (related to Sparsify: SpConv)</li> <li>\"sparse_shape\": Sparse shape for Sparse Conv Tensor;</li> <li>\"sparse_conv_feat\": SparseConvTensor init with information provide by Point;</li> </ul>"},{"location":"api/#utils3d.networks.point_transformerV3.Point.serialization","title":"<code>serialization(order='z', depth=None, shuffle_orders=False)</code>","text":"<p>\u7a7a\u95f4\u7f16\u7801\u5e8f\u5217\u5316\uff08\u652f\u6301Z\u5e8f\u548c\u5e0c\u5c14\u4f2f\u7279\u66f2\u7ebf\uff09</p> <p>relay on [\"grid_coord\" or \"coord\" + \"grid_size\", \"batch\", \"feat\"]</p>"},{"location":"api/#utils3d.networks.point_transformerV3.Point.sparsify","title":"<code>sparsify(pad=96)</code>","text":"<p>\u8f6c\u6362\u4e3a\u7a00\u758f\u5377\u79ef\u5f20\u91cf</p> <p>Point cloud is sparse, here we use \"sparsify\" to specifically refer to preparing \"spconv.SparseConvTensor\" for SpConv.</p> <p>relay on [\"grid_coord\" or \"coord\" + \"grid_size\", \"batch\", \"feat\"]</p> <p>pad: padding sparse for sparse shape.</p>"},{"location":"api/#utils3d.networks.point_transformerV3.PointModule","title":"<code>PointModule</code>","text":"<p>               Bases: <code>Module</code></p> <p>\u70b9\u4e91\u5904\u7406\u6a21\u5757\u57fa\u7c7b\uff0c\u6240\u6709\u81ea\u5b9a\u4e49\u6a21\u5757\u5e94\u7ee7\u627f\u6b64\u7c7b</p>"},{"location":"api/#utils3d.networks.point_transformerV3.PointSequential","title":"<code>PointSequential</code>","text":"<p>               Bases: <code>PointModule</code></p> <p>A sequential container. Modules will be added to it in the order they are passed in the constructor. Alternatively, an ordered dict of modules can also be passed in.</p>"},{"location":"api/#utils3d.networks.point_transformerV3.PointTransformerV3","title":"<code>PointTransformerV3</code>","text":"<p>               Bases: <code>PointModule</code></p>"},{"location":"api/#utils3d.networks.point_transformerV3.PointTransformerV3.forward","title":"<code>forward(x, p)</code>","text":"<p>PyTorch\u524d\u5411\u4f20\u64ad\u51fd\u6570\uff0c\u7528\u4e8e\u5904\u7406\u70b9\u4e91\u6570\u636e\u7684\u7279\u5f81\u63d0\u53d6\u4e0e\u53d8\u6362\u3002</p> <p>\u8be5\u51fd\u6570\u4e3b\u8981\u5b9e\u73b0\u4ee5\u4e0b\u529f\u80fd\uff1a 1. \u5c06\u8f93\u5165\u6570\u636e\u6253\u5305\u4e3a\u70b9\u4e91\u5904\u7406\u5e93\u8981\u6c42\u7684data_dict\u683c\u5f0f 2. \u8fdb\u884c\u70b9\u4e91\u5e8f\u5217\u5316/\u7a00\u758f\u5316\u9884\u5904\u7406 3. \u901a\u8fc7\u5d4c\u5165\u5c42\u3001\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u5904\u7406\u7279\u5f81 4. \u6700\u7ec8\u8fd4\u56de\u4e0e\u8f93\u5165\u5f62\u72b6\u5339\u914d\u7684\u7279\u5f81\u5f20\u91cf</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Tensor</code> <p>\u8f93\u5165\u7279\u5f81\u5f20\u91cf\uff0c\u5f62\u72b6\u5e94\u4e3a(batch_size, num_points, feat_dim)</p> required <code>p</code> <code>Tensor</code> <p>\u70b9\u4e91\u5750\u6807\u6570\u636e\uff0c\u5f62\u72b6\u5e94\u4e3a(batch_size, num_points, 2)\uff0c\u5047\u8bbe\u4e3a\u4e8c\u7ef4\u5750\u6807</p> required <p>Returns:</p> Type Description <p>torch.Tensor: \u8f93\u51fa\u7279\u5f81\u5f20\u91cf\uff0c\u5f62\u72b6\u4e0e\u8f93\u5165x\u4fdd\u6301\u4e00\u81f4</p> Notes <p>\u4f7f\u7528Pointcept\u5e93\u5904\u7406\u70b9\u4e91\u6570\u636e\uff0c\u9700\u8981\u6784\u9020\u5305\u542b\u4ee5\u4e0b\u5173\u952e\u5c5e\u6027\u7684data_dict\uff1a - feat: \u5c55\u5e73\u540e\u7684\u7279\u5f81\u77e9\u9635 - batch: \u6279\u6b21\u6570\u76ee\u7d22\u5f15 - coord: \u5305\u542b\u4e09\u7ef4\u5750\u6807\uff08\u6dfb\u52a0z\u8f74\u96f6\u503c\uff09\u7684\u5c55\u5e73\u5750\u6807 - grid_size: \u4f53\u7d20\u5316\u7f51\u683c\u5c3a\u5bf8</p>"},{"location":"api/#utils3d.networks.point_transformerV3.batch2offset","title":"<code>batch2offset(batch)</code>","text":"<p>\u6279\u6b21\u7d22\u5f15\u8f6c\u504f\u79fb\u91cf</p>"},{"location":"api/#utils3d.networks.point_transformerV3.binary2gray","title":"<code>binary2gray(binary, axis=-1)</code>","text":"<p>Convert an array of binary values into Gray codes.</p> <p>This uses the classic X ^ (X &gt;&gt; 1) trick to compute the Gray code.</p> <p>binary: An ndarray of binary values.</p> <p>axis: The axis along which to compute the gray code. Default=-1.</p> <p>Returns an ndarray of Gray codes.</p>"},{"location":"api/#utils3d.networks.point_transformerV3.gray2binary","title":"<code>gray2binary(gray, axis=-1)</code>","text":"<p>Convert an array of Gray codes back into binary values.</p> <p>gray: An ndarray of gray codes.</p> <p>axis: The axis along which to perform Gray decoding. Default=-1.</p> <p>Returns an ndarray of binary values.</p>"},{"location":"api/#utils3d.networks.point_transformerV3.key2xyz","title":"<code>key2xyz(key, depth=16)</code>","text":"<p>Decodes the shuffled key to :attr:<code>x</code>, :attr:<code>y</code>, :attr:<code>z</code> coordinates and the batch index based on pre-computed look up tables.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Tensor</code> <p>The shuffled key.</p> required <code>depth</code> <code>int</code> <p>The depth of the shuffled key, and must be smaller than 17 (&lt; 17).</p> <code>16</code>"},{"location":"api/#utils3d.networks.point_transformerV3.offset2batch","title":"<code>offset2batch(offset)</code>","text":"<p>\u504f\u79fb\u91cf\u8f6c\u6279\u6b21\u7d22\u5f15</p>"},{"location":"api/#utils3d.networks.point_transformerV3.offset2bincount","title":"<code>offset2bincount(offset)</code>","text":"<p>\u5c06\u504f\u79fb\u91cf\u8f6c\u6362\u4e3a\u5404\u6279\u6b21\u70b9\u7684\u6570\u91cf</p>"},{"location":"api/#utils3d.networks.point_transformerV3.right_shift","title":"<code>right_shift(binary, k=1, axis=-1)</code>","text":"<p>Right shift an array of binary values.</p> <p>binary: An ndarray of binary values.</p> <p>k: The number of bits to shift. Default 1.</p> <p>axis: The axis along which to shift.  Default -1.</p> <p>Returns an ndarray with zero prepended and the ends truncated, along  whatever axis was specified.</p>"},{"location":"api/#utils3d.networks.point_transformerV3.xyz2key","title":"<code>xyz2key(x, y, z, b=None, depth=16)</code>","text":"<p>Encodes :attr:<code>x</code>, :attr:<code>y</code>, :attr:<code>z</code> coordinates to the shuffled keys based on pre-computed look up tables. The speed of this function is much faster than the method based on for-loop.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Tensor</code> <p>The x coordinate.</p> required <code>y</code> <code>Tensor</code> <p>The y coordinate.</p> required <code>z</code> <code>Tensor</code> <p>The z coordinate.</p> required <code>b</code> <code>Tensor or int</code> <p>The batch index of the coordinates, and should be   smaller than 32768. If :attr:<code>b</code> is :obj:<code>torch.Tensor</code>, the size of   :attr:<code>b</code> must be the same as :attr:<code>x</code>, :attr:<code>y</code>, and :attr:<code>z</code>.</p> <code>None</code> <code>depth</code> <code>int</code> <p>The depth of the shuffled key, and must be smaller than 17 (&lt; 17).</p> <code>16</code>"},{"location":"api/#utils3d.networks.conv_occ.ConvPointnet","title":"<code>ConvPointnet</code>","text":"<p>               Bases: <code>Module</code></p> <p>\u57fa\u4e8ePointNet\u7684\u7f16\u7801\u5668\u7f51\u7edc\uff0c\u6bcf\u4e2a\u70b9\u4f7f\u7528ResNet\u5757\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\u3002</p> <p>Parameters:</p> Name Type Description Default <code>c_dim</code> <code>int</code> <p>\u6f5c\u5728\u4ee3\u7801c\u7684\u7ef4\u5ea6\uff08\u9ed8\u8ba4512\uff09</p> <code>512</code> <code>dim</code> <code>int</code> <p>\u8f93\u5165\u70b9\u7684\u7ef4\u5ea6\uff08\u9ed8\u8ba43\uff09</p> <code>3</code> <code>hidden_dim</code> <code>int</code> <p>\u7f51\u7edc\u9690\u85cf\u5c42\u7ef4\u5ea6\uff08\u9ed8\u8ba4128\uff09</p> <code>128</code> <code>scatter_type</code> <code>str</code> <p>\u5c40\u90e8\u6c60\u5316\u65f6\u7684\u7279\u5f81\u805a\u5408\u65b9\u5f0f\uff08'max'\u6216'mean'\uff09</p> <code>'max'</code> <code>unet</code> <code>bool</code> <p>\u662f\u5426\u4f7f\u7528UNet\u7ed3\u6784\u5904\u7406\u5e73\u9762\u7279\u5f81\uff08\u9ed8\u8ba4True\uff09</p> <code>True</code> <code>unet_kwargs</code> <code>dict</code> <p>UNet\u53c2\u6570\u914d\u7f6e\uff08\u9ed8\u8ba4\u6df1\u5ea64\uff0c\u5408\u5e76\u65b9\u5f0fconcat\uff09</p> <code>{'depth': 4, 'merge_mode': 'concat', 'start_filts': 32}</code> <code>plane_resolution</code> <code>int</code> <p>\u5e73\u9762\u7279\u5f81\u5206\u8fa8\u7387\uff08\u9ed8\u8ba464\uff09</p> <code>64</code> <code>plane_type</code> <code>str</code> <p>\u7279\u5f81\u7c7b\u578b\uff08'xz'\u5355\u5e73\u9762\uff0c['xz','xy','yz']\u4e09\u5e73\u9762\uff0c['grid']3D\u7f51\u683c\uff09</p> <code>['xz', 'xy', 'yz']</code> <code>padding</code> <code>float</code> <p>\u5750\u6807\u5f52\u4e00\u5316\u65f6\u7684\u586b\u5145\u7cfb\u6570\uff08\u9ed8\u8ba40.1\uff09</p> <code>0.1</code> <code>n_blocks</code> <code>int</code> <p>ResNet\u5757\u6570\u91cf\uff08\u9ed8\u8ba45\uff09</p> <code>5</code> <code>inject_noise</code> <code>bool</code> <p>\u662f\u5426\u6ce8\u5165\u566a\u58f0\uff08\u9ed8\u8ba4False\uff09</p> <code>False</code>"},{"location":"api/#utils3d.networks.conv_occ.ConvPointnet.coordinate2index","title":"<code>coordinate2index(x, reso)</code>","text":"<p>\u5c06\u5f52\u4e00\u5316\u5750\u6807\u8f6c\u6362\u4e3a\u7f51\u683c\u7d22\u5f15</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Tensor</code> <p>\u5f52\u4e00\u5316\u5750\u6807 (B, T, 2)</p> required <code>reso</code> <code>int</code> <p>\u7f51\u683c\u5206\u8fa8\u7387</p> required <p>Returns:</p> Name Type Description <code>Tensor</code> <p>\u7f51\u683c\u7d22\u5f15 (B, 1, T)</p>"},{"location":"api/#utils3d.networks.conv_occ.ConvPointnet.forward","title":"<code>forward(p, query)</code>","text":"<p>\u524d\u5411\u4f20\u64ad\u4e3b\u51fd\u6570</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Tensor</code> <p>\u8f93\u5165\u70b9\u4e91 (B, T, 3)</p> required <code>query</code> <code>Tensor</code> <p>\u67e5\u8be2\u70b9\u5750\u6807 (B, Q, 3)</p> required <p>Returns:</p> Name Type Description <code>Tensor</code> <p>\u805a\u5408\u540e\u7684\u7279\u5f81 (B, Q, c_dim)</p>"},{"location":"api/#utils3d.networks.conv_occ.ConvPointnet.generate_plane_features","title":"<code>generate_plane_features(p, c, plane='xz')</code>","text":"<p>\u751f\u6210\u6307\u5b9a\u5e73\u9762\u7684\u7279\u5f81\u56fe</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Tensor</code> <p>\u8f93\u5165\u70b9\u4e91 (B, T, 3)</p> required <code>c</code> <code>Tensor</code> <p>\u70b9\u4e91\u7279\u5f81 (B, T, c_dim)</p> required <code>plane</code> <code>str</code> <p>\u5e73\u9762\u7c7b\u578b ('xz','xy','yz')</p> <code>'xz'</code> <p>Returns:</p> Name Type Description <code>Tensor</code> <p>\u5e73\u9762\u7279\u5f81\u56fe (B, c_dim, reso, reso)</p>"},{"location":"api/#utils3d.networks.conv_occ.ConvPointnet.normalize_coordinate","title":"<code>normalize_coordinate(p, padding=0.1, plane='xz')</code>","text":"<p>\u5750\u6807\u5f52\u4e00\u5316\u5230[0,1]\u8303\u56f4</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Tensor</code> <p>\u8f93\u5165\u5750\u6807 (B, T, 3)</p> required <code>padding</code> <code>float</code> <p>\u586b\u5145\u7cfb\u6570</p> <code>0.1</code> <code>plane</code> <code>str</code> <p>\u5e73\u9762\u7c7b\u578b</p> <code>'xz'</code> <p>Returns:</p> Name Type Description <code>Tensor</code> <p>\u5f52\u4e00\u5316\u5750\u6807 (B, T, 2)</p>"},{"location":"api/#utils3d.networks.conv_occ.ConvPointnet.pool_local","title":"<code>pool_local(xy, index, c)</code>","text":"<p>\u5c40\u90e8\u7279\u5f81\u6c60\u5316\u64cd\u4f5c</p> <p>Parameters:</p> Name Type Description Default <code>xy</code> <code>dict</code> <p>\u5404\u5e73\u9762\u5f52\u4e00\u5316\u5750\u6807</p> required <code>index</code> <code>dict</code> <p>\u5404\u5e73\u9762\u7f51\u683c\u7d22\u5f15</p> required <code>c</code> <code>Tensor</code> <p>\u70b9\u4e91\u7279\u5f81 (B, T, c_dim)</p> required <p>Returns:</p> Name Type Description <code>Tensor</code> <p>\u6c60\u5316\u540e\u7684\u7279\u5f81 (B, T, c_dim)</p>"},{"location":"api/#utils3d.networks.conv_occ.ConvPointnet.sample_plane_feature","title":"<code>sample_plane_feature(query, plane_feature, plane)</code>","text":"<p>\u4ece\u5e73\u9762\u7279\u5f81\u56fe\u91c7\u6837\u7279\u5f81\u503c</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Tensor</code> <p>\u67e5\u8be2\u70b9\u5750\u6807 (B, Q, 3)</p> required <code>plane_feature</code> <code>Tensor</code> <p>\u5e73\u9762\u7279\u5f81\u56fe (B, c_dim, reso, reso)</p> required <code>plane</code> <code>str</code> <p>\u5e73\u9762\u7c7b\u578b</p> required <p>Returns:</p> Name Type Description <code>Tensor</code> <p>\u91c7\u6837\u540e\u7684\u7279\u5f81 (B, Q, c_dim)</p>"},{"location":"api/#utils3d.networks.conv_occ.DownConv","title":"<code>DownConv</code>","text":"<p>               Bases: <code>Module</code></p> <p>\u4e0b\u91c7\u6837\u5377\u79ef\u5757\uff08Conv+ReLU+Conv+ReLU+MaxPool\uff09</p>"},{"location":"api/#utils3d.networks.conv_occ.ResnetBlockFC","title":"<code>ResnetBlockFC</code>","text":"<p>               Bases: <code>Module</code></p> <p>\u5168\u8fde\u63a5ResNet\u5757</p> <p>Parameters:</p> Name Type Description Default <code>size_in</code> <code>int</code> <p>\u8f93\u5165\u7ef4\u5ea6</p> required <code>size_out</code> <code>int</code> <p>\u8f93\u51fa\u7ef4\u5ea6</p> <code>None</code> <code>size_h</code> <code>int</code> <p>\u9690\u85cf\u5c42\u7ef4\u5ea6</p> <code>None</code>"},{"location":"api/#utils3d.networks.conv_occ.UNet","title":"<code>UNet</code>","text":"<p>               Bases: <code>Module</code></p> <p>\u4e8c\u7ef4UNet\u7f51\u7edc\u7ed3\u6784\uff0c\u7528\u4e8e\u5e73\u9762\u7279\u5f81\u5904\u7406</p> <p>Parameters:</p> Name Type Description Default <code>num_classes</code> <code>int</code> <p>\u8f93\u51fa\u901a\u9053\u6570</p> required <code>in_channels</code> <code>int</code> <p>\u8f93\u5165\u901a\u9053\u6570</p> <code>3</code> <code>depth</code> <code>int</code> <p>\u7f51\u7edc\u6df1\u5ea6</p> <code>5</code> <code>start_filts</code> <code>int</code> <p>\u521d\u59cb\u5377\u79ef\u6838\u6570\u91cf</p> <code>64</code> <code>up_mode</code> <code>str</code> <p>\u4e0a\u91c7\u6837\u65b9\u5f0f ('transpose'\u6216'upsample')</p> <code>'transpose'</code> <code>same_channels</code> <code>bool</code> <p>\u662f\u5426\u4fdd\u6301\u901a\u9053\u6570\u4e0d\u53d8</p> <code>False</code> <code>merge_mode</code> <code>str</code> <p>\u7279\u5f81\u878d\u5408\u65b9\u5f0f ('concat'\u6216'add')</p> <code>'concat'</code>"},{"location":"api/#utils3d.networks.conv_occ.UNet.forward","title":"<code>forward(x)</code>","text":"<p>\u524d\u5411\u4f20\u64ad</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Tensor</code> <p>\u8f93\u5165\u7279\u5f81\u56fe (B, C, H, W)</p> required <p>Returns:</p> Name Type Description <code>Tensor</code> <p>\u8f93\u51fa\u7279\u5f81\u56fe (B, num_classes, H, W)</p>"},{"location":"api/#utils3d.networks.conv_occ.UpConv","title":"<code>UpConv</code>","text":"<p>               Bases: <code>Module</code></p> <p>\u4e0a\u91c7\u6837\u5377\u79ef\u5757\uff08UpConv+Merge+Conv+ReLU+Conv+ReLU\uff09</p>"},{"location":"api/#utils3d.networks.conv_occ.conv1x1","title":"<code>conv1x1(in_channels, out_channels, groups=1)</code>","text":"<p>1x1\u5377\u79ef\u5c42</p>"},{"location":"api/#utils3d.networks.conv_occ.conv3x3","title":"<code>conv3x3(in_channels, out_channels, stride=1, padding=1, bias=True, groups=1)</code>","text":"<p>3x3\u5377\u79ef\u5c42</p>"},{"location":"api/#utils3d.networks.conv_occ.upconv2x2","title":"<code>upconv2x2(in_channels, out_channels, mode='transpose')</code>","text":"<p>2x2\u4e0a\u91c7\u6837\u5c42</p>"},{"location":"api/#utils3d.networks.network_utils.PointNetFeaturePropagation","title":"<code>PointNetFeaturePropagation</code>","text":"<p>               Bases: <code>Module</code></p>"},{"location":"api/#utils3d.networks.network_utils.PointNetFeaturePropagation.forward","title":"<code>forward(xyz1, xyz2, points1, points2)</code>","text":"Input <p>xyz1: input points position data, [B, C, N] xyz2: sampled input points position data, [B, C, S] points1: input points data, [B, D, N] points2: input points data, [B, D, S]</p> <p>Return:     new_points: upsampled points data, [B, D', N]</p>"},{"location":"api/#utils3d.networks.network_utils.PointNetSetAbstraction","title":"<code>PointNetSetAbstraction</code>","text":"<p>               Bases: <code>Module</code></p>"},{"location":"api/#utils3d.networks.network_utils.PointNetSetAbstraction.forward","title":"<code>forward(xyz, points)</code>","text":"Input <p>xyz: input points position data, [B, C, N] points: input points data, [B, D, N]</p> <p>Return:     new_xyz: sampled points position data, [B, C, S]     new_points_concat: sample points feature data, [B, D', S]</p>"},{"location":"api/#utils3d.networks.network_utils.PointNetSetAbstractionMsg","title":"<code>PointNetSetAbstractionMsg</code>","text":"<p>               Bases: <code>Module</code></p>"},{"location":"api/#utils3d.networks.network_utils.PointNetSetAbstractionMsg.forward","title":"<code>forward(xyz, points)</code>","text":"Input <p>xyz: input points position data, [B, C, N] points: input points data, [B, D, N]</p> <p>Return:     new_xyz: sampled points position data, [B, C, S]     new_points_concat: sample points feature data, [B, D', S]</p>"},{"location":"api/#utils3d.networks.network_utils.farthest_point_sample","title":"<code>farthest_point_sample(xyz, npoint)</code>","text":"Input <p>xyz: pointcloud data, [B, N, 3] npoint: number of samples</p> <p>Return:     centroids: sampled pointcloud index, [B, npoint]</p>"},{"location":"api/#utils3d.networks.network_utils.index_points","title":"<code>index_points(points, idx)</code>","text":"Input <p>points: input points data, [B, N, C] idx: sample index data, [B, S]</p> <p>Return:     new_points:, indexed points data, [B, S, C]</p>"},{"location":"api/#utils3d.networks.network_utils.pca_with_svd","title":"<code>pca_with_svd(data, eps=1e-06)</code>","text":"<p>PCA\u9884\u6d4b\u65cb\u8f6c\u6b63\u4ea4\u77e9\u9635  <code>def pca_with_svd(data, n_components=3):     # \u6570\u636e\u4e2d\u5fc3\u5316     mean = torch.mean(data, dim=0)     centered_data = data - mean     # \u6267\u884c SVD     _, _, v = torch.linalg.svd(centered_data, full_matrices=False)     # \u63d0\u53d6\u524d n_components \u4e2a\u4e3b\u6210\u5206     components = v[:n_components]     return components</code></p>"},{"location":"api/#utils3d.networks.network_utils.query_ball_point","title":"<code>query_ball_point(radius, nsample, xyz, new_xyz)</code>","text":"Input <p>radius: local region radius nsample: max sample number in local region xyz: all points, [B, N, 3] new_xyz: query points, [B, S, 3]</p> <p>Return:     group_idx: grouped points index, [B, S, nsample]</p>"},{"location":"api/#utils3d.networks.network_utils.query_knn","title":"<code>query_knn(nsample, xyz, new_xyz, include_self=True)</code>","text":"<p>Find k-NN of new_xyz in xyz</p>"},{"location":"api/#utils3d.networks.network_utils.sample_and_group","title":"<code>sample_and_group(npoint, radius, nsample, xyz, points, returnfps=False)</code>","text":"Input <p>npoint: radius: nsample: xyz: input points position data, [B, N, 3] points: input points data, [B, N, D]</p> <p>Return:     new_xyz: sampled points position data, [B, npoint, nsample, 3]     new_points: sampled points data, [B, npoint, nsample, 3+D]</p>"},{"location":"api/#utils3d.networks.network_utils.sample_and_group_all","title":"<code>sample_and_group_all(xyz, points)</code>","text":"Input <p>xyz: input points position data, [B, N, 3] points: input points data, [B, N, D]</p> <p>Return:     new_xyz: sampled points position data, [B, 1, 3]     new_points: sampled points data, [B, 1, N, 3+D]</p>"},{"location":"api/#utils3d.networks.network_utils.sdf2mesh_by_diso","title":"<code>sdf2mesh_by_diso(sdf, diffdmc=None, deform=None, return_quads=False, normalize=True, isovalue=0, invert=True)</code>","text":"<p>\u7528pytorch\u65b9\u5f0f\u7ed9\uff0csdf \u8f6c\u6362\u6210 mesh</p>"},{"location":"api/#utils3d.networks.network_utils.square_distance","title":"<code>square_distance(src, dst)</code>","text":"<p>Calculate Euclid distance between each two points.</p> <p>src^T * dst = xn * xm + yn * ym + zn * zm\uff1b sum(src^2, dim=-1) = xnxn + ynyn + znzn; sum(dst^2, dim=-1) = xmxm + ymym + zmzm; dist = (xn - xm)^2 + (yn - ym)^2 + (zn - zm)^2      = sum(src2,dim=-1)+sum(dst2,dim=-1)-2src^Tdst</p> Input <p>src: source points, [B, N, C] dst: target points, [B, M, C]</p> <p>Output:     dist: per-point square distance, [B, N, M]</p>"},{"location":"api/#utils3d.networks.Reconstruct3D.ShapeVAE","title":"<code>ShapeVAE</code>","text":"<p>               Bases: <code>Module</code></p>"},{"location":"api/#utils3d.networks.Reconstruct3D.ShapeVAE.center_vertices","title":"<code>center_vertices(vertices)</code>  <code>staticmethod</code>","text":"<p>Translate the vertices so that bounding box is centered at zero.</p>"},{"location":"api/#utils3d.networks.point2voxel.DynamicGridSampler","title":"<code>DynamicGridSampler</code>","text":"<p>               Bases: <code>Module</code></p>"},{"location":"api/#utils3d.networks.point2voxel.DynamicGridSampler.forward","title":"<code>forward(voxel_feats)</code>","text":"<p>\u8f93\u5165\uff1a\u4f53\u7d20\u7279\u5f81 [B,C,D,H,W] \u8f93\u51fa\uff1a\u53d8\u5f62\u7f51\u683c\u7279\u5f81 [B,C,D,H,W]</p>"},{"location":"api/#utils3d.networks.point2voxel.PointCloudVoxelizer","title":"<code>PointCloudVoxelizer</code>","text":"<p>               Bases: <code>Module</code></p>"},{"location":"api/#utils3d.networks.point2voxel.PointCloudVoxelizer.forward","title":"<code>forward(points)</code>","text":"<p>\u8f93\u5165\uff1a\u70b9\u4e91 [B, N, 3] \u8f93\u51fa\uff1a\u4f53\u7d20\u7279\u5f81 [B, C, D, H, W]</p>"},{"location":"api/#api_3","title":"\u62a5\u544a\u6a21\u5757API","text":""},{"location":"api/#windowsapi","title":"Windows\u5de5\u5177API","text":"<pre><code>@path   \uff1asindre_package -&gt; py2pyd.py\n@IDE    \uff1aPyCharm\n@Author \uff1asindre\n@Email  \uff1ayx@mviai.com\n@Date   \uff1a2024/6/17 16:32\n@Version: V0.1\n@License: (C)Copyright 2021-2023 , UP3D\n@Reference: \n</code></pre>"},{"location":"api/#win_tools.tools.ip_bind","title":"<code>ip_bind</code>","text":"<p>               Bases: <code>Thread</code></p> <p>\u5b9e\u73b0\u672c\u57300.0.0.0\uff1a8000 &lt;--&gt; \u8fdc\u7a0b\u7aef\u53e3 \u5185\u7f51\u7a7f\u900f</p>"},{"location":"api/#win_tools.tools.ip_bind.set_ip","title":"<code>set_ip(remote_ip, remote_port)</code>","text":"<pre><code>\u8bbe\u7f6e\u8fdc\u7a0bip\u53ca\u7aef\u53e3\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>remote_ip</code> <code>str</code> <p>\u8fdc\u7a0bip</p> required <code>remote_port</code> <code>str</code> <p>\u8fdc\u7a0b\u7aef\u53e3</p> required <p>Returns:</p>"},{"location":"api/#win_tools.tools.tcp_mapping_qt","title":"<code>tcp_mapping_qt</code>","text":"<p>               Bases: <code>Thread</code></p> <p>TCP \u4f20\u8f93\u7ebf\u7a0b</p>"},{"location":"api/#win_tools.tools.check_port","title":"<code>check_port(port)</code>","text":"<pre><code>\u68c0\u6d4bwin\u7aef\u53e3\u662f\u5426\u88ab\u5360\u7528\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>port</code> <code>int</code> <p>\u7aef\u53e3\u53f7</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u88ab\u5360\u7528</p>"},{"location":"api/#win_tools.tools.download_url_file","title":"<code>download_url_file(url, package_path='test.zip')</code>","text":"<pre><code>\u4e0b\u8f7d\u7f51\u7edc\u6587\u4ef6\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>\u6587\u4ef6\u4e0b\u8f7d\u5730\u5740</p> required <code>package_path</code> <code>str</code> <p>\u4fdd\u5b58\u8def\u5f84</p> <code>'test.zip'</code> <p>Returns:</p> Type Description <code>bool</code> <p>\u4e0b\u8f7d\u662f\u5426\u6210\u529f</p>"},{"location":"api/#win_tools.tools.exe2nsis","title":"<code>exe2nsis(work_dir, files_to_compress, exe_name, appname='AI', version='1.0.0.0', author='SindreYang', license='', icon_old='')</code>","text":"<pre><code>\u5c06exe\u8fdb\u884cnsis\u5c01\u88c5\u6210\u5b89\u88c5\u7a0b\u5e8f\uff1b\n</code></pre> Notes <p>files_to_compress =[f\"{self.work_dir}/{i}\" for i in  [\"app\", \"py\", \"third\", \"app.exe\", \"app.py\", \"requirements.txt\"]]</p> <p>Parameters:</p> Name Type Description Default <code>work_dir</code> <code>str</code> <p>\u751f\u6210\u7684\u8def\u5f84</p> required <code>files_to_compress</code> <code>list</code> <p>\u9700\u8981\u8f6c\u6362\u7684\u6587\u4ef6\u5939/\u6587\u4ef6\u5217\u8868</p> required <code>exe_name</code> <code>str</code> <p>\u6307\u5b9a\u4e3b\u8fd0\u884c\u7a0b\u5e8f\uff0c\u5feb\u6377\u65b9\u5f0f\u4e5f\u662f\u7528\u6b64\u7a0b\u5e8f\u751f\u6210</p> required <code>appname</code> <code>str</code> <p>\u4ea7\u54c1\u540d</p> <code>'AI'</code> <code>version</code> <code>str</code> <p>\u7248\u672c\u53f7--\u5fc5\u987b\u4e3a X.X.X.X</p> <code>'1.0.0.0'</code> <code>author</code> <code>str</code> <p>\u4f5c\u8005</p> <code>'SindreYang'</code> <code>license</code> <code>str</code> <p>licence.txt\u534f\u8bae\u8def\u5f84</p> <code>''</code> <code>icon_old</code> <code>str</code> <p>\u56fe\u6807</p> <code>''</code>"},{"location":"api/#win_tools.tools.is_service_exists","title":"<code>is_service_exists(service_name)</code>","text":"<pre><code>\u4f7f\u7528sc query\u547d\u4ee4\u6765\u67e5\u8be2\u670d\u52a1\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>str</code> <p>\u670d\u52a1\u540d</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u8fd4\u56de\u662f\u5426\u5b58\u5728\u670d\u52a1</p>"},{"location":"api/#win_tools.tools.kill_process_using_port","title":"<code>kill_process_using_port(server_port)</code>","text":"<pre><code>\u8bf7\u6c42\u7ba1\u7406\u5458\u6743\u9650\uff0c\u5e76\u5f3a\u5236\u91ca\u653e\u7aef\u53e3\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>server_port</code> <code>int</code> <p>\u7aef\u53e3\u53f7</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u7aef\u53e3\u662f\u5426\u6210\u529f\u91ca\u653e</p>"},{"location":"api/#win_tools.tools.pip_install","title":"<code>pip_install(package_name='', target_dir='', requirements_path='')</code>","text":"<pre><code>\u6a21\u62dfpip\u5b89\u88c5\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>package_name</code> <code>str</code> <p>\u5305\u540d</p> <code>''</code> <code>target_dir</code> <code>str</code> <p>\u5b89\u88c5\u76ee\u5f55\uff0c\u4e3a\u7a7a\uff0c\u5219\u81ea\u52a8\u5b89\u88c5\u5230\u5f53\u524d\u73af\u5883\u4e0b</p> <code>''</code> <code>requirements_path</code> <code>str</code> <p>requirementsTxT\u8def\u5f84</p> <code>''</code>"},{"location":"api/#win_tools.tools.py2pyd","title":"<code>py2pyd(source_path, clear_py=False)</code>","text":"<pre><code>\u5c06\u76ee\u5f55\u4e0b\u6240\u6709py\u6587\u4ef6\u7f16\u8bd1\u6210pyd\u6587\u4ef6\u3002\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>source_path</code> <code>str</code> <p>\u6e90\u7801\u76ee\u5f55</p> required <code>clear_py</code> <code>bool</code> <p>\u662f\u5426\u7f16\u8bd1\u540e\u6e05\u9664py\u6587\u4ef6,\u6ce8\u610f\u5907\u4efd\u3002</p> <code>False</code>"},{"location":"api/#win_tools.tools.python_installer","title":"<code>python_installer(install_dir, version='3.9.6')</code>","text":"<pre><code>python\u81ea\u52a8\u5316\u5b89\u88c5\n</code></pre> Notes <p>\u9ed8\u8ba4\u4ece https://mirrors.huaweicloud.com/python/{version}/python-{version}-embed-amd64.zip \u4e0b\u8f7d\u5b89\u88c5</p> <p>Parameters:</p> Name Type Description Default <code>install_dir</code> <code>str</code> <p>\u5b89\u88c5\u4f4d\u7f6e</p> required <code>version</code> <code>str</code> <p>\u7248\u672c\u53f7</p> <code>'3.9.6'</code>"},{"location":"api/#win_tools.tools.zip_extract","title":"<code>zip_extract(zip_path, install_dir)</code>","text":"<pre><code> \u5c06zip\u6587\u4ef6\u89e3\u538b\n</code></pre> <p>Args:     zip_path: zip\u6587\u4ef6\u8def\u5f84     install_dir: \u89e3\u538b\u76ee\u5f55</p> <p>Returns:</p> Type Description <code>bool</code> <p>\u89e3\u538b\u662f\u5426\u6210\u529f</p>"},{"location":"api/#win_tools.taskbar.set_windows_alpha","title":"<code>set_windows_alpha(alpha=255, class_name='Shell_TrayWnd')</code>","text":"<p>\u901a\u8fc7\u67e5\u627eclass_name,\u5f3a\u5236\u7528\u4e8e\u8bbe\u7f6e\u4efb\u52a1\u680f\u900f\u660e\u7a0b\u5ea6</p> <p>Parameters:</p> Name Type Description Default <code>alpha</code> <code>int</code> <p>\u900f\u660e\u5ea6\uff0c(0--\u5b8c\u5168\u900f\u660e\uff0c255--\u5b8c\u5168\u4e0d\u900f\u660e\uff09</p> <code>255</code> <code>class_name</code> <code>str</code> <p>\u7a97\u53e3\u540d</p> <code>'Shell_TrayWnd'</code>"},{"location":"api/#api_4","title":"\u90e8\u7f72\u76f8\u5173 API","text":""},{"location":"api/#deploy.check_tools.timeit","title":"<code>timeit</code>","text":"<p>\u6d4b\u91cf\u51fd\u6570\u6267\u884c\u65f6\u95f4\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7c7b\uff0c\u9644\u52a0\u5185\u5b58\u76d1\u63a7\u529f\u80fd</p>"},{"location":"api/#deploy.check_tools.check_gpu_info","title":"<code>check_gpu_info()</code>","text":"<p>\u68c0\u6d4b\u7cfb\u7edf\u4fe1\u606f</p>"},{"location":"api/#deploy.onnxruntime_deploy.OnnxInfer","title":"<code>OnnxInfer</code>","text":""},{"location":"api/#deploy.onnxruntime_deploy.OnnxInfer.__call__","title":"<code>__call__(inputs)</code>","text":"<p>\u6267\u884c\u6a21\u578b\u63a8\u7406</p>"},{"location":"api/#deploy.onnxruntime_deploy.OnnxInfer.__init__","title":"<code>__init__(onnx_path, providers=[('CPUExecutionProvider', {})], enable_log=False)</code>","text":"<p>ONNX\u6a21\u578b\u63a8\u7406\u7c7b\uff0c\u652f\u6301\u591a\u79cd\u63a8\u7406\u540e\u7aef\uff08CPU/GPU\u7b49\uff09</p> \u53c2\u6570 <p>onnx_path: ONNX\u6a21\u578b\u6587\u4ef6\u8def\u5f84 providers: \u63a8\u7406\u63d0\u4f9b\u8005\u5217\u8868\uff0c\u683c\u5f0f\u4e3a[(provider_name, options_dict), ...]</p>"},{"location":"api/#deploy.onnxruntime_deploy.OnnxInfer.convert_opset_version","title":"<code>convert_opset_version(save_path, target_version)</code>","text":"<p>\u8f6c\u6362ONNX\u6a21\u578b\u7684Opset\u7248\u672c :param save_path: \u4fdd\u5b58\u8def\u5f84 :param target_version: \u76ee\u6807Opset\u7248\u672c\uff08\u598216\uff09</p>"},{"location":"api/#deploy.onnxruntime_deploy.OnnxInfer.dynamic_input_shape","title":"<code>dynamic_input_shape(save_path, dynamic_dims)</code>","text":"<p>\u8bbe\u7f6eONNX\u6a21\u578b\u7684\u8f93\u5165\u4e3a\u52a8\u6001\u5c3a\u5bf8\uff08\u652f\u6301\u591a\u8f93\u5165\uff0cNone\u8868\u793a\u52a8\u6001\u7ef4\u5ea6\uff09 :param dynamic_dims: \u52a8\u6001\u7ef4\u5ea6\u5217\u8868\uff0c\u5982 [[None, 3, None, 480], [None, 3, None, 480]]                     \u6bcf\u4e2a\u5b50\u5217\u8868\u5bf9\u5e94\u4e00\u4e2a\u8f93\u5165\u7684\u7ef4\u5ea6\uff0cNone\u8868\u793a\u8be5\u7ef4\u5ea6\u52a8\u6001\u53ef\u53d8</p>"},{"location":"api/#deploy.onnxruntime_deploy.OnnxInfer.fix_input_shape","title":"<code>fix_input_shape(save_path, input_shapes)</code>","text":"<p>\u56fa\u5b9aONNX\u6a21\u578b\u7684\u8f93\u5165\u5c3a\u5bf8\uff08\u652f\u6301\u591a\u8f93\u5165\uff09 :param save_path: \u4fdd\u5b58\u8def\u5f84 :param input_shapes: \u8f93\u5165\u5f62\u72b6\u5217\u8868\uff0c\u5982 [[1,3,416,480], [1,3,416,480]] or [[1,3,416,480]]</p>"},{"location":"api/#deploy.onnxruntime_deploy.OnnxInfer.get_session","title":"<code>get_session(onnx_path, providers, enable_log=False)</code>","text":"<p>\u52a0\u8f7d\u5e76\u9a8c\u8bc1ONNX\u6a21\u578b\uff0c\u521b\u5efa\u63a8\u7406\u4f1a\u8bdd</p>"},{"location":"api/#deploy.onnxruntime_deploy.OnnxInfer.optimizer","title":"<code>optimizer(save_onnx)</code>","text":"<p>\u4f18\u5316\u5e76\u7b80\u5316ONNX\u6a21\u578b</p>"},{"location":"api/#deploy.onnxruntime_deploy.OnnxInfer.test_performance","title":"<code>test_performance(loop=10, warmup=3)</code>","text":"<p>\u6d4b\u8bd5\u6a21\u578b\u63a8\u7406\u901f\u5ea6</p>"},{"location":"api/#deploy.python_share_memory.SimpleSharedMemory","title":"<code>SimpleSharedMemory</code>","text":""},{"location":"api/#deploy.python_share_memory.SimpleSharedMemory.get_status","title":"<code>get_status()</code>","text":"<p>\u83b7\u53d6\u72b6\u6001\u6807\u5fd7</p>"},{"location":"api/#deploy.python_share_memory.SimpleSharedMemory.read","title":"<code>read()</code>","text":"<p>\u8bfb\u53d6\u6570\u636e\u5e76\u6e05\u7a7a\u5185\u5b58</p>"},{"location":"api/#deploy.python_share_memory.SimpleSharedMemory.set_status","title":"<code>set_status(status)</code>","text":"<p>\u8bbe\u7f6e\u72b6\u6001\u6807\u5fd7\uff1a0-\u7a7a\uff0c1-\u5df2\u5199\u5165</p>"},{"location":"api/#deploy.python_share_memory.SimpleSharedMemory.write","title":"<code>write(array)</code>","text":"<p>\u5199\u5165\u6570\u636e\uff0c\u5982\u679c\u5185\u5b58\u672a\u6e05\u7a7a\u5219\u7b49\u5f85</p>"},{"location":"api/#deploy.TenserRT_deploy.TRTInfer","title":"<code>TRTInfer</code>","text":""},{"location":"api/#deploy.TenserRT_deploy.TRTInfer.__call__","title":"<code>__call__(data)</code>","text":"<p>\u6267\u884c\u63a8\u7406</p>"},{"location":"api/#deploy.TenserRT_deploy.TRTInfer.build_engine","title":"<code>build_engine(onnx_path, engine_path, max_workspace_size=4 &lt;&lt; 30, fp16=False, dynamic_shape_profile=None, hardware_compatibility='', optimization_level=3, version_compatible=False)</code>","text":"<p>\u4eceONNX\u6a21\u578b\u6784\u5efaTensorRT\u5f15\u64ce</p> \u53c2\u6570 <p>onnx_path (str): ONNX\u6a21\u578b\u8def\u5f84 engine_path (str, optional): \u5f15\u64ce\u4fdd\u5b58\u8def\u5f84 max_workspace_size (int, optional): \u6700\u5927\u5de5\u4f5c\u7a7a\u95f4\u5927\u5c0f\uff0c\u9ed8\u8ba4\u4e3a4GB fp16 (bool, optional): \u662f\u5426\u542f\u7528FP16\u7cbe\u5ea6 dynamic_shape_profile (dict, optional): \u52a8\u6001\u5f62\u72b6\u914d\u7f6e\uff0c\u683c\u5f0f\u4e3a:     {         \"input_name\": {             \"min\": (1, 3, 224, 224),  # \u6700\u5c0f\u5f62\u72b6             \"opt\": (4, 3, 224, 224),  # \u4f18\u5316\u5f62\u72b6             \"max\": (8, 3, 224, 224)   # \u6700\u5927\u5f62\u72b6         }     } hardware_compatibility (str, optional): \u786c\u4ef6\u517c\u5bb9\u6027\u7ea7\u522b\uff0c\u53ef\u9009\u503c:     - \"\": \u9ed8\u8ba4(\u6700\u5feb)     - \"same_sm\": \u76f8\u540c\u8ba1\u7b97\u80fd\u529b(\u5176\u6b21)     - \"ampere_plus\": Ampere\u53ca\u66f4\u9ad8\u67b6\u6784(\u6700\u6162)     Pascal(10\u7cfb)\u3001Volta(V100)\u3001Turing(20\u7cfb)\u3001Ampere(30\u7cfb)\u3001     Ada(40\u7cfb)\u3001Hopper(H100)\u3001Blackwell(50\u7cfb) optimization_level (int): \u4f18\u5316\u7ea7\u522b,\u9ed8\u8ba4\u6700\u4f18\u7ea7\u522b3;     \u30fb\u7b49\u7ea70\uff1a\u901a\u8fc7\u7981\u7528\u52a8\u6001\u5185\u6838\u751f\u6210\u5e76\u9009\u62e9\u6267\u884c\u6210\u529f\u7684\u7b2c\u4e00\u4e2a\u7b56\u7565\uff0c\u5b9e\u73b0\u6700\u5feb\u7684\u7f16\u8bd1\u3002\u8fd9\u4e5f\u4e0d\u4f1a\u8003\u8651\u8ba1\u65f6\u7f13\u5b58\u3002     \u30fb\u7b49\u7ea71\uff1a\u53ef\u7528\u7b56\u7565\u6309\u542f\u53d1\u5f0f\u65b9\u6cd5\u6392\u5e8f\uff0c\u4f46\u4ec5\u6d4b\u8bd5\u6392\u540d\u9760\u524d\u7684\u7b56\u7565\u4ee5\u9009\u62e9\u6700\u4f73\u7b56\u7565\u3002\u5982\u679c\u751f\u6210\u52a8\u6001\u5185\u6838\uff0c\u5176\u7f16\u8bd1\u4f18\u5316\u7a0b\u5ea6\u8f83\u4f4e\u3002     \u30fb\u7b49\u7ea72\uff1a\u53ef\u7528\u7b56\u7565\u6309\u542f\u53d1\u5f0f\u65b9\u6cd5\u6392\u5e8f\uff0c\u4f46\u4ec5\u6d4b\u8bd5\u6700\u5feb\u7684\u7b56\u7565\u4ee5\u9009\u62e9\u6700\u4f73\u7b56\u7565\u3002     \u30fb\u7b49\u7ea73\uff1a\u5e94\u7528\u542f\u53d1\u5f0f\u65b9\u6cd5\uff0c\u5224\u65ad\u9759\u6001\u9884\u7f16\u8bd1\u5185\u6838\u662f\u5426\u9002\u7528\uff0c\u6216\u8005\u662f\u5426\u5fc5\u987b\u52a8\u6001\u7f16\u8bd1\u65b0\u5185\u6838\u3002     \u30fb\u7b49\u7ea74\uff1a\u59cb\u7ec8\u7f16\u8bd1\u52a8\u6001\u5185\u6838\u3002     \u30fb\u7b49\u7ea75\uff1a\u59cb\u7ec8\u7f16\u8bd1\u52a8\u6001\u5185\u6838\uff0c\u5e76\u5c06\u5176\u4e0e\u9759\u6001\u5185\u6838\u8fdb\u884c\u6bd4\u8f83\u3002 version_compatible (bool): \u662f\u5426\u542f\u7528\u7248\u672c\u517c\u5bb9\u6a21\u5f0f(8.6\u6784\u5efa\u7684\u5f15\u64ce\u53ef\u4ee5\u572810.x\u4e0a\u8fd0\u884c)</p>"},{"location":"api/#deploy.TenserRT_deploy.TRTInfer.load_model","title":"<code>load_model(engine_path)</code>","text":"<p>\u4eceTensorRT\u5f15\u64ce\u6587\u4ef6\u52a0\u8f7d\u6a21\u578b</p>"},{"location":"api/#deploy.TenserRT_deploy.TRTInfer.test_performance","title":"<code>test_performance(loop=10, warmup=3)</code>","text":"<p>\u6d4b\u8bd5\u63a8\u7406\u6027\u80fd\uff08\u81ea\u52a8\u751f\u6210\u968f\u673a\u8f93\u5165\uff09</p> \u53c2\u6570 <p>loop: \u6b63\u5f0f\u6d4b\u8bd5\u5faa\u73af\u6b21\u6570 warmup: \u9884\u70ed\u6b21\u6570</p>"},{"location":"api/#deploy.opset_deploy.grid_sample","title":"<code>grid_sample(input, grid, align_corners=True)</code>","text":"<p>\u81ea\u9002\u5e94\u7248\u672c\u7684grid_sample\uff0c\u6839\u636e\u8f93\u5165\u7ef4\u5ea6\u81ea\u52a8\u9009\u62e92D\u62163D\u5b9e\u73b0</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>Tensor</code> <p>\u8f93\u5165\u56fe\u50cf - \u5bf9\u4e8e2D\u91c7\u6837: \u5f62\u72b6\u4e3a (N, C, H, W) - \u5bf9\u4e8e3D\u91c7\u6837: \u5f62\u72b6\u4e3a (N, C, D, H, W)</p> required <code>grid</code> <code>Tensor</code> <p>\u91c7\u6837\u7f51\u683c - \u5bf9\u4e8e2D\u91c7\u6837: \u5f62\u72b6\u4e3a (N, Hg, Wg, 2) - \u5bf9\u4e8e3D\u91c7\u6837: \u5f62\u72b6\u4e3a (N, D_out, H_out, W_out, 3)</p> required <code>align_corners</code> <code>bool</code> <p>\u5750\u6807\u5f52\u4e00\u5316\u65b9\u5f0f\uff0c\u4e0eF.grid_sample\u7684align_corners\u53c2\u6570\u542b\u4e49\u4e00\u81f4</p> <code>True</code> <p>Returns:</p> Type Description <p>torch.Tensor: \u91c7\u6837\u7ed3\u679c - \u5bf9\u4e8e2D\u91c7\u6837: \u5f62\u72b6\u4e3a (N, C, Hg, Wg) - \u5bf9\u4e8e3D\u91c7\u6837: \u5f62\u72b6\u4e3a (N, C, D_out, H_out, W_out)</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u8f93\u5165\u7ef4\u5ea6\u4e0d\u662f4D(2D)\u62165D(3D)</p> <code>ValueError</code> <p>\u5982\u679cgrid\u7684\u6700\u540e\u4e00\u7ef4\u4e0d\u662f2(2D)\u62163(3D)</p> Notes <p>\u8be5\u51fd\u6570\u6839\u636e\u8f93\u5165\u7ef4\u5ea6\u81ea\u52a8\u8c03\u7528grid_sample_2d\u6216grid_sample_3d \u7b49\u6548\u4e8ePyTorch\u7684F.grid_sample\uff0cpadding_mode='zeros'</p>"},{"location":"api/#deploy.opset_deploy.grid_sample_2d","title":"<code>grid_sample_2d(im, grid, align_corners=False)</code>","text":"<p>2D\u7248\u672c\u7684grid_sample\uff0c\u4f7f\u7528\u53cc\u7ebf\u6027\u63d2\u503c\u5bf9\u8f93\u5165\u50cf\u7d20\u8fdb\u884c\u91c7\u6837</p> <p>Parameters:</p> Name Type Description Default <code>im</code> <code>Tensor</code> <p>\u8f93\u5165\u7279\u5f81\u56fe\uff0c\u5f62\u72b6 (N, C, H, W)</p> required <code>grid</code> <code>Tensor</code> <p>\u70b9\u5750\u6807\uff0c\u5f62\u72b6 (N, Hg, Wg, 2)\uff0c\u6700\u540e\u4e00\u7ef4\u662f(x,y)\u5750\u6807</p> required <code>align_corners</code> <code>bool</code> <p>\u5750\u6807\u5f52\u4e00\u5316\u65b9\u5f0f\uff0c\u4e0eF.grid_sample\u7684align_corners\u53c2\u6570\u542b\u4e49\u4e00\u81f4</p> <code>False</code> <p>Returns:</p> Type Description <p>torch.Tensor: \u91c7\u6837\u7ed3\u679c\uff0c\u5f62\u72b6\u4e3a (N, C, Hg, Wg)</p> Notes <p>\u7b49\u6548\u4e8ePyTorch\u7684F.grid_sample\uff0cpadding_mode='zeros'</p>"},{"location":"api/#deploy.opset_deploy.grid_sample_3d","title":"<code>grid_sample_3d(image, grid, align_corners=False)</code>","text":"<p>3D\u7248\u672c\u7684grid_sample\uff0c\u529f\u80fd\u7b49\u540c\u4e8eF.grid_sample(image, grid_3d, align_corners=True) \u652f\u6301align_corners\u53c2\u6570\uff0c\u63a7\u5236\u5750\u6807\u5f52\u4e00\u5316\u65b9\u5f0f</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <code>Tensor</code> <p>\u8f93\u5165\u56fe\u50cf\uff0c\u5f62\u72b6\u4e3a (N, C, D, H, W)</p> required <code>grid</code> <code>Tensor</code> <p>\u91c7\u6837\u7f51\u683c\uff0c\u5f62\u72b6\u4e3a (N, D_out, H_out, W_out, 3)\uff0c\u6700\u540e\u4e00\u7ef4\u662f(x,y,z)\u5750\u6807</p> required <code>align_corners</code> <code>bool</code> <p>\u5750\u6807\u5f52\u4e00\u5316\u65b9\u5f0f\uff0c\u4e0eF.grid_sample\u7684align_corners\u53c2\u6570\u542b\u4e49\u4e00\u81f4</p> <code>False</code> <p>Returns:</p> Type Description <p>torch.Tensor: \u91c7\u6837\u7ed3\u679c\uff0c\u5f62\u72b6\u4e3a (N, C, D_out, H_out, W_out)</p> Notes <p>\u7b49\u6548\u4e8ePyTorch\u7684F.grid_sample\uff0cpadding_mode='zeros'</p>"},{"location":"api/#api_5","title":"\u65e5\u5fd7\u5de5\u5177 API","text":""},{"location":"api/#general.logs.CustomLogger","title":"<code>CustomLogger</code>","text":"<p>\u4e00\u4e2a\u4f7f\u7528 loguru \u5e93\u7684\u81ea\u5b9a\u4e49\u65e5\u5fd7\u8bb0\u5f55\u5668\u7c7b\uff0c\u652f\u6301\u591a\u8fdb\u7a0b\u3001print\u91cd\u5b9a\u5411\u3001\u65e5\u5fd7\u5206\u7ea7\u5b58\u50a8\u7b49\u3002</p> <p>Attributes:</p> Name Type Description <code>logger</code> <code>logger</code> <p>\u914d\u7f6e\u597d\u7684 loguru \u65e5\u5fd7\u8bb0\u5f55\u5668\u5b9e\u4f8b\u3002</p>"},{"location":"api/#general.logs.CustomLogger.__init__","title":"<code>__init__(logger_name=None, level='DEBUG', log_dir='logs', console_output=True, file_output=False, capture_print=False, filter_log=None)</code>","text":"<p>\u521d\u59cb\u5316 CustomLogger\u3002</p> <p>Parameters:</p> Name Type Description Default <code>logger_name</code> <code>str</code> <p>\u65e5\u5fd7\u8bb0\u5f55\u5668\u540d\u79f0\u3002</p> <code>None</code> <code>level</code> <code>str</code> <p>\u65e5\u5fd7\u7ea7\u522b\uff0c\u9ed8\u8ba4\u4e3a 'DEBUG'\u3002</p> <code>'DEBUG'</code> <code>log_dir</code> <code>str</code> <p>\u65e5\u5fd7\u6587\u4ef6\u5b58\u50a8\u76ee\u5f55\u3002</p> <code>'logs'</code> <code>console_output</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u63a7\u5236\u53f0\u8f93\u51fa\u3002</p> <code>True</code> <code>file_output</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u6587\u4ef6\u8f93\u51fa\u3002</p> <code>False</code> <code>capture_print</code> <code>bool</code> <p>\u662f\u5426\u6355\u83b7 print \u8f93\u51fa\u3002</p> <code>False</code> <code>filter_log</code> <code>callable</code> <p>\u81ea\u5b9a\u4e49\u65e5\u5fd7\u8fc7\u6ee4\u51fd\u6570\u3002</p> <code>None</code>"},{"location":"api/#general.logs.CustomLogger.get_logger","title":"<code>get_logger()</code>","text":"<p>\u83b7\u53d6\u914d\u7f6e\u597d\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u5b9e\u4f8b\u3002</p>"},{"location":"deploy/","title":"Deploy \u90e8\u7f72\u6a21\u5757","text":"<p>\u6a21\u578b\u90e8\u7f72\u548c\u63a8\u7406\u52a0\u901f\u5de5\u5177\uff0c\u652f\u6301ONNX\u3001TensorRT\u3001\u5171\u4eab\u5185\u5b58\u7b49\u591a\u79cd\u90e8\u7f72\u65b9\u5f0f</p>"},{"location":"deploy/#_1","title":"\ud83d\udccb \u76ee\u5f55","text":"<ul> <li>\u529f\u80fd\u7279\u6027</li> <li>\u5feb\u901f\u5f00\u59cb</li> <li>\u6838\u5fc3\u529f\u80fd</li> <li>\u4f7f\u7528\u6307\u5357</li> <li>\u9ad8\u7ea7\u529f\u80fd</li> <li>\u6027\u80fd\u4f18\u5316</li> <li>\u5e38\u89c1\u95ee\u9898</li> </ul>"},{"location":"deploy/#_2","title":"\u2728 \u529f\u80fd\u7279\u6027","text":"<ul> <li>\ud83d\ude80 \u591a\u683c\u5f0f\u652f\u6301: ONNX\u3001TensorRT\u3001OpenVINO\u7b49\u63a8\u7406\u5f15\u64ce</li> <li>\ud83d\udcbe \u5171\u4eab\u5185\u5b58: \u9ad8\u6548\u7684\u8fdb\u7a0b\u95f4\u6570\u636e\u4f20\u8f93</li> <li>\ud83d\udd27 \u6a21\u578b\u4f18\u5316: \u81ea\u52a8\u6a21\u578b\u91cf\u5316\u548c\u4f18\u5316</li> <li>\ud83d\udcca \u6027\u80fd\u76d1\u63a7: \u5b9e\u65f6\u63a8\u7406\u6027\u80fd\u7edf\u8ba1</li> <li>\ud83d\udd04 \u70ed\u66f4\u65b0: \u652f\u6301\u6a21\u578b\u52a8\u6001\u66f4\u65b0</li> <li>\ud83d\udee1\ufe0f \u9519\u8bef\u5904\u7406: \u5b8c\u5584\u7684\u5f02\u5e38\u5904\u7406\u673a\u5236</li> <li>\ud83d\udcc8 \u53ef\u6269\u5c55: \u652f\u6301\u81ea\u5b9a\u4e49\u63a8\u7406\u540e\u7aef</li> </ul>"},{"location":"deploy/#_3","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"deploy/#_4","title":"\u57fa\u672c\u4f7f\u7528","text":"<pre><code>from sindre.deploy import onnxruntime_deploy, TenserRT_deploy\n\n# ONNX Runtime\u90e8\u7f72\nonnx_infer = onnxruntime_deploy.OnnxInfer(\"model.onnx\")\nresult = onnx_infer(input_data)\n\n# TensorRT\u90e8\u7f72\ntrt_infer = TenserRT_deploy.TRTInfer()\ntrt_infer.load_model(\"model.engine\")\nresult = trt_infer(input_data)\n</code></pre>"},{"location":"deploy/#_5","title":"\u5171\u4eab\u5185\u5b58\u90e8\u7f72","text":"<pre><code>from sindre.deploy import python_share_memory\n\n# \u521b\u5efa\u5171\u4eab\u5185\u5b58\u670d\u52a1\nserver = python_share_memory.SharedMemoryServer(\"model_server\")\nserver.start()\n\n# \u5ba2\u6237\u7aef\u8fde\u63a5\nclient = python_share_memory.SharedMemoryClient(\"model_server\")\nresult = client.infer(input_data)\n</code></pre>"},{"location":"deploy/#_6","title":"\ud83d\udd27 \u6838\u5fc3\u529f\u80fd","text":""},{"location":"deploy/#onnx-runtime","title":"ONNX Runtime \u90e8\u7f72","text":"<pre><code>class OnnxInfer:\n    \"\"\"ONNX\u6a21\u578b\u63a8\u7406\u7c7b\"\"\"\n\n    def __init__(self, onnx_path: str, providers: List[Tuple[str, Dict[str, Any]]] = [('CPUExecutionProvider', {})], enable_log: bool = False):\n        \"\"\"\n        \u521d\u59cb\u5316ONNX\u63a8\u7406\n\n        Args:\n            onnx_path: ONNX\u6a21\u578b\u6587\u4ef6\u8def\u5f84\n            providers: \u63a8\u7406\u63d0\u4f9b\u8005\u5217\u8868\n            enable_log: \u662f\u5426\u542f\u7528\u65e5\u5fd7\n        \"\"\"\n\n    def __call__(self, inputs: np.ndarray) -&gt; List[np.ndarray]:\n        \"\"\"\n        \u6267\u884c\u6a21\u578b\u63a8\u7406\n\n        Args:\n            inputs: \u8f93\u5165\u6570\u636e\uff08numpy\u6570\u7ec4\u6216\u5b57\u5178\uff09\n\n        Returns:\n            List[np.ndarray]: \u63a8\u7406\u7ed3\u679c\n        \"\"\"\n\n    def optimizer(self, save_onnx: str):\n        \"\"\"\n        \u4f18\u5316\u5e76\u7b80\u5316ONNX\u6a21\u578b\n\n        Args:\n            save_onnx: \u4fdd\u5b58\u8def\u5f84\n        \"\"\"\n\n    def convert_opset_version(self, save_path: str, target_version: int):\n        \"\"\"\n        \u8f6c\u6362ONNX\u6a21\u578b\u7684Opset\u7248\u672c\n\n        Args:\n            save_path: \u4fdd\u5b58\u8def\u5f84\n            target_version: \u76ee\u6807Opset\u7248\u672c\n        \"\"\"\n\n    def fix_input_shape(self, save_path: str, input_shapes: list):\n        \"\"\"\n        \u56fa\u5b9aONNX\u6a21\u578b\u7684\u8f93\u5165\u5c3a\u5bf8\n\n        Args:\n            save_path: \u4fdd\u5b58\u8def\u5f84\n            input_shapes: \u8f93\u5165\u5f62\u72b6\u5217\u8868\n        \"\"\"\n\n    def dynamic_input_shape(self, save_path: str, dynamic_dims: list):\n        \"\"\"\n        \u8bbe\u7f6eONNX\u6a21\u578b\u7684\u8f93\u5165\u4e3a\u52a8\u6001\u5c3a\u5bf8\n\n        Args:\n            save_path: \u4fdd\u5b58\u8def\u5f84\n            dynamic_dims: \u52a8\u6001\u7ef4\u5ea6\u5217\u8868\n        \"\"\"\n\n    def test_performance(self, loop: int = 10, warmup: int = 3):\n        \"\"\"\n        \u6d4b\u8bd5\u63a8\u7406\u6027\u80fd\n\n        Args:\n            loop: \u6b63\u5f0f\u6d4b\u8bd5\u5faa\u73af\u6b21\u6570\n            warmup: \u9884\u70ed\u6b21\u6570\n        \"\"\"\n</code></pre>"},{"location":"deploy/#tensorrt","title":"TensorRT \u90e8\u7f72","text":"<pre><code>class TRTInfer:\n    \"\"\"TensorRT\u63a8\u7406\u7c7b\"\"\"\n\n    def __init__(self):\n        \"\"\"\u521d\u59cb\u5316TensorRT\u63a8\u7406\"\"\"\n\n    def load_model(self, engine_path: str):\n        \"\"\"\n        \u52a0\u8f7dTensorRT\u5f15\u64ce\n\n        Args:\n            engine_path: \u5f15\u64ce\u6587\u4ef6\u8def\u5f84\n        \"\"\"\n\n    def build_engine(self, onnx_path: str, engine_path: str, max_workspace_size=4&lt;&lt;30, \n                    fp16=False, dynamic_shape_profile=None, hardware_compatibility=\"\", \n                    optimization_level=3, version_compatible=False):\n        \"\"\"\n        \u4eceONNX\u6784\u5efaTensorRT\u5f15\u64ce\n\n        Args:\n            onnx_path: ONNX\u6a21\u578b\u8def\u5f84\n            engine_path: \u8f93\u51fa\u5f15\u64ce\u8def\u5f84\n            max_workspace_size: \u6700\u5927\u5de5\u4f5c\u7a7a\u95f4\u5927\u5c0f\n            fp16: \u662f\u5426\u4f7f\u7528FP16\n            dynamic_shape_profile: \u52a8\u6001\u5f62\u72b6\u914d\u7f6e\n            hardware_compatibility: \u786c\u4ef6\u517c\u5bb9\u6027\n            optimization_level: \u4f18\u5316\u7ea7\u522b\n            version_compatible: \u7248\u672c\u517c\u5bb9\u6027\n        \"\"\"\n\n    def __call__(self, data):\n        \"\"\"\n        \u6267\u884c\u63a8\u7406\n\n        Args:\n            data: \u8f93\u5165\u6570\u636e\n\n        Returns:\n            List[np.ndarray]: \u63a8\u7406\u7ed3\u679c\n        \"\"\"\n\n    def test_performance(self, loop: int = 10, warmup: int = 3) -&gt; float:\n        \"\"\"\n        \u6d4b\u8bd5\u63a8\u7406\u6027\u80fd\n\n        Args:\n            loop: \u6b63\u5f0f\u6d4b\u8bd5\u5faa\u73af\u6b21\u6570\n            warmup: \u9884\u70ed\u6b21\u6570\n\n        Returns:\n            float: \u5e73\u5747\u63a8\u7406\u65f6\u95f4\n        \"\"\"\n</code></pre>"},{"location":"deploy/#_7","title":"\u5171\u4eab\u5185\u5b58\u90e8\u7f72","text":"<pre><code>class SharedMemoryServer:\n    \"\"\"\u5171\u4eab\u5185\u5b58\u670d\u52a1\u5668\"\"\"\n\n    def __init__(self, name: str, model_path: str):\n        \"\"\"\n        \u521d\u59cb\u5316\u5171\u4eab\u5185\u5b58\u670d\u52a1\u5668\n\n        Args:\n            name: \u670d\u52a1\u5668\u540d\u79f0\n            model_path: \u6a21\u578b\u8def\u5f84\n        \"\"\"\n\n    def start(self):\n        \"\"\"\u542f\u52a8\u670d\u52a1\u5668\"\"\"\n\n    def stop(self):\n        \"\"\"\u505c\u6b62\u670d\u52a1\u5668\"\"\"\n\nclass SharedMemoryClient:\n    \"\"\"\u5171\u4eab\u5185\u5b58\u5ba2\u6237\u7aef\"\"\"\n\n    def __init__(self, server_name: str):\n        \"\"\"\n        \u521d\u59cb\u5316\u5171\u4eab\u5185\u5b58\u5ba2\u6237\u7aef\n\n        Args:\n            server_name: \u670d\u52a1\u5668\u540d\u79f0\n        \"\"\"\n\n    def infer(self, input_data: dict):\n        \"\"\"\n        \u901a\u8fc7\u5171\u4eab\u5185\u5b58\u6267\u884c\u63a8\u7406\n\n        Args:\n            input_data: \u8f93\u5165\u6570\u636e\u5b57\u5178\n\n        Returns:\n            dict: \u63a8\u7406\u7ed3\u679c\n        \"\"\"\n</code></pre>"},{"location":"deploy/#_8","title":"\ud83d\udcd6 \u4f7f\u7528\u6307\u5357","text":""},{"location":"deploy/#1-onnx-runtime","title":"1. ONNX Runtime \u90e8\u7f72","text":""},{"location":"deploy/#_9","title":"\u57fa\u672c\u63a8\u7406","text":"<pre><code>from sindre.deploy import onnxruntime_deploy\nimport numpy as np\n\n# \u521b\u5efa\u63a8\u7406\u5b9e\u4f8b\ninfer = onnxruntime_deploy.OnnxInfer(\"model.onnx\")\n\n# \u51c6\u5907\u8f93\u5165\u6570\u636e\ninput_data = np.random.rand(1, 3, 224, 224).astype(np.float32)\n\n# \u6267\u884c\u63a8\u7406\nresult = infer(input_data)\nprint(f\"\u63a8\u7406\u7ed3\u679c: {result}\")\n\n# \u83b7\u53d6\u63a8\u7406\u65f6\u95f4\ninfer.test_performance(loop=10, warmup=3)\n</code></pre>"},{"location":"deploy/#_10","title":"\u591a\u8f93\u5165\u63a8\u7406","text":"<pre><code># \u591a\u8f93\u5165\u6a21\u578b\ninput_data = {\n    \"input1\": np.random.rand(1, 3, 224, 224).astype(np.float32),\n    \"input2\": np.random.rand(1, 10).astype(np.float32)\n}\n\nresult = infer(input_data)\nprint(f\"\u591a\u8f93\u5165\u63a8\u7406\u7ed3\u679c: {result}\")\n</code></pre>"},{"location":"deploy/#_11","title":"\u6a21\u578b\u4f18\u5316","text":"<pre><code># \u4f18\u5316\u6a21\u578b\ninfer.optimizer(\"optimized_model.onnx\")\n\n# \u8f6c\u6362Opset\u7248\u672c\ninfer.convert_opset_version(\"model_v16.onnx\", 16)\n\n# \u56fa\u5b9a\u8f93\u5165\u5f62\u72b6\ninfer.fix_input_shape(\"fixed_model.onnx\", [[1, 3, 224, 224]])\n\n# \u8bbe\u7f6e\u52a8\u6001\u8f93\u5165\ninfer.dynamic_input_shape(\"dynamic_model.onnx\", [[None, 3, None, None]])\n</code></pre>"},{"location":"deploy/#2-tensorrt","title":"2. TensorRT \u90e8\u7f72","text":""},{"location":"deploy/#_12","title":"\u57fa\u672c\u63a8\u7406","text":"<pre><code>from sindre.deploy import TenserRT_deploy\nimport numpy as np\n\n# \u521b\u5efa\u63a8\u7406\u5b9e\u4f8b\ntrt_infer = TenserRT_deploy.TRTInfer()\n\n# \u52a0\u8f7d\u5f15\u64ce\ntrt_infer.load_model(\"model.engine\")\n\n# \u51c6\u5907\u8f93\u5165\u6570\u636e\ninput_data = np.random.rand(1, 3, 224, 224).astype(np.float32)\n\n# \u6267\u884c\u63a8\u7406\nresult = trt_infer(input_data)\nprint(f\"TensorRT\u63a8\u7406\u7ed3\u679c: {result}\")\n\n# \u6027\u80fd\u6d4b\u8bd5\navg_time = trt_infer.test_performance(loop=100, warmup=10)\nprint(f\"\u5e73\u5747\u63a8\u7406\u65f6\u95f4: {avg_time:.3f}ms\")\n</code></pre>"},{"location":"deploy/#_13","title":"\u6784\u5efa\u5f15\u64ce","text":"<pre><code># \u4eceONNX\u6784\u5efa\u5f15\u64ce\ntrt_infer.build_engine(\n    onnx_path=\"model.onnx\",\n    engine_path=\"model.engine\",\n    max_workspace_size=4&lt;&lt;30,  # 4GB\n    fp16=True,  # \u4f7f\u7528FP16\n    optimization_level=3\n)\n\n# \u52a8\u6001\u5f62\u72b6\u5f15\u64ce\ndynamic_profile = {\n    \"input\": [(1, 3, 224, 224), (4, 3, 224, 224), (8, 3, 224, 224)]\n}\n\ntrt_infer.build_engine(\n    onnx_path=\"model.onnx\",\n    engine_path=\"dynamic_model.engine\",\n    dynamic_shape_profile=dynamic_profile\n)\n</code></pre>"},{"location":"deploy/#3","title":"3. \u5171\u4eab\u5185\u5b58\u90e8\u7f72","text":""},{"location":"deploy/#_14","title":"\u670d\u52a1\u5668\u7aef","text":"<pre><code>from sindre.deploy import python_share_memory\n\n# \u521b\u5efa\u670d\u52a1\u5668\nserver = python_share_memory.SharedMemoryServer(\"model_server\", \"model.onnx\")\n\n# \u542f\u52a8\u670d\u52a1\u5668\nserver.start()\n\n# \u4fdd\u6301\u8fd0\u884c\ntry:\n    while True:\n        time.sleep(1)\nexcept KeyboardInterrupt:\n    server.stop()\n</code></pre>"},{"location":"deploy/#_15","title":"\u5ba2\u6237\u7aef","text":"<pre><code>from sindre.deploy import python_share_memory\n\n# \u521b\u5efa\u5ba2\u6237\u7aef\nclient = python_share_memory.SharedMemoryClient(\"model_server\")\n\n# \u51c6\u5907\u6570\u636e\ninput_data = {\n    \"input\": np.random.rand(1, 3, 224, 224).astype(np.float32)\n}\n\n# \u6267\u884c\u63a8\u7406\nresult = client.infer(input_data)\nprint(f\"\u5171\u4eab\u5185\u5b58\u63a8\u7406\u7ed3\u679c: {result}\")\n</code></pre>"},{"location":"deploy/#4","title":"4. \u7cfb\u7edf\u68c0\u6d4b\u5de5\u5177","text":"<pre><code>from sindre.deploy import check_tools\n\n# \u68c0\u6d4bGPU\u548c\u7cfb\u7edf\u4fe1\u606f\ncheck_tools.check_gpu_info()\n\n# \u6027\u80fd\u6d4b\u91cf\u5de5\u5177 - CPU\u6a21\u5f0f\nwith check_tools.timeit(\"CPU\u8ba1\u7b97\"):\n    result = [i**2 for i in range(10**6)]\n\n# \u6027\u80fd\u6d4b\u91cf\u5de5\u5177 - GPU\u6a21\u5f0f\nimport torch\nif torch.cuda.is_available():\n    with check_tools.timeit(\"GPU\u8ba1\u7b97\", use_torch=True):\n        tensor = torch.randn(10000, 10000).cuda()\n        result = tensor @ tensor.T\n</code></pre> <p>check_gpu_info() \u529f\u80fd: - \u68c0\u6d4b\u64cd\u4f5c\u7cfb\u7edf\u4fe1\u606f - \u663e\u793aCPU\u6838\u5fc3\u6570\u3001\u9891\u7387\u3001\u4f7f\u7528\u7387 - \u663e\u793a\u5185\u5b58\u603b\u91cf\u548c\u4f7f\u7528\u60c5\u51b5 - \u68c0\u6d4bGPU\u8bbe\u5907\u6570\u91cf\u548c\u8be6\u7ec6\u4fe1\u606f - \u663e\u793aCUDA\u548ccuDNN\u7248\u672c - \u68c0\u67e5\u786c\u4ef6\u652f\u6301\u7684\u6570\u636e\u7c7b\u578b\uff08FP16\u3001BF16\u3001INT8\u7b49\uff09</p> <p>timeit \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668: - \u6d4b\u91cf\u51fd\u6570\u6267\u884c\u65f6\u95f4 - \u76d1\u63a7\u5185\u5b58\u4f7f\u7528\u53d8\u5316 - \u652f\u6301CPU\u548cGPU\u6a21\u5f0f - \u663e\u793a\u663e\u5b58\u4f7f\u7528\u60c5\u51b5\uff08GPU\u6a21\u5f0f\uff09</p>"},{"location":"deploy/#_16","title":"\ud83d\ude80 \u9ad8\u7ea7\u529f\u80fd","text":""},{"location":"deploy/#1","title":"1. \u6a21\u578b\u4f18\u5316","text":""},{"location":"deploy/#onnx","title":"ONNX\u4f18\u5316","text":"<pre><code># \u81ea\u52a8\u4f18\u5316\ninfer.optimizer(\"optimized.onnx\")\n\n# \u624b\u52a8\u4f18\u5316\u9009\u9879\noptimization_passes = [\n    'eliminate_deadend',\n    'eliminate_identity',\n    'fuse_bn_into_conv',\n    'fuse_consecutive_concats'\n]\n</code></pre>"},{"location":"deploy/#tensorrt_1","title":"TensorRT\u4f18\u5316","text":"<pre><code># FP16\u4f18\u5316\ntrt_infer.build_engine(\n    onnx_path=\"model.onnx\",\n    engine_path=\"fp16_model.engine\",\n    fp16=True\n)\n\n# INT8\u91cf\u5316\ntrt_infer.build_engine(\n    onnx_path=\"model.onnx\",\n    engine_path=\"int8_model.engine\",\n    int8=True\n)\n</code></pre>"},{"location":"deploy/#2","title":"2. \u52a8\u6001\u5f62\u72b6\u652f\u6301","text":"<pre><code># ONNX\u52a8\u6001\u5f62\u72b6\ninfer.dynamic_input_shape(\"dynamic.onnx\", [[None, 3, None, None]])\n\n# TensorRT\u52a8\u6001\u5f62\u72b6\ndynamic_profile = {\n    \"input\": [(1, 3, 224, 224), (4, 3, 224, 224), (8, 3, 224, 224)]\n}\ntrt_infer.build_engine(\n    onnx_path=\"model.onnx\",\n    engine_path=\"dynamic.engine\",\n    dynamic_shape_profile=dynamic_profile\n)\n</code></pre>"},{"location":"deploy/#3_1","title":"3. \u6027\u80fd\u76d1\u63a7","text":"<pre><code># ONNX\u6027\u80fd\u6d4b\u8bd5\ninfer.test_performance(loop=100, warmup=10)\n\n# TensorRT\u6027\u80fd\u6d4b\u8bd5\navg_time = trt_infer.test_performance(loop=100, warmup=10)\nprint(f\"\u5e73\u5747\u63a8\u7406\u65f6\u95f4: {avg_time:.3f}ms\")\n\n# \u5185\u5b58\u4f7f\u7528\u76d1\u63a7\nimport psutil\nprocess = psutil.Process()\nmemory_usage = process.memory_info().rss / 1024 / 1024  # MB\nprint(f\"\u5185\u5b58\u4f7f\u7528: {memory_usage:.2f} MB\")\n</code></pre>"},{"location":"deploy/#4_1","title":"4. \u9519\u8bef\u5904\u7406","text":"<pre><code>try:\n    result = infer(input_data)\nexcept RuntimeError as e:\n    print(f\"\u63a8\u7406\u9519\u8bef: {e}\")\n    # \u68c0\u67e5\u6a21\u578b\u6587\u4ef6\n    if not os.path.exists(\"model.onnx\"):\n        print(\"\u6a21\u578b\u6587\u4ef6\u4e0d\u5b58\u5728\")\n    # \u68c0\u67e5\u8f93\u5165\u6570\u636e\n    if input_data.shape != expected_shape:\n        print(f\"\u8f93\u5165\u5f62\u72b6\u4e0d\u5339\u914d: {input_data.shape} vs {expected_shape}\")\nexcept Exception as e:\n    print(f\"\u672a\u77e5\u9519\u8bef: {e}\")\n</code></pre>"},{"location":"deploy/#_17","title":"\u26a1 \u6027\u80fd\u4f18\u5316","text":""},{"location":"deploy/#1_1","title":"1. \u5185\u5b58\u4f18\u5316","text":"<pre><code># \u4f7f\u7528\u5185\u5b58\u6c60\nimport numpy as np\nfrom contextlib import contextmanager\n\n@contextmanager\ndef memory_pool():\n    \"\"\"\u5185\u5b58\u6c60\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\"\"\"\n    pool = {}\n    try:\n        yield pool\n    finally:\n        pool.clear()\n\n# \u4f7f\u7528\u5185\u5b58\u6c60\nwith memory_pool() as pool:\n    if \"input_buffer\" not in pool:\n        pool[\"input_buffer\"] = np.zeros((1, 3, 224, 224), dtype=np.float32)\n    input_data = pool[\"input_buffer\"]\n    result = infer(input_data)\n</code></pre>"},{"location":"deploy/#2_1","title":"2. \u6279\u5904\u7406\u4f18\u5316","text":"<pre><code># \u6279\u91cf\u63a8\u7406\ndef batch_inference(infer, data_list, batch_size=4):\n    \"\"\"\u6279\u91cf\u63a8\u7406\"\"\"\n    results = []\n    for i in range(0, len(data_list), batch_size):\n        batch = data_list[i:i+batch_size]\n        batch_result = infer(batch)\n        results.extend(batch_result)\n    return results\n\n# \u4f7f\u7528\u6279\u91cf\u63a8\u7406\ndata_list = [np.random.rand(1, 3, 224, 224) for _ in range(100)]\nresults = batch_inference(infer, data_list, batch_size=8)\n</code></pre>"},{"location":"deploy/#3_2","title":"3. \u591a\u7ebf\u7a0b\u4f18\u5316","text":"<pre><code>import threading\nfrom queue import Queue\n\nclass ThreadedInfer:\n    \"\"\"\u591a\u7ebf\u7a0b\u63a8\u7406\"\"\"\n    def __init__(self, model_path, num_threads=4):\n        self.infer = onnxruntime_deploy.OnnxInfer(model_path)\n        self.queue = Queue()\n        self.threads = []\n\n        for _ in range(num_threads):\n            thread = threading.Thread(target=self._worker)\n            thread.start()\n            self.threads.append(thread)\n\n    def _worker(self):\n        while True:\n            try:\n                data, callback = self.queue.get(timeout=1)\n                result = self.infer(data)\n                callback(result)\n            except:\n                break\n\n    def infer_async(self, data, callback):\n        \"\"\"\u5f02\u6b65\u63a8\u7406\"\"\"\n        self.queue.put((data, callback))\n\n# \u4f7f\u7528\u591a\u7ebf\u7a0b\u63a8\u7406\nthreaded_infer = ThreadedInfer(\"model.onnx\", num_threads=4)\n\ndef on_result(result):\n    print(f\"\u5f02\u6b65\u63a8\u7406\u7ed3\u679c: {result}\")\n\nthreaded_infer.infer_async(input_data, on_result)\n</code></pre>"},{"location":"deploy/#_18","title":"\u2753 \u5e38\u89c1\u95ee\u9898","text":""},{"location":"deploy/#q1-onnx","title":"Q1: ONNX\u6a21\u578b\u52a0\u8f7d\u5931\u8d25\uff1f","text":"<p>A: \u68c0\u67e5\u4ee5\u4e0b\u51e0\u70b9\uff1a</p> <pre><code># 1. \u68c0\u67e5\u6a21\u578b\u6587\u4ef6\nif not os.path.exists(\"model.onnx\"):\n    print(\"\u6a21\u578b\u6587\u4ef6\u4e0d\u5b58\u5728\")\n\n# 2. \u68c0\u67e5\u6a21\u578b\u683c\u5f0f\nimport onnx\ntry:\n    model = onnx.load(\"model.onnx\")\n    onnx.checker.check_model(model)\nexcept Exception as e:\n    print(f\"\u6a21\u578b\u683c\u5f0f\u9519\u8bef: {e}\")\n\n# 3. \u68c0\u67e5\u63a8\u7406\u63d0\u4f9b\u8005\navailable_providers = onnxruntime.get_available_providers()\nprint(f\"\u53ef\u7528\u63d0\u4f9b\u8005: {available_providers}\")\n</code></pre>"},{"location":"deploy/#q2-tensorrt","title":"Q2: TensorRT\u5f15\u64ce\u6784\u5efa\u5931\u8d25\uff1f","text":"<p>A: \u5e38\u89c1\u89e3\u51b3\u65b9\u6848\uff1a</p> <pre><code># 1. \u68c0\u67e5TensorRT\u7248\u672c\nimport tensorrt as trt\nprint(f\"TensorRT\u7248\u672c: {trt.__version__}\")\n\n# 2. \u68c0\u67e5CUDA\u7248\u672c\nimport torch\nprint(f\"CUDA\u7248\u672c: {torch.version.cuda}\")\n\n# 3. \u51cf\u5c11\u5de5\u4f5c\u7a7a\u95f4\u5927\u5c0f\ntrt_infer.build_engine(\n    onnx_path=\"model.onnx\",\n    engine_path=\"model.engine\",\n    max_workspace_size=1&lt;&lt;30  # 1GB\n)\n</code></pre>"},{"location":"deploy/#q3","title":"Q3: \u63a8\u7406\u6027\u80fd\u4e0d\u7406\u60f3\uff1f","text":"<p>A: \u6027\u80fd\u4f18\u5316\u5efa\u8bae\uff1a</p> <pre><code># 1. \u4f7f\u7528GPU\u63a8\u7406\ninfer = onnxruntime_deploy.OnnxInfer(\n    \"model.onnx\",\n    providers=[('CUDAExecutionProvider', {})]\n)\n\n# 2. \u542f\u7528\u6a21\u578b\u4f18\u5316\ninfer.optimizer(\"optimized.onnx\")\n\n# 3. \u4f7f\u7528FP16\ntrt_infer.build_engine(\n    onnx_path=\"model.onnx\",\n    engine_path=\"fp16.engine\",\n    fp16=True\n)\n</code></pre>"},{"location":"deploy/#q4","title":"Q4: \u5185\u5b58\u4e0d\u8db3\uff1f","text":"<p>A: \u5185\u5b58\u4f18\u5316\u65b9\u6cd5\uff1a</p> <pre><code># 1. \u51cf\u5c11\u6279\u5904\u7406\u5927\u5c0f\nbatch_size = 1  # \u4ece4\u51cf\u5c11\u52301\n\n# 2. \u4f7f\u7528\u52a8\u6001\u5f62\u72b6\ninfer.dynamic_input_shape(\"dynamic.onnx\", [[None, 3, None, None]])\n\n# 3. \u53ca\u65f6\u91ca\u653e\u5185\u5b58\nimport gc\ngc.collect()\n</code></pre>"},{"location":"deploy/#q5","title":"Q5: \u5171\u4eab\u5185\u5b58\u8fde\u63a5\u5931\u8d25\uff1f","text":"<p>A: \u68c0\u67e5\u8fde\u63a5\u8bbe\u7f6e\uff1a</p> <pre><code># 1. \u68c0\u67e5\u670d\u52a1\u5668\u72b6\u6001\nif not server.is_running():\n    print(\"\u670d\u52a1\u5668\u672a\u8fd0\u884c\")\n\n# 2. \u68c0\u67e5\u7aef\u53e3\u5360\u7528\nimport socket\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nresult = sock.connect_ex(('localhost', 8080))\nif result == 0:\n    print(\"\u7aef\u53e3\u88ab\u5360\u7528\")\n\n# 3. \u68c0\u67e5\u6743\u9650\nimport os\nif not os.access(\"/dev/shm\", os.W_OK):\n    print(\"\u5171\u4eab\u5185\u5b58\u6743\u9650\u4e0d\u8db3\")\n</code></pre>"},{"location":"deploy/#q6","title":"Q6: \u6a21\u578b\u7cbe\u5ea6\u4e0b\u964d\uff1f","text":"<p>A: \u7cbe\u5ea6\u4f18\u5316\u65b9\u6cd5\uff1a</p> <pre><code># 1. \u4f7f\u7528FP32\u800c\u4e0d\u662fFP16\ntrt_infer.build_engine(\n    onnx_path=\"model.onnx\",\n    engine_path=\"fp32.engine\",\n    fp16=False\n)\n\n# 2. \u68c0\u67e5\u91cf\u5316\u8bbe\u7f6e\n# \u907f\u514d\u8fc7\u5ea6\u91cf\u5316\n\n# 3. \u9a8c\u8bc1\u63a8\u7406\u7ed3\u679c\nexpected_result = reference_inference(input_data)\nactual_result = optimized_inference(input_data)\ndiff = np.abs(expected_result - actual_result).max()\nprint(f\"\u6700\u5927\u8bef\u5dee: {diff}\")\n</code></pre>"},{"location":"deploy/#_19","title":"\ud83d\udcca \u6027\u80fd\u57fa\u51c6","text":"\u63a8\u7406\u5f15\u64ce \u6a21\u578b\u5927\u5c0f \u63a8\u7406\u65f6\u95f4 \u5185\u5b58\u4f7f\u7528 \u9002\u7528\u573a\u666f ONNX Runtime (CPU) 50MB ~50ms ~200MB \u5f00\u53d1\u6d4b\u8bd5 ONNX Runtime (GPU) 50MB ~10ms ~500MB \u751f\u4ea7\u73af\u5883 TensorRT 50MB ~5ms ~800MB \u9ad8\u6027\u80fd\u9700\u6c42 \u5171\u4eab\u5185\u5b58 50MB ~2ms ~100MB \u4f4e\u5ef6\u8fdf\u9700\u6c42"},{"location":"deploy/#_20","title":"\ud83d\udd17 \u76f8\u5173\u94fe\u63a5","text":"<ul> <li>ONNX Runtime\u6587\u6863</li> <li>TensorRT\u6587\u6863</li> <li>OpenVINO\u6587\u6863</li> <li>\u5171\u4eab\u5185\u5b58\u6587\u6863</li> </ul> <p>\u5982\u6709\u95ee\u9898\uff0c\u8bf7\u67e5\u770b \u5e38\u89c1\u95ee\u9898 \u6216\u63d0\u4ea4 Issue</p>"},{"location":"general/","title":"General \u901a\u7528\u5de5\u5177\u6a21\u5757","text":"<p>\u63d0\u4f9b\u901a\u7528\u5de5\u5177\u548c\u529f\u80fd\uff0c\u5305\u62ec\u9ad8\u7ea7\u65e5\u5fd7\u8bb0\u5f55\u3001\u591a\u8fdb\u7a0b\u652f\u6301\u3001print\u91cd\u5b9a\u5411\u7b49</p>"},{"location":"general/#_1","title":"\ud83d\udccb \u76ee\u5f55","text":"<ul> <li>\u529f\u80fd\u7279\u6027</li> <li>\u5feb\u901f\u5f00\u59cb</li> <li>\u6838\u5fc3\u529f\u80fd</li> <li>\u4f7f\u7528\u6307\u5357</li> <li>\u9ad8\u7ea7\u529f\u80fd</li> <li>\u914d\u7f6e\u9009\u9879</li> <li>\u5e38\u89c1\u95ee\u9898</li> </ul>"},{"location":"general/#_2","title":"\u2728 \u529f\u80fd\u7279\u6027","text":"<ul> <li>\ud83d\udcdd \u9ad8\u7ea7\u65e5\u5fd7: \u57fa\u4e8eloguru\u7684\u5f3a\u5927\u65e5\u5fd7\u8bb0\u5f55\u529f\u80fd</li> <li>\ud83d\udd04 \u591a\u8fdb\u7a0b\u652f\u6301: \u7ebf\u7a0b\u5b89\u5168\u7684\u65e5\u5fd7\u8bb0\u5f55</li> <li>\ud83d\udda8\ufe0f Print\u91cd\u5b9a\u5411: \u81ea\u52a8\u6355\u83b7print\u8f93\u51fa\u5230\u65e5\u5fd7</li> <li>\ud83d\udcca \u65e5\u5fd7\u5206\u7ea7: \u652f\u6301\u591a\u79cd\u65e5\u5fd7\u7ea7\u522b\u548c\u8fc7\u6ee4</li> <li>\ud83d\udcc1 \u6587\u4ef6\u7ba1\u7406: \u81ea\u52a8\u65e5\u5fd7\u6587\u4ef6\u8f6e\u8f6c\u548c\u7ba1\u7406</li> <li>\ud83c\udfa8 \u5f69\u8272\u8f93\u51fa: \u7f8e\u89c2\u7684\u63a7\u5236\u53f0\u5f69\u8272\u65e5\u5fd7</li> <li>\ud83d\udee1\ufe0f \u5f02\u5e38\u6355\u83b7: \u81ea\u52a8\u5f02\u5e38\u8bb0\u5f55\u548c\u5806\u6808\u8ddf\u8e2a</li> </ul>"},{"location":"general/#_3","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"general/#_4","title":"\u57fa\u672c\u4f7f\u7528","text":"<pre><code>from sindre.general.logs import CustomLogger\n\n# \u521b\u5efa\u57fa\u672c\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = CustomLogger(\n    logger_name=\"MyApp\",\n    level=\"INFO\",\n    console_output=True,\n    file_output=True\n).get_logger()\n\n# \u8bb0\u5f55\u65e5\u5fd7\nlogger.info(\"\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\")\nlogger.warning(\"\u53d1\u73b0\u6f5c\u5728\u95ee\u9898\")\nlogger.error(\"\u53d1\u751f\u9519\u8bef\")\n</code></pre>"},{"location":"general/#_5","title":"\u9ad8\u7ea7\u914d\u7f6e","text":"<pre><code>from sindre.general.logs import CustomLogger\n\n# \u521b\u5efa\u9ad8\u7ea7\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = CustomLogger(\n    logger_name=\"AdvancedApp\",\n    level=\"DEBUG\",\n    log_dir=\"logs\",\n    console_output=True,\n    file_output=True,\n    capture_print=True\n).get_logger()\n\n# \u8bb0\u5f55\u4e0d\u540c\u7ea7\u522b\u7684\u65e5\u5fd7\nlogger.debug(\"\u8c03\u8bd5\u4fe1\u606f\")\nlogger.info(\"\u666e\u901a\u4fe1\u606f\")\nlogger.success(\"\u6210\u529f\u4fe1\u606f\")\nlogger.warning(\"\u8b66\u544a\u4fe1\u606f\")\nlogger.error(\"\u9519\u8bef\u4fe1\u606f\")\nlogger.critical(\"\u4e25\u91cd\u9519\u8bef\")\n</code></pre>"},{"location":"general/#_6","title":"\ud83d\udd27 \u6838\u5fc3\u529f\u80fd","text":""},{"location":"general/#customlogger","title":"CustomLogger \u7c7b","text":"<pre><code>class CustomLogger:\n    \"\"\"\u81ea\u5b9a\u4e49\u65e5\u5fd7\u8bb0\u5f55\u5668\u7c7b\"\"\"\n\n    def __init__(\n        self,\n        logger_name=None,\n        level=\"DEBUG\",\n        log_dir=\"logs\",\n        console_output=True,\n        file_output=False,\n        capture_print=False,\n        filter_log=None\n    ):\n        \"\"\"\n        \u521d\u59cb\u5316\u65e5\u5fd7\u8bb0\u5f55\u5668\n\n        Args:\n            logger_name: \u65e5\u5fd7\u8bb0\u5f55\u5668\u540d\u79f0\n            level: \u65e5\u5fd7\u7ea7\u522b (TRACE, DEBUG, INFO, SUCCESS, WARNING, ERROR, CRITICAL)\n            log_dir: \u65e5\u5fd7\u6587\u4ef6\u5b58\u50a8\u76ee\u5f55\n            console_output: \u662f\u5426\u542f\u7528\u63a7\u5236\u53f0\u8f93\u51fa\n            file_output: \u662f\u5426\u542f\u7528\u6587\u4ef6\u8f93\u51fa\n            capture_print: \u662f\u5426\u6355\u83b7print\u8f93\u51fa\n            filter_log: \u81ea\u5b9a\u4e49\u65e5\u5fd7\u8fc7\u6ee4\u51fd\u6570\n        \"\"\"\n\n    def get_logger(self):\n        \"\"\"\u83b7\u53d6\u914d\u7f6e\u597d\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u5b9e\u4f8b\"\"\"\n        return self.logger\n</code></pre>"},{"location":"general/#_7","title":"\ud83d\udcd6 \u4f7f\u7528\u6307\u5357","text":""},{"location":"general/#1","title":"1. \u57fa\u672c\u65e5\u5fd7\u8bb0\u5f55","text":""},{"location":"general/#_8","title":"\u7b80\u5355\u65e5\u5fd7\u8bb0\u5f55","text":"<pre><code>from sindre.general.logs import CustomLogger\n\n# \u521b\u5efa\u57fa\u672c\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = CustomLogger(\n    logger_name=\"SimpleApp\",\n    level=\"INFO\",\n    console_output=True\n).get_logger()\n\n# \u8bb0\u5f55\u4e0d\u540c\u7ea7\u522b\u7684\u65e5\u5fd7\nlogger.debug(\"\u8fd9\u662f\u8c03\u8bd5\u4fe1\u606f\")\nlogger.info(\"\u8fd9\u662f\u666e\u901a\u4fe1\u606f\")\nlogger.warning(\"\u8fd9\u662f\u8b66\u544a\u4fe1\u606f\")\nlogger.error(\"\u8fd9\u662f\u9519\u8bef\u4fe1\u606f\")\nlogger.critical(\"\u8fd9\u662f\u4e25\u91cd\u9519\u8bef\")\n\n# \u683c\u5f0f\u5316\u65e5\u5fd7\nname = \"\u5f20\u4e09\"\nage = 25\nlogger.info(f\"\u7528\u6237 {name} \u5e74\u9f84 {age} \u5c81\")\nlogger.info(\"\u7528\u6237 {} \u5e74\u9f84 {} \u5c81\", name, age)  # loguru\u98ce\u683c\n</code></pre>"},{"location":"general/#_9","title":"\u6587\u4ef6\u65e5\u5fd7\u8bb0\u5f55","text":"<pre><code>from sindre.general.logs import CustomLogger\n\n# \u521b\u5efa\u6587\u4ef6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = CustomLogger(\n    logger_name=\"FileApp\",\n    level=\"DEBUG\",\n    log_dir=\"logs\",\n    console_output=True,\n    file_output=True\n).get_logger()\n\n# \u65e5\u5fd7\u4f1a\u81ea\u52a8\u4fdd\u5b58\u5230\u6587\u4ef6\nlogger.info(\"\u8fd9\u6761\u4fe1\u606f\u4f1a\u540c\u65f6\u663e\u793a\u5728\u63a7\u5236\u53f0\u548c\u4fdd\u5b58\u5230\u6587\u4ef6\")\nlogger.error(\"\u9519\u8bef\u4fe1\u606f\u4e5f\u4f1a\u88ab\u8bb0\u5f55\")\n\n# \u67e5\u770b\u751f\u6210\u7684\u65e5\u5fd7\u6587\u4ef6\n# - logs/run_YYYY-MM-DD.log (\u8fd0\u884c\u65e5\u5fd7\uff0c\u6bcf\u5929\u8f6e\u8f6c)\n# - logs/error.log (\u9519\u8bef\u65e5\u5fd7\uff0c10MB\u8f6e\u8f6c)\n</code></pre>"},{"location":"general/#2-print","title":"2. Print\u91cd\u5b9a\u5411","text":""},{"location":"general/#print","title":"\u6355\u83b7Print\u8f93\u51fa","text":"<pre><code>from sindre.general.logs import CustomLogger\n\n# \u521b\u5efa\u652f\u6301print\u91cd\u5b9a\u5411\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = CustomLogger(\n    logger_name=\"PrintCapture\",\n    level=\"INFO\",\n    console_output=True,\n    capture_print=True\n).get_logger()\n\n# \u666e\u901a\u7684print\u8bed\u53e5\u4f1a\u88ab\u81ea\u52a8\u6355\u83b7\nprint(\"\u8fd9\u6761print\u8bed\u53e5\u4f1a\u88ab\u6355\u83b7\u5e76\u8bb0\u5f55\u5230\u65e5\u5fd7\u4e2d\")\nprint(\"\u5305\u542b\u884c\u53f7\u4fe1\u606f\u7684print\u8f93\u51fa\")\n\n# \u65e5\u5fd7\u8f93\u51fa\u793a\u4f8b\uff1a\n# 2024-01-01 12:00:00 | INFO     | PrintCapture | main.py:main:15 - Print(line 15): \u8fd9\u6761print\u8bed\u53e5\u4f1a\u88ab\u6355\u83b7\u5e76\u8bb0\u5f55\u5230\u65e5\u5fd7\u4e2d\n</code></pre>"},{"location":"general/#_10","title":"\u6df7\u5408\u4f7f\u7528","text":"<pre><code>from sindre.general.logs import CustomLogger\n\nlogger = CustomLogger(\n    logger_name=\"MixedApp\",\n    level=\"INFO\",\n    console_output=True,\n    capture_print=True\n).get_logger()\n\n# \u4f7f\u7528logger\u8bb0\u5f55\nlogger.info(\"\u4f7f\u7528logger\u8bb0\u5f55\u7684\u4fe1\u606f\")\n\n# \u4f7f\u7528print\uff08\u4f1a\u88ab\u81ea\u52a8\u6355\u83b7\uff09\nprint(\"\u4f7f\u7528print\u8f93\u51fa\u7684\u4fe1\u606f\")\n\n# \u4e24\u8005\u90fd\u4f1a\u663e\u793a\u5728\u65e5\u5fd7\u4e2d\uff0c\u4f46\u683c\u5f0f\u7565\u6709\u4e0d\u540c\n</code></pre>"},{"location":"general/#3","title":"3. \u5f02\u5e38\u6355\u83b7","text":""},{"location":"general/#_11","title":"\u81ea\u52a8\u5f02\u5e38\u6355\u83b7","text":"<pre><code>from sindre.general.logs import CustomLogger\n\nlogger = CustomLogger(\n    logger_name=\"ExceptionApp\",\n    level=\"INFO\",\n    console_output=True\n).get_logger()\n\n# \u4f7f\u7528\u88c5\u9970\u5668\u81ea\u52a8\u6355\u83b7\u5f02\u5e38\n@logger.catch\ndef risky_function():\n    \"\"\"\u53ef\u80fd\u51fa\u9519\u7684\u51fd\u6570\"\"\"\n    result = 10 / 0\n    return result\n\n# \u8c03\u7528\u51fd\u6570\uff0c\u5f02\u5e38\u4f1a\u88ab\u81ea\u52a8\u8bb0\u5f55\ntry:\n    risky_function()\nexcept Exception:\n    pass\n\n# \u624b\u52a8\u6355\u83b7\u5f02\u5e38\ntry:\n    raise ValueError(\"\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u5f02\u5e38\")\nexcept Exception:\n    logger.exception(\"\u6355\u83b7\u5230\u5f02\u5e38\")\n</code></pre>"},{"location":"general/#4","title":"4. \u65e5\u5fd7\u8fc7\u6ee4","text":""},{"location":"general/#_12","title":"\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668","text":"<pre><code>from sindre.general.logs import CustomLogger\n\n# \u5b9a\u4e49\u8fc7\u6ee4\u51fd\u6570\ndef info_only_filter(record):\n    \"\"\"\u53ea\u663e\u793aINFO\u7ea7\u522b\u7684\u65e5\u5fd7\"\"\"\n    return record[\"level\"].name == \"INFO\"\n\ndef exclude_sensitive_filter(record):\n    \"\"\"\u6392\u9664\u5305\u542b\u654f\u611f\u4fe1\u606f\u7684\u65e5\u5fd7\"\"\"\n    sensitive_words = [\"password\", \"token\", \"secret\"]\n    message = record[\"message\"].lower()\n    return not any(word in message for word in sensitive_words)\n\n# \u521b\u5efa\u5e26\u8fc7\u6ee4\u5668\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = CustomLogger(\n    logger_name=\"FilteredApp\",\n    level=\"DEBUG\",\n    console_output=True,\n    filter_log=info_only_filter\n).get_logger()\n\n# \u53ea\u6709INFO\u7ea7\u522b\u7684\u65e5\u5fd7\u4f1a\u88ab\u663e\u793a\nlogger.debug(\"\u8fd9\u6761\u8c03\u8bd5\u4fe1\u606f\u4e0d\u4f1a\u663e\u793a\")\nlogger.info(\"\u8fd9\u6761\u4fe1\u606f\u4f1a\u663e\u793a\")\nlogger.warning(\"\u8fd9\u6761\u8b66\u544a\u4e0d\u4f1a\u663e\u793a\")\n</code></pre>"},{"location":"general/#_13","title":"\ud83d\ude80 \u9ad8\u7ea7\u529f\u80fd","text":""},{"location":"general/#1_1","title":"1. \u591a\u8fdb\u7a0b\u65e5\u5fd7","text":"<pre><code>from sindre.general.logs import CustomLogger\nimport multiprocessing as mp\n\ndef worker_process(logger_name, process_id):\n    \"\"\"\u5de5\u4f5c\u8fdb\u7a0b\u51fd\u6570\"\"\"\n    logger = CustomLogger(\n        logger_name=logger_name,\n        level=\"INFO\",\n        log_dir=\"logs\",\n        console_output=False,\n        file_output=True\n    ).get_logger()\n\n    logger.info(f\"\u8fdb\u7a0b {process_id} \u5f00\u59cb\u5de5\u4f5c\")\n    # \u6267\u884c\u4e00\u4e9b\u5de5\u4f5c...\n    logger.info(f\"\u8fdb\u7a0b {process_id} \u5b8c\u6210\u5de5\u4f5c\")\n\n# \u4e3b\u8fdb\u7a0b\nif __name__ == \"__main__\":\n    main_logger = CustomLogger(\n        logger_name=\"MainApp\",\n        level=\"INFO\",\n        console_output=True,\n        file_output=True\n    ).get_logger()\n\n    main_logger.info(\"\u542f\u52a8\u591a\u8fdb\u7a0b\u4efb\u52a1\")\n\n    # \u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b\n    processes = []\n    for i in range(4):\n        p = mp.Process(target=worker_process, args=(\"WorkerApp\", i))\n        processes.append(p)\n        p.start()\n\n    # \u7b49\u5f85\u6240\u6709\u8fdb\u7a0b\u5b8c\u6210\n    for p in processes:\n        p.join()\n\n    main_logger.info(\"\u6240\u6709\u8fdb\u7a0b\u5b8c\u6210\")\n</code></pre>"},{"location":"general/#2","title":"2. \u65e5\u5fd7\u8f6e\u8f6c","text":"<pre><code>from sindre.general.logs import CustomLogger\n\n# \u65e5\u5fd7\u4f1a\u81ea\u52a8\u8f6e\u8f6c\nlogger = CustomLogger(\n    logger_name=\"RotationApp\",\n    level=\"INFO\",\n    log_dir=\"logs\",\n    file_output=True\n).get_logger()\n\n# \u8fd0\u884c\u65e5\u5fd7\uff1a\u6bcf\u592900:00\u8f6e\u8f6c\n# \u9519\u8bef\u65e5\u5fd7\uff1a\u8fbe\u523010MB\u65f6\u8f6e\u8f6c\nfor i in range(1000):\n    logger.info(f\"\u8fd9\u662f\u7b2c {i} \u6761\u65e5\u5fd7\u4fe1\u606f\")\n    if i % 100 == 0:\n        logger.error(f\"\u8fd9\u662f\u7b2c {i} \u6761\u9519\u8bef\u4fe1\u606f\")\n</code></pre>"},{"location":"general/#3_1","title":"3. \u6027\u80fd\u76d1\u63a7","text":"<pre><code>from sindre.general.logs import CustomLogger\nimport time\n\nlogger = CustomLogger(\n    logger_name=\"PerformanceApp\",\n    level=\"INFO\",\n    console_output=True\n).get_logger()\n\n# \u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u8bb0\u5f55\u6267\u884c\u65f6\u95f4\n@logger.catch\ndef performance_test():\n    start_time = time.time()\n\n    # \u6a21\u62df\u8017\u65f6\u64cd\u4f5c\n    time.sleep(2)\n\n    end_time = time.time()\n    execution_time = end_time - start_time\n\n    logger.info(f\"\u64cd\u4f5c\u5b8c\u6210\uff0c\u8017\u65f6: {execution_time:.2f}\u79d2\")\n\n    # \u6a21\u62df\u5f02\u5e38\n    if execution_time &gt; 1.5:\n        raise TimeoutError(\"\u64cd\u4f5c\u8d85\u65f6\")\n\n# \u6267\u884c\u6027\u80fd\u6d4b\u8bd5\nperformance_test()\n</code></pre>"},{"location":"general/#4_1","title":"4. \u7ed3\u6784\u5316\u65e5\u5fd7","text":"<pre><code>from sindre.general.logs import CustomLogger\nimport json\n\nlogger = CustomLogger(\n    logger_name=\"StructuredApp\",\n    level=\"INFO\",\n    console_output=True\n).get_logger()\n\n# \u8bb0\u5f55\u7ed3\u6784\u5316\u6570\u636e\nuser_data = {\n    \"user_id\": 12345,\n    \"username\": \"\u5f20\u4e09\",\n    \"action\": \"login\",\n    \"timestamp\": \"2024-01-01T12:00:00Z\"\n}\n\nlogger.info(\"\u7528\u6237\u64cd\u4f5c: {}\", json.dumps(user_data, ensure_ascii=False))\n\n# \u8bb0\u5f55\u4e1a\u52a1\u4e8b\u4ef6\ndef log_business_event(event_type, data):\n    \"\"\"\u8bb0\u5f55\u4e1a\u52a1\u4e8b\u4ef6\"\"\"\n    event = {\n        \"event_type\": event_type,\n        \"data\": data,\n        \"timestamp\": time.time()\n    }\n    logger.info(\"\u4e1a\u52a1\u4e8b\u4ef6: {}\", json.dumps(event, ensure_ascii=False))\n\n# \u4f7f\u7528\u793a\u4f8b\nlog_business_event(\"user_login\", {\"user_id\": 12345, \"ip\": \"192.168.1.1\"})\nlog_business_event(\"order_created\", {\"order_id\": \"ORD001\", \"amount\": 99.99})\n</code></pre>"},{"location":"general/#_14","title":"\u2699\ufe0f \u914d\u7f6e\u9009\u9879","text":""},{"location":"general/#_15","title":"\u65e5\u5fd7\u7ea7\u522b","text":"<pre><code># \u652f\u6301\u7684\u65e5\u5fd7\u7ea7\u522b\uff08\u4ece\u4f4e\u5230\u9ad8\uff09\nlevels = [\n    \"TRACE\",      # \u6700\u8be6\u7ec6\u7684\u8c03\u8bd5\u4fe1\u606f\n    \"DEBUG\",      # \u8c03\u8bd5\u4fe1\u606f\n    \"INFO\",       # \u4e00\u822c\u4fe1\u606f\n    \"SUCCESS\",    # \u6210\u529f\u4fe1\u606f\n    \"WARNING\",    # \u8b66\u544a\u4fe1\u606f\n    \"ERROR\",      # \u9519\u8bef\u4fe1\u606f\n    \"CRITICAL\"    # \u4e25\u91cd\u9519\u8bef\n]\n\n# \u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b\nlogger = CustomLogger(\n    logger_name=\"LevelApp\",\n    level=\"WARNING\",  # \u53ea\u663e\u793aWARNING\u53ca\u4ee5\u4e0a\u7ea7\u522b\u7684\u65e5\u5fd7\n    console_output=True\n).get_logger()\n</code></pre>"},{"location":"general/#_16","title":"\u65e5\u5fd7\u683c\u5f0f","text":"<pre><code># \u9ed8\u8ba4\u65e5\u5fd7\u683c\u5f0f\nlog_format = (\n    \"&lt;green&gt;{time:YYYY-MM-DD HH:mm:ss}&lt;/green&gt; | \"\n    \"&lt;level&gt;{level: &lt;8}&lt;/level&gt; | \"\n    \"&lt;blue&gt;{extra[name]: &lt;8}&lt;/blue&gt; | \"\n    \"&lt;cyan&gt;{file}&lt;/cyan&gt;:&lt;cyan&gt;{name}&lt;/cyan&gt;:&lt;cyan&gt;{function}&lt;/cyan&gt;:&lt;cyan&gt;{line}&lt;/cyan&gt; - \"\n    \"&lt;level&gt;{message}&lt;/level&gt;\"\n)\n\n# \u8f93\u51fa\u793a\u4f8b\uff1a\n# 2024-01-01 12:00:00 | INFO     | MyApp     | main.py:main:15 - \u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\n</code></pre>"},{"location":"general/#_17","title":"\u6587\u4ef6\u914d\u7f6e","text":"<pre><code># \u65e5\u5fd7\u6587\u4ef6\u914d\u7f6e\nlogger = CustomLogger(\n    logger_name=\"FileConfigApp\",\n    level=\"INFO\",\n    log_dir=\"custom_logs\",  # \u81ea\u5b9a\u4e49\u65e5\u5fd7\u76ee\u5f55\n    console_output=True,\n    file_output=True\n).get_logger()\n\n# \u751f\u6210\u7684\u6587\u4ef6\uff1a\n# - custom_logs/run_2024-01-01.log (\u8fd0\u884c\u65e5\u5fd7)\n# - custom_logs/error.log (\u9519\u8bef\u65e5\u5fd7)\n</code></pre>"},{"location":"general/#_18","title":"\u2753 \u5e38\u89c1\u95ee\u9898","text":""},{"location":"general/#q1","title":"Q1: \u5982\u4f55\u7981\u7528\u7279\u5b9a\u6a21\u5757\u7684\u65e5\u5fd7\uff1f","text":"<p>A: \u4f7f\u7528enable/disable\u65b9\u6cd5\uff1a</p> <pre><code>from sindre.general.logs import CustomLogger\n\nlogger = CustomLogger(\"MyApp\").get_logger()\n\n# \u7981\u7528\u5f53\u524d\u6a21\u5757\u7684\u65e5\u5fd7\nlogger.disable(__name__)\nlogger.info(\"\u8fd9\u6761\u65e5\u5fd7\u4e0d\u4f1a\u663e\u793a\")\n\n# \u91cd\u65b0\u542f\u7528\nlogger.enable(__name__)\nlogger.info(\"\u8fd9\u6761\u65e5\u5fd7\u4f1a\u663e\u793a\")\n</code></pre>"},{"location":"general/#q2","title":"Q2: \u5982\u4f55\u81ea\u5b9a\u4e49\u65e5\u5fd7\u683c\u5f0f\uff1f","text":"<p>A: \u4fee\u6539CustomLogger\u7c7b\u7684_configure_logger\u65b9\u6cd5\uff1a</p> <pre><code># \u5728CustomLogger\u7c7b\u4e2d\u4fee\u6539log_format\nlog_format = (\n    \"{time:YYYY-MM-DD HH:mm:ss} | \"\n    \"{level} | \"\n    \"{name} | \"\n    \"{message}\"\n)\n</code></pre>"},{"location":"general/#q3","title":"Q3: \u5982\u4f55\u5904\u7406\u5927\u91cf\u65e5\u5fd7\uff1f","text":"<p>A: \u4f7f\u7528\u65e5\u5fd7\u8f6e\u8f6c\u548c\u8fc7\u6ee4\uff1a</p> <pre><code>logger = CustomLogger(\n    logger_name=\"HighVolumeApp\",\n    level=\"WARNING\",  # \u53ea\u8bb0\u5f55\u91cd\u8981\u65e5\u5fd7\n    log_dir=\"logs\",\n    file_output=True\n).get_logger()\n\n# \u65e5\u5fd7\u4f1a\u81ea\u52a8\u8f6e\u8f6c\uff0c\u907f\u514d\u6587\u4ef6\u8fc7\u5927\n</code></pre>"},{"location":"general/#q4","title":"Q4: \u5982\u4f55\u5728\u4e0d\u540c\u8fdb\u7a0b\u95f4\u5171\u4eab\u65e5\u5fd7\uff1f","text":"<p>A: \u4f7f\u7528\u6587\u4ef6\u8f93\u51fa\u548c\u8fdb\u7a0b\u5b89\u5168\u7684\u914d\u7f6e\uff1a</p> <pre><code>logger = CustomLogger(\n    logger_name=\"MultiProcessApp\",\n    level=\"INFO\",\n    log_dir=\"logs\",\n    console_output=False,  # \u907f\u514d\u63a7\u5236\u53f0\u51b2\u7a81\n    file_output=True       # \u4f7f\u7528\u6587\u4ef6\u8f93\u51fa\n).get_logger()\n</code></pre>"},{"location":"general/#q5","title":"Q5: \u5982\u4f55\u6355\u83b7\u7b2c\u4e09\u65b9\u5e93\u7684\u65e5\u5fd7\uff1f","text":"<p>A: \u4f7f\u7528print\u91cd\u5b9a\u5411\u548c\u5f02\u5e38\u6355\u83b7\uff1a</p> <pre><code>logger = CustomLogger(\n    logger_name=\"ThirdPartyApp\",\n    level=\"INFO\",\n    console_output=True,\n    capture_print=True  # \u6355\u83b7print\u8f93\u51fa\n).get_logger()\n\n# \u7b2c\u4e09\u65b9\u5e93\u7684print\u8f93\u51fa\u4f1a\u88ab\u6355\u83b7\nimport some_third_party_library\nsome_third_party_library.some_function()\n</code></pre>"},{"location":"general/#q6","title":"Q6: \u5982\u4f55\u8c03\u8bd5\u65e5\u5fd7\u914d\u7f6e\u95ee\u9898\uff1f","text":"<p>A: \u4f7f\u7528\u7b80\u5355\u7684\u914d\u7f6e\u8fdb\u884c\u6d4b\u8bd5\uff1a</p> <pre><code># \u6700\u7b80\u5355\u7684\u914d\u7f6e\nlogger = CustomLogger(\n    logger_name=\"DebugApp\",\n    level=\"DEBUG\",\n    console_output=True,\n    file_output=False\n).get_logger()\n\n# \u9010\u6b65\u6dfb\u52a0\u529f\u80fd\nlogger.info(\"\u6d4b\u8bd5\u57fa\u672c\u529f\u80fd\")\nlogger.debug(\"\u6d4b\u8bd5\u8c03\u8bd5\u7ea7\u522b\")\n</code></pre>"},{"location":"general/#q7","title":"Q7: \u5982\u4f55\u4f18\u5316\u65e5\u5fd7\u6027\u80fd\uff1f","text":"<p>A: \u4f7f\u7528\u9002\u5f53\u7684\u914d\u7f6e\uff1a</p> <pre><code>logger = CustomLogger(\n    logger_name=\"PerformanceApp\",\n    level=\"INFO\",  # \u907f\u514d\u8fc7\u591aDEBUG\u65e5\u5fd7\n    console_output=True,\n    file_output=False,  # \u5982\u679c\u4e0d\u9700\u8981\u6587\u4ef6\u8f93\u51fa\n    capture_print=False  # \u5982\u679c\u4e0d\u9700\u8981\u6355\u83b7print\n).get_logger()\n</code></pre>"},{"location":"general/#q8","title":"Q8: \u5982\u4f55\u5904\u7406\u65e5\u5fd7\u6587\u4ef6\u6743\u9650\u95ee\u9898\uff1f","text":"<p>A: \u786e\u4fdd\u76ee\u5f55\u6743\u9650\u6b63\u786e\uff1a</p> <pre><code>import os\n\n# \u786e\u4fdd\u65e5\u5fd7\u76ee\u5f55\u5b58\u5728\u4e14\u6709\u5199\u6743\u9650\nlog_dir = \"logs\"\nos.makedirs(log_dir, exist_ok=True)\n\nlogger = CustomLogger(\n    logger_name=\"PermissionApp\",\n    log_dir=log_dir,\n    file_output=True\n).get_logger()\n</code></pre>"},{"location":"general/#_19","title":"\ud83d\udcca \u6027\u80fd\u57fa\u51c6","text":"\u64cd\u4f5c \u65e5\u5fd7\u6570\u91cf \u65f6\u95f4 \u5185\u5b58\u4f7f\u7528 \u63a7\u5236\u53f0\u8f93\u51fa 10,000\u6761 ~2s ~10MB \u6587\u4ef6\u8f93\u51fa 10,000\u6761 ~5s ~20MB Print\u91cd\u5b9a\u5411 10,000\u6761 ~3s ~15MB \u5f02\u5e38\u6355\u83b7 1,000\u6b21 ~1s ~5MB"},{"location":"general/#_20","title":"\ud83d\udd17 \u76f8\u5173\u94fe\u63a5","text":"<ul> <li>Loguru\u6587\u6863</li> <li>Python\u65e5\u5fd7\u6700\u4f73\u5b9e\u8df5</li> <li>\u591a\u8fdb\u7a0b\u65e5\u5fd7\u5904\u7406</li> </ul> <p>\u5982\u6709\u95ee\u9898\uff0c\u8bf7\u67e5\u770b \u5e38\u89c1\u95ee\u9898 \u6216\u63d0\u4ea4 Issue</p>"},{"location":"lmdb/","title":"LMDB \u6570\u636e\u5e93\u6a21\u5757","text":"<p>\u9ad8\u6027\u80fd\u7684LMDB\u6570\u636e\u5e93\u64cd\u4f5c\u6a21\u5757\uff0c\u652f\u6301\u5927\u89c4\u6a21\u6570\u636e\u5b58\u50a8\u548c\u9ad8\u6548\u8bfb\u53d6</p>"},{"location":"lmdb/#_1","title":"\ud83d\udccb \u76ee\u5f55","text":"<ul> <li>\u529f\u80fd\u7279\u6027</li> <li>\u5feb\u901f\u5f00\u59cb</li> <li>\u6838\u5fc3\u7c7b</li> <li>\u4f7f\u7528\u6307\u5357</li> <li>\u9ad8\u7ea7\u529f\u80fd</li> <li>\u6027\u80fd\u4f18\u5316</li> <li>\u5e38\u89c1\u95ee\u9898</li> </ul>"},{"location":"lmdb/#_2","title":"\u2728 \u529f\u80fd\u7279\u6027","text":"<ul> <li>\ud83d\ude80 \u9ad8\u6027\u80fd: \u57fa\u4e8eLMDB\u7684\u9ad8\u6027\u80fd\u6570\u636e\u5e93\u64cd\u4f5c</li> <li>\ud83d\udce6 \u6570\u636e\u5e8f\u5217\u5316: \u81ea\u52a8\u5904\u7406numpy\u6570\u7ec4\u548c\u590d\u6742\u6570\u636e\u7ed3\u6784</li> <li>\ud83d\udd04 \u591a\u8fdb\u7a0b\u652f\u6301: \u652f\u6301\u591a\u8fdb\u7a0b\u5e76\u53d1\u8bfb\u5199</li> <li>\ud83d\udcbe \u5185\u5b58\u4f18\u5316: \u667a\u80fd\u5185\u5b58\u7ba1\u7406\u548c\u5927\u5c0f\u63a7\u5236</li> <li>\ud83d\udd27 \u5de5\u5177\u4e30\u5bcc: \u63d0\u4f9b\u6570\u636e\u5e93\u5408\u5e76\u3001\u5206\u5272\u3001\u4fee\u590d\u7b49\u5de5\u5177</li> <li>\ud83d\udee1\ufe0f \u6570\u636e\u5b89\u5168: \u4e8b\u52a1\u6027\u64cd\u4f5c\uff0c\u786e\u4fdd\u6570\u636e\u4e00\u81f4\u6027</li> </ul>"},{"location":"lmdb/#_3","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"lmdb/#_4","title":"\u57fa\u672c\u4f7f\u7528","text":"<pre><code>import sindre.lmdb as lmdb\nimport numpy as np\n\n# \u521b\u5efa\u6570\u636e\u5e93,\u652f\u6301\u76ee\u5f55\uff0c\u4e5f\u652f\u6301\u6587\u4ef6\nwriter = lmdb.Writer('./data.db', map_size_limit=1024*100)  # map_size_limit\u5355\u4f4d\u4e3aMB \n#writer = lmdb.Writer('./data', map_size_limit=1024*100)  # \u4f1a\u521b\u5efadata\u76ee\u5f55\n\n# \u5199\u5165\u6570\u636e\ndata = {\n    'points': np.random.rand(100, 3),\n    'labels': np.random.randint(0, 10, 100),\n    'version': '1.0'\uff0c\n}\nwriter.put_samples(data)\nwriter.close()\n\n# \u8bfb\u53d6\u6570\u636e\nreader = lmdb.Reader('./data.db')\nsample = reader[0]\nprint(f\"\u8bfb\u53d6\u5230 {len(sample['points'])} \u4e2a\u70b9\")\nreader.close()\n</code></pre>"},{"location":"lmdb/#pytorch","title":"PyTorch \u6570\u636e\u96c6\u96c6\u6210","text":"<pre><code>import torch\nfrom sindre.lmdb import Reader\n\nclass LMDBDataset(torch.utils.data.Dataset):\n    def __init__(self, db_path):\n        self.db = Reader(db_path, multiprocessing=False)\n\n    def __len__(self):\n        return len(self.db)\n\n    def __getitem__(self, idx):\n        data = self.db[idx]\n        # \u8f6c\u6362\u4e3atorch\u5f20\u91cf\n        return {k: torch.from_numpy(v) for k, v in data.items()}\n\n# \u4f7f\u7528\ndataset = LMDBDataset('./data')\ndataloader = torch.utils.data.DataLoader(dataset, batch_size=32)\n</code></pre>"},{"location":"lmdb/#_5","title":"\ud83d\udd27 \u6838\u5fc3\u7c7b","text":""},{"location":"lmdb/#writer-","title":"Writer - \u6570\u636e\u5e93\u5199\u5165\u5668","text":"<pre><code>class Writer:\n    \"\"\"LMDB\u6570\u636e\u5e93\u5199\u5165\u5668\"\"\"\n\n    def __init__(self, dirpath: str, map_size_limit: int, multiprocessing: bool = False):\n        \"\"\"\n        \u521d\u59cb\u5316\u5199\u5165\u5668\n\n        Args:\n            dirpath: \u6570\u636e\u5e93\u76ee\u5f55\u8def\u5f84\n            map_size_limit: \u6570\u636e\u5e93\u5927\u5c0f\u9650\u5236\uff08MB\uff09\n            multiprocessing: \u662f\u5426\u542f\u7528\u591a\u8fdb\u7a0b\u652f\u6301\n        \"\"\"\n\n    def put_samples(self, samples: dict):\n        \"\"\"\u6279\u91cf\u5199\u5165\u6837\u672c\u6570\u636e\"\"\"\n\n    def change_value(self, num_id: int, samples: dict):\n        \"\"\"\u4fee\u6539\u6307\u5b9aID\u7684\u6570\u636e\"\"\"\n\n    def change_db_value(self, key: int, value: dict, safe_model: bool = True):\n        \"\"\"\u5b89\u5168\u4fee\u6539\u6570\u636e\u5e93\u503c\uff0c\u5e26\u786e\u8ba4\u63d0\u793a\"\"\"\n\n    def check_sample_size(self, samples: dict):\n        \"\"\"\u68c0\u67e5\u6837\u672c\u5927\u5c0f\uff08GB\uff09\"\"\"\n\n    def close(self):\n        \"\"\"\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5\"\"\"\n</code></pre>"},{"location":"lmdb/#reader-","title":"Reader - \u6570\u636e\u5e93\u8bfb\u53d6\u5668","text":"<pre><code>class Reader:\n    \"\"\"LMDB\u6570\u636e\u5e93\u8bfb\u53d6\u5668\"\"\"\n\n    def __init__(self, dirpath: str, multiprocessing: bool = False):\n        \"\"\"\n        \u521d\u59cb\u5316\u8bfb\u53d6\u5668\n\n        Args:\n            dirpath: \u6570\u636e\u5e93\u76ee\u5f55\u8def\u5f84\n            multiprocessing: \u662f\u5426\u542f\u7528\u591a\u8fdb\u7a0b\u652f\u6301\n        \"\"\"\n\n    def __getitem__(self, idx: int):\n        \"\"\"\u901a\u8fc7\u7d22\u5f15\u83b7\u53d6\u6570\u636e\"\"\"\n\n    def get_sample(self, idx: int):\n        \"\"\"\u83b7\u53d6\u5355\u4e2a\u6837\u672c\"\"\"\n\n    def get_samples(self, start_idx: int, size: int):\n        \"\"\"\u6279\u91cf\u83b7\u53d6\u6837\u672c\"\"\"\n\n    def get_data_keys(self, i: int = 0):\n        \"\"\"\u83b7\u53d6\u7b2ci\u4e2a\u6837\u672c\u7684\u6240\u6709\u952e\"\"\"\n\n    def get_data_value(self, i: int, key: str):\n        \"\"\"\u83b7\u53d6\u7b2ci\u4e2a\u6837\u672c\u7684\u6307\u5b9a\u952e\u503c\"\"\"\n\n    def get_data_specification(self, i: int):\n        \"\"\"\u83b7\u53d6\u7b2ci\u4e2a\u6837\u672c\u7684\u6570\u636e\u89c4\u8303\"\"\"\n\n    def get_meta_str(self, key):\n        \"\"\"\u83b7\u53d6\u5143\u6570\u636e\u5b57\u7b26\u4e32\"\"\"\n\n    def __len__(self):\n        \"\"\"\u83b7\u53d6\u6570\u636e\u5e93\u5927\u5c0f\"\"\"\n</code></pre>"},{"location":"lmdb/#readerlist-","title":"ReaderList - \u591a\u6570\u636e\u5e93\u8bfb\u53d6\u5668","text":"<pre><code>class ReaderList:\n    \"\"\"\u591a\u4e2aLMDB\u6570\u636e\u5e93\u7684\u7edf\u4e00\u8bfb\u53d6\u5668\"\"\"\n\n    def __init__(self, db_path_list: list, multiprocessing: bool = True):\n        \"\"\"\n        \u521d\u59cb\u5316\u591a\u6570\u636e\u5e93\u8bfb\u53d6\u5668\n\n        Args:\n            db_path_list: \u6570\u636e\u5e93\u8def\u5f84\u5217\u8868\n            multiprocessing: \u662f\u5426\u542f\u7528\u591a\u8fdb\u7a0b\u652f\u6301\n        \"\"\"\n</code></pre>"},{"location":"lmdb/#readerssd-ssd","title":"ReaderSSD - SSD\u4f18\u5316\u8bfb\u53d6\u5668","text":"<pre><code>class ReaderSSD:\n    \"\"\"\u9488\u5bf9SSD\u4f18\u5316\u7684\u8bfb\u53d6\u5668\"\"\"\n\n    def __init__(self, db_path: str, multiprocessing: bool = False):\n        \"\"\"\n        \u521d\u59cb\u5316SSD\u8bfb\u53d6\u5668\n\n        Args:\n            db_path: \u6570\u636e\u5e93\u8def\u5f84\n            multiprocessing: \u662f\u5426\u542f\u7528\u591a\u8fdb\u7a0b\u652f\u6301\n        \"\"\"\n\n    def get_batch(self, indices: list):\n        \"\"\"\u6279\u91cf\u83b7\u53d6\u6570\u636e\"\"\"\n</code></pre>"},{"location":"lmdb/#_6","title":"\ud83d\udcd6 \u4f7f\u7528\u6307\u5357","text":""},{"location":"lmdb/#1","title":"1. \u6570\u636e\u5199\u5165","text":""},{"location":"lmdb/#_7","title":"\u57fa\u672c\u5199\u5165","text":"<pre><code>import sindre.lmdb as lmdb\nimport numpy as np\n\n# \u521b\u5efa\u5199\u5165\u5668\nwriter = lmdb.Writer('./dataset', map_size_limit=1024*100)  # 100GB\n\n# \u5199\u5165\u5355\u4e2a\u6837\u672c\ndata = {\n    'points': np.random.rand(1000, 3),\n    'labels': np.random.randint(0, 10, 1000),\n    'features': np.random.rand(1000, 128)\n}\nwriter.put_samples({0: data})\n\n# \u6279\u91cf\u5199\u5165\nfor i in range(1000):\n    data = {\n        'points': np.random.rand(100, 3),\n        'labels': np.random.randint(0, 10, 100),\n        'id': i\n    }\n    writer.put_samples({i: data})\n\nwriter.close()\n</code></pre>"},{"location":"lmdb/#_8","title":"\u8bbe\u7f6e\u5143\u6570\u636e","text":"<pre><code># \u8bbe\u7f6e\u6570\u636e\u5e93\u5143\u6570\u636e\nwriter.set_meta_str(\"description\", \"\u70b9\u4e91\u6570\u636e\u96c6\")\nwriter.set_meta_str(\"version\", \"1.0\")\nwriter.set_meta_str(\"created_by\", \"sindre\")\n</code></pre>"},{"location":"lmdb/#_9","title":"\u6570\u636e\u4fee\u6539","text":"<pre><code># \u4fee\u6539\u73b0\u6709\u6570\u636e\nnew_data = {\n    'points': np.random.rand(200, 3),\n    'labels': np.random.randint(0, 10, 200),\n    'updated': True\n}\nwriter.change_value(0, new_data)\n\n# \u5b89\u5168\u4fee\u6539\uff08\u5e26\u786e\u8ba4\u63d0\u793a\uff09\nwriter.change_db_value(0, new_data, safe_model=True)\n</code></pre>"},{"location":"lmdb/#_10","title":"\u5185\u5b58\u5927\u5c0f\u68c0\u67e5","text":"<pre><code># \u68c0\u67e5\u6570\u636e\u5927\u5c0f\ndata = {\n    'points': np.random.rand(10000, 3),\n    'labels': np.random.randint(0, 10, 10000)\n}\ngb_required = writer.check_sample_size(data)\nprint(f\"\u6570\u636e\u5927\u5c0f: {gb_required:.2f} GB\")\n</code></pre>"},{"location":"lmdb/#2","title":"2. \u6570\u636e\u8bfb\u53d6","text":""},{"location":"lmdb/#_11","title":"\u57fa\u672c\u8bfb\u53d6","text":"<pre><code># \u521b\u5efa\u8bfb\u53d6\u5668\nreader = lmdb.Reader('./dataset')\n\n# \u83b7\u53d6\u6570\u636e\u5e93\u5927\u5c0f\nprint(f\"\u6570\u636e\u5e93\u5305\u542b {len(reader)} \u4e2a\u6837\u672c\")\n\n# \u8bfb\u53d6\u5355\u4e2a\u6837\u672c\nsample = reader[0]\nprint(f\"\u6837\u672c\u952e: {list(sample.keys())}\")\n\n# \u8bfb\u53d6\u6307\u5b9a\u6837\u672c\nsample = reader.get_sample(0)\nprint(f\"\u70b9\u4e91\u6570\u91cf: {len(sample['points'])}\")\n</code></pre>"},{"location":"lmdb/#_12","title":"\u6279\u91cf\u8bfb\u53d6","text":"<pre><code># \u6279\u91cf\u8bfb\u53d6\nsamples = reader.get_samples(0, 10)\nprint(f\"\u8bfb\u53d6\u4e86 {len(samples)} \u4e2a\u6837\u672c\")\n\n# \u4f7f\u7528ReaderList\u8bfb\u53d6\u591a\u4e2a\u6570\u636e\u5e93\nreader_list = lmdb.ReaderList(['./db1', './db2', './db3'])\nprint(f\"\u603b\u6837\u672c\u6570: {len(reader_list)}\")\n</code></pre>"},{"location":"lmdb/#_13","title":"\u5143\u6570\u636e\u67e5\u8be2","text":"<pre><code># \u83b7\u53d6\u5143\u6570\u636e\ndescription = reader.get_meta_str(\"description\")\nversion = reader.get_meta_str(\"version\")\nprint(f\"\u63cf\u8ff0: {description}, \u7248\u672c: {version}\")\n\n# \u83b7\u53d6\u6570\u636e\u952e\u4fe1\u606f\ndata_keys = reader.get_data_keys(0)\nprint(f\"\u6570\u636e\u952e: {data_keys}\")\n\n# \u83b7\u53d6\u6570\u636e\u89c4\u8303\nspec = reader.get_data_specification(0)\nfor key, info in spec.items():\n    print(f\"{key}: shape={info['shape']}, dtype={info['dtype']}\")\n</code></pre>"},{"location":"lmdb/#3","title":"3. \u591a\u8fdb\u7a0b\u652f\u6301","text":"<pre><code># \u542f\u7528\u591a\u8fdb\u7a0b\u5199\u5165\nwriter = lmdb.Writer('./dataset', map_size_limit=1024*100, multiprocessing=True)\n\n# \u542f\u7528\u591a\u8fdb\u7a0b\u8bfb\u53d6\nreader = lmdb.Reader('./dataset', multiprocessing=True)\n</code></pre>"},{"location":"lmdb/#_14","title":"\ud83d\udd27 \u9ad8\u7ea7\u529f\u80fd","text":""},{"location":"lmdb/#_15","title":"\u6570\u636e\u5e93\u5de5\u5177\u51fd\u6570","text":"<pre><code>import sindre.lmdb as lmdb\n\n# \u5408\u5e76\u6570\u636e\u5e93\nlmdb.MergeLmdb(\n    target_dir='./merged_db',\n    source_dirs=['./db1', './db2', './db3'],\n    map_size_limit=1024*100,\n    multiprocessing=True\n)\n\n# \u5206\u5272\u6570\u636e\u5e93\nlmdb.SplitLmdb(\n    source_dir='./large_db',\n    target_dirs=['./part1', './part2', './part3'],\n    map_size_limit=1024*50,\n    multiprocessing=True\n)\n\n# \u4fee\u590dWindows\u5927\u5c0f\u95ee\u9898\nlmdb.fix_lmdb_windows_size('./database')\n\n# \u5e76\u884c\u5199\u5165\ndef process_function(file_path):\n    # \u5904\u7406\u5355\u4e2a\u6587\u4ef6\u7684\u51fd\u6570\n    return {'processed_data': np.random.rand(100, 3)}\n\nlmdb.parallel_write(\n    output_dir='./processed_db',\n    file_list=['file1.txt', 'file2.txt', 'file3.txt'],\n    process=process_function,\n    map_size_limit=1024*100,\n    num_processes=4,\n    multiprocessing=True\n)\n</code></pre>"},{"location":"lmdb/#ssd","title":"SSD\u4f18\u5316\u8bfb\u53d6","text":"<pre><code># \u4f7f\u7528SSD\u4f18\u5316\u8bfb\u53d6\u5668\nreader_ssd = lmdb.ReaderSSD('./dataset', multiprocessing=False)\n\n# \u6279\u91cf\u8bfb\u53d6\nindices = [0, 1, 2, 3, 4]\nbatch_data = reader_ssd.get_batch(indices)\nprint(f\"\u6279\u91cf\u8bfb\u53d6\u4e86 {len(batch_data)} \u4e2a\u6837\u672c\")\n\n# \u591a\u6570\u636e\u5e93SSD\u8bfb\u53d6\nreader_ssd_list = lmdb.ReaderSSDList(['./db1', './db2'], multiprocessing=False)\n</code></pre>"},{"location":"lmdb/#_16","title":"\u26a1 \u6027\u80fd\u4f18\u5316","text":""},{"location":"lmdb/#1_1","title":"1. \u5185\u5b58\u7ba1\u7406","text":"<pre><code># \u5408\u7406\u8bbe\u7f6emap_size_limit\n# \u5efa\u8bae\u8bbe\u7f6e\u4e3a\u9884\u671f\u6570\u636e\u5927\u5c0f\u76841.5-2\u500d\nexpected_size_gb = 50\nmap_size_limit_mb = int(expected_size_gb * 1.5 * 1024)\nwriter = lmdb.Writer('./dataset', map_size_limit=map_size_limit_mb)\n</code></pre>"},{"location":"lmdb/#2_1","title":"2. \u591a\u8fdb\u7a0b\u4f18\u5316","text":"<pre><code># \u5199\u5165\u65f6\u4f7f\u7528\u591a\u8fdb\u7a0b\nwriter = lmdb.Writer('./dataset', map_size_limit=1024*100, multiprocessing=True)\n\n# \u8bfb\u53d6\u65f6\u6839\u636e\u6570\u636e\u5927\u5c0f\u51b3\u5b9a\u662f\u5426\u4f7f\u7528\u591a\u8fdb\u7a0b\nif len(reader) &gt; 10000:\n    reader = lmdb.Reader('./dataset', multiprocessing=True)\nelse:\n    reader = lmdb.Reader('./dataset', multiprocessing=False)\n</code></pre>"},{"location":"lmdb/#3_1","title":"3. \u6279\u91cf\u64cd\u4f5c","text":"<pre><code># \u6279\u91cf\u5199\u5165\u800c\u4e0d\u662f\u9010\u4e2a\u5199\u5165\nbatch_data = {}\nfor i in range(1000):\n    batch_data[i] = {\n        'points': np.random.rand(100, 3),\n        'labels': np.random.randint(0, 10, 100)\n    }\nwriter.put_samples(batch_data)\n</code></pre>"},{"location":"lmdb/#_17","title":"\u2753 \u5e38\u89c1\u95ee\u9898","text":""},{"location":"lmdb/#q1-map_size_limit","title":"Q1: map_size_limit \u8bbe\u7f6e\u591a\u5927\u5408\u9002\uff1f","text":"<p>A: \u5efa\u8bae\u8bbe\u7f6e\u4e3a\u9884\u671f\u6570\u636e\u5927\u5c0f\u76841.5-2\u500d\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6570\u636e\u5927\u7ea650GB\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\uff1a</p> <pre><code>map_size_limit = int(50 * 1.5 * 1024)  # 75GB in MB\n</code></pre>"},{"location":"lmdb/#q2","title":"Q2: \u591a\u8fdb\u7a0b\u6a21\u5f0f\u4ec0\u4e48\u65f6\u5019\u4f7f\u7528\uff1f","text":"<p>A:  - \u5199\u5165\u65f6: \u6570\u636e\u91cf\u5927\uff08&gt;1GB\uff09\u65f6\u5efa\u8bae\u4f7f\u7528 - \u8bfb\u53d6\u65f6: \u6570\u636e\u5e93\u6837\u672c\u6570\u591a\uff08&gt;10000\uff09\u65f6\u5efa\u8bae\u4f7f\u7528</p>"},{"location":"lmdb/#q3","title":"Q3: \u5982\u4f55\u5904\u7406\u6570\u636e\u5e93\u635f\u574f\uff1f","text":"<p>A: \u4f7f\u7528\u4fee\u590d\u5de5\u5177\uff1a</p> <pre><code>lmdb.fix_lmdb_windows_size('./database')\n</code></pre>"},{"location":"lmdb/#q4","title":"Q4: \u5982\u4f55\u68c0\u67e5\u6570\u636e\u5e93\u72b6\u6001\uff1f","text":"<p>A: </p> <pre><code>writer.check_db_stats()  # \u68c0\u67e5\u6570\u636e\u5e93\u7edf\u8ba1\u4fe1\u606f\n</code></pre>"},{"location":"lmdb/#q5","title":"Q5: \u652f\u6301\u54ea\u4e9b\u6570\u636e\u7c7b\u578b\uff1f","text":"<p>A: \u4e3b\u8981\u652f\u6301numpy\u6570\u7ec4\uff0c\u5176\u4ed6\u7c7b\u578b\u4f1a\u81ea\u52a8\u8f6c\u6362\uff1a</p> <pre><code># \u652f\u6301\u7684\u6570\u636e\ndata = {\n    'points': np.random.rand(100, 3),      # numpy\u6570\u7ec4\n    'labels': np.random.randint(0, 10, 100), # numpy\u6570\u7ec4\n    'metadata': 'test'                      # \u5b57\u7b26\u4e32\uff08\u4f1a\u88ab\u5e8f\u5217\u5316\uff09\n}\n</code></pre>"},{"location":"lmdb/#q6","title":"Q6: \u5982\u4f55\u9ad8\u6548\u5730\u4fee\u6539\u73b0\u6709\u6570\u636e\uff1f","text":"<p>A: \u4f7f\u7528\u5b89\u5168\u4fee\u6539\u6a21\u5f0f\uff1a</p> <pre><code># \u5e26\u786e\u8ba4\u63d0\u793a\u7684\u5b89\u5168\u4fee\u6539\nwriter.change_db_value(0, new_data, safe_model=True)\n\n# \u76f4\u63a5\u4fee\u6539\uff08\u65e0\u786e\u8ba4\uff09\nwriter.change_value(0, new_data)\n</code></pre>"},{"location":"lmdb/#_18","title":"\ud83d\udcca \u6027\u80fd\u57fa\u51c6","text":"\u64cd\u4f5c \u6570\u636e\u5927\u5c0f \u65f6\u95f4 \u5185\u5b58\u4f7f\u7528 \u5199\u5165 1GB ~30s ~2GB \u8bfb\u53d6 1GB ~5s ~1GB \u6279\u91cf\u8bfb\u53d6 1GB ~2s ~1.5GB \u968f\u673a\u8bbf\u95ee 1GB ~10s ~1GB"},{"location":"lmdb/#_19","title":"\ud83d\udd17 \u76f8\u5173\u94fe\u63a5","text":"<ul> <li>LMDB\u5b98\u65b9\u6587\u6863</li> <li>PyTorch\u6570\u636e\u96c6\u6559\u7a0b</li> <li>NumPy\u6587\u6863</li> </ul> <p>\u5982\u6709\u95ee\u9898\uff0c\u8bf7\u67e5\u770b \u5e38\u89c1\u95ee\u9898 \u6216\u63d0\u4ea4 Issue</p>"},{"location":"report/","title":"Report \u62a5\u544a\u751f\u6210\u6a21\u5757","text":"<p>\u5feb\u901f\u751f\u6210\u7f8e\u89c2\u7684HTML\u6d4b\u8bd5\u62a5\u544a\uff0c\u652f\u6301\u56fe\u7247\u3001\u94fe\u63a5\u3001\u6570\u636e\u53ef\u89c6\u5316\u7b49\u529f\u80fd</p>"},{"location":"report/#_1","title":"\ud83d\udccb \u76ee\u5f55","text":"<ul> <li>\u529f\u80fd\u7279\u6027</li> <li>\u5feb\u901f\u5f00\u59cb</li> <li>\u6838\u5fc3\u529f\u80fd</li> <li>\u4f7f\u7528\u6307\u5357</li> <li>\u9ad8\u7ea7\u529f\u80fd</li> <li>\u6a21\u677f\u5b9a\u5236</li> <li>\u5e38\u89c1\u95ee\u9898</li> </ul>"},{"location":"report/#_2","title":"\u2728 \u529f\u80fd\u7279\u6027","text":"<ul> <li>\ud83d\udcca HTML\u62a5\u544a: \u751f\u6210\u7f8e\u89c2\u7684HTML\u683c\u5f0f\u6d4b\u8bd5\u62a5\u544a</li> <li>\ud83d\uddbc\ufe0f \u56fe\u7247\u652f\u6301: \u652f\u6301PIL\u56fe\u7247\u548cBase64\u7f16\u7801\u56fe\u7247</li> <li>\ud83d\udd17 \u94fe\u63a5\u5d4c\u5165: \u652f\u6301\u4e0b\u8f7d\u94fe\u63a5\u548c\u5916\u90e8\u94fe\u63a5</li> <li>\ud83d\udcc8 \u6570\u636e\u53ef\u89c6\u5316: \u652f\u6301\u56fe\u8868\u548c\u7edf\u8ba1\u4fe1\u606f\u5c55\u793a</li> <li>\ud83c\udfa8 \u6a21\u677f\u5b9a\u5236: \u53ef\u81ea\u5b9a\u4e49\u62a5\u544a\u6a21\u677f\u548c\u6837\u5f0f</li> <li>\ud83d\udcf1 \u54cd\u5e94\u5f0f\u8bbe\u8ba1: \u652f\u6301\u79fb\u52a8\u7aef\u548c\u684c\u9762\u7aef\u663e\u793a</li> <li>\u26a1 \u5feb\u901f\u751f\u6210: \u9ad8\u6548\u7684\u62a5\u544a\u751f\u6210\u548c\u5904\u7406</li> </ul>"},{"location":"report/#_3","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"report/#_4","title":"\u57fa\u672c\u4f7f\u7528","text":"<pre><code>from sindre.report import Report\n\n# \u521b\u5efa\u62a5\u544a\u5bf9\u8c61\nreport = Report()\n\n# \u6dfb\u52a0\u6d4b\u8bd5\u7ed3\u679c\ntest_result = {\n    \"className\": \"ModelTest\",\n    \"methodName\": \"test_accuracy\",\n    \"description\": \"\u6d4b\u8bd5\u6a21\u578b\u51c6\u786e\u7387\",\n    \"spendTime\": \"2.5 s\",\n    \"status\": \"\u6210\u529f\",\n    \"log\": [\"\u51c6\u786e\u7387: 95.2%\", \"\u635f\u5931: 0.048\"]\n}\n\nreport.append_row(test_result)\n\n# \u751f\u6210\u62a5\u544a\nreport.write(\"./reports/\")\n</code></pre>"},{"location":"report/#_5","title":"\u5e26\u56fe\u7247\u7684\u62a5\u544a","text":"<pre><code>from sindre.report import Report\nfrom PIL import Image\n\n# \u521b\u5efa\u62a5\u544a\nreport = Report()\n\n# \u52a0\u8f7d\u56fe\u7247\nimage = Image.open('./result.png')\n\n# \u8f6c\u6362\u4e3aBase64\nb64_image = Report.PIL_To_B64(image)\n\n# \u6dfb\u52a0\u5e26\u56fe\u7247\u7684\u6d4b\u8bd5\u7ed3\u679c\ntest_result = {\n    \"className\": \"ImageTest\",\n    \"methodName\": \"test_image_processing\",\n    \"description\": \"\u6d4b\u8bd5\u56fe\u50cf\u5904\u7406\u529f\u80fd\",\n    \"spendTime\": \"1.2 s\",\n    \"status\": \"\u6210\u529f\",\n    \"log\": [\n        \"\u5904\u7406\u5b8c\u6210\",\n        b64_image,  # \u5d4c\u5165\u56fe\u7247\n        \"\u8fd9\u662f\u6587\u672c\u52a0\u56fe\u7247\u7684\u6df7\u5408\u5185\u5bb9\"\n    ]\n}\n\nreport.append_row(test_result)\nreport.write(\"./reports/\")\n</code></pre>"},{"location":"report/#_6","title":"\ud83d\udd27 \u6838\u5fc3\u529f\u80fd","text":""},{"location":"report/#report_1","title":"Report \u7c7b","text":"<pre><code>class Report:\n    \"\"\"HTML\u62a5\u544a\u751f\u6210\u5668\"\"\"\n\n    def __init__(self):\n        \"\"\"\u521d\u59cb\u5316\u62a5\u544a\u5bf9\u8c61\"\"\"\n        self.data = {\n            \"testPass\": 0,\n            \"testResult\": [],\n            \"testName\": \"\u6d4b\u8bd5\u62a5\u544a\",\n            \"testAll\": 0,\n            \"testFail\": 0,\n            \"beginTime\": \"2024-01-01 00:00:00\",\n            \"totalTime\": \"\",\n            \"testSkip\": 0,\n        }\n        self.file_path = os.path.dirname(__file__)\n\n    def append_row(self, row_data: dict):\n        \"\"\"\n        \u6dfb\u52a0\u6d4b\u8bd5\u7ed3\u679c\u884c\n\n        Args:\n            row_data: \u5305\u542b\u6d4b\u8bd5\u4fe1\u606f\u7684\u5b57\u5178\n                - className: \u6d4b\u8bd5\u7c7b\u540d\n                - methodName: \u6d4b\u8bd5\u65b9\u6cd5\u540d\n                - description: \u6d4b\u8bd5\u63cf\u8ff0\n                - spendTime: \u8017\u65f6\n                - status: \u72b6\u6001 (\u6210\u529f/\u5931\u8d25/\u8df3\u8fc7)\n                - log: \u65e5\u5fd7\u5217\u8868\n        \"\"\"\n\n    @staticmethod\n    def PIL_To_B64(image: PIL.Image.Image) -&gt; str:\n        \"\"\"\n        \u5c06PIL\u56fe\u7247\u8f6c\u6362\u4e3aBase64\u5b57\u7b26\u4e32\n\n        Args:\n            image: PIL\u56fe\u7247\u5bf9\u8c61\n\n        Returns:\n            str: Base64\u7f16\u7801\u7684\u56fe\u7247\u5b57\u7b26\u4e32\n        \"\"\"\n\n    def write(self, path: str = \"./\"):\n        \"\"\"\n        \u751f\u6210\u5e76\u4fdd\u5b58HTML\u62a5\u544a\n\n        Args:\n            path: \u4fdd\u5b58\u8def\u5f84\uff0c\u9ed8\u8ba4\u4e3a\u5f53\u524d\u76ee\u5f55\n        \"\"\"\n</code></pre>"},{"location":"report/#_7","title":"\ud83d\udcd6 \u4f7f\u7528\u6307\u5357","text":""},{"location":"report/#1","title":"1. \u57fa\u7840\u62a5\u544a\u751f\u6210","text":""},{"location":"report/#_8","title":"\u7b80\u5355\u6d4b\u8bd5\u62a5\u544a","text":"<pre><code>from sindre.report import Report\n\n# \u521b\u5efa\u62a5\u544a\nreport = Report()\n\n# \u6dfb\u52a0\u6210\u529f\u6d4b\u8bd5\nsuccess_test = {\n    \"className\": \"BasicTest\",\n    \"methodName\": \"test_addition\",\n    \"description\": \"\u6d4b\u8bd5\u52a0\u6cd5\u8fd0\u7b97\",\n    \"spendTime\": \"0.1 s\",\n    \"status\": \"\u6210\u529f\",\n    \"log\": [\"1 + 1 = 2\", \"\u6d4b\u8bd5\u901a\u8fc7\"]\n}\n\n# \u6dfb\u52a0\u5931\u8d25\u6d4b\u8bd5\nfailed_test = {\n    \"className\": \"BasicTest\",\n    \"methodName\": \"test_division\",\n    \"description\": \"\u6d4b\u8bd5\u9664\u6cd5\u8fd0\u7b97\",\n    \"spendTime\": \"0.05 s\",\n    \"status\": \"\u5931\u8d25\",\n    \"log\": [\"\u9664\u96f6\u9519\u8bef\", \"\u9700\u8981\u4fee\u590d\"]\n}\n\n# \u6dfb\u52a0\u8df3\u8fc7\u6d4b\u8bd5\nskipped_test = {\n    \"className\": \"BasicTest\",\n    \"methodName\": \"test_advanced\",\n    \"description\": \"\u9ad8\u7ea7\u529f\u80fd\u6d4b\u8bd5\",\n    \"spendTime\": \"0 s\",\n    \"status\": \"\u8df3\u8fc7\",\n    \"log\": [\"\u529f\u80fd\u672a\u5b9e\u73b0\"]\n}\n\n# \u6dfb\u52a0\u5230\u62a5\u544a\nreport.append_row(success_test)\nreport.append_row(failed_test)\nreport.append_row(skipped_test)\n\n# \u751f\u6210\u62a5\u544a\nreport.write(\"./test_reports/\")\n</code></pre>"},{"location":"report/#_9","title":"\u6279\u91cf\u6d4b\u8bd5\u62a5\u544a","text":"<pre><code>from sindre.report import Report\nimport time\n\n# \u521b\u5efa\u62a5\u544a\nreport = Report()\n\n# \u6a21\u62df\u6279\u91cf\u6d4b\u8bd5\ntest_cases = [\n    (\"test_function_1\", \"\u529f\u80fd1\u6d4b\u8bd5\", \"\u6210\u529f\"),\n    (\"test_function_2\", \"\u529f\u80fd2\u6d4b\u8bd5\", \"\u6210\u529f\"),\n    (\"test_function_3\", \"\u529f\u80fd3\u6d4b\u8bd5\", \"\u5931\u8d25\"),\n    (\"test_function_4\", \"\u529f\u80fd4\u6d4b\u8bd5\", \"\u8df3\u8fc7\"),\n]\n\nfor i, (method_name, description, status) in enumerate(test_cases):\n    test_result = {\n        \"className\": f\"BatchTest{i//2}\",\n        \"methodName\": method_name,\n        \"description\": description,\n        \"spendTime\": f\"{0.1 + i*0.05:.2f} s\",\n        \"status\": status,\n        \"log\": [f\"\u6d4b\u8bd5\u7ed3\u679c: {status}\"]\n    }\n    report.append_row(test_result)\n\n# \u751f\u6210\u62a5\u544a\nreport.write(\"./batch_reports/\")\n</code></pre>"},{"location":"report/#2","title":"2. \u56fe\u7247\u548c\u53ef\u89c6\u5316\u62a5\u544a","text":""},{"location":"report/#_10","title":"\u56fe\u8868\u62a5\u544a","text":"<pre><code>from sindre.report import Report\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# \u521b\u5efa\u62a5\u544a\nreport = Report()\n\n# \u751f\u6210\u6d4b\u8bd5\u56fe\u8868\nfig, ax = plt.subplots(figsize=(8, 6))\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nax.plot(x, y)\nax.set_title('\u6d4b\u8bd5\u56fe\u8868')\nax.set_xlabel('X\u8f74')\nax.set_ylabel('Y\u8f74')\n\n# \u4fdd\u5b58\u56fe\u8868\nplt.savefig('test_chart.png')\nplt.close()\n\n# \u8f6c\u6362\u4e3aBase64\nfrom PIL import Image\nchart_image = Image.open('test_chart.png')\nb64_chart = Report.PIL_To_B64(chart_image)\n\n# \u6dfb\u52a0\u5e26\u56fe\u8868\u7684\u6d4b\u8bd5\u7ed3\u679c\nchart_test = {\n    \"className\": \"VisualizationTest\",\n    \"methodName\": \"test_chart_generation\",\n    \"description\": \"\u6d4b\u8bd5\u56fe\u8868\u751f\u6210\u529f\u80fd\",\n    \"spendTime\": \"1.5 s\",\n    \"status\": \"\u6210\u529f\",\n    \"log\": [\n        \"\u56fe\u8868\u751f\u6210\u6210\u529f\",\n        b64_chart,\n        \"\u56fe\u8868\u6570\u636e: 100\u4e2a\u70b9\"\n    ]\n}\n\nreport.append_row(chart_test)\nreport.write(\"./visual_reports/\")\n</code></pre>"},{"location":"report/#_11","title":"\u591a\u56fe\u7247\u62a5\u544a","text":"<pre><code>from sindre.report import Report\nfrom PIL import Image, ImageDraw\n\n# \u521b\u5efa\u62a5\u544a\nreport = Report()\n\n# \u751f\u6210\u591a\u4e2a\u6d4b\u8bd5\u56fe\u7247\nfor i in range(3):\n    # \u521b\u5efa\u6d4b\u8bd5\u56fe\u7247\n    img = Image.new('RGB', (200, 200), color='white')\n    draw = ImageDraw.Draw(img)\n    draw.text((50, 100), f'Test Image {i+1}', fill='black')\n\n    # \u8f6c\u6362\u4e3aBase64\n    b64_img = Report.PIL_To_B64(img)\n\n    # \u6dfb\u52a0\u6d4b\u8bd5\u7ed3\u679c\n    test_result = {\n        \"className\": \"ImageTest\",\n        \"methodName\": f\"test_image_{i+1}\",\n        \"description\": f\"\u6d4b\u8bd5\u56fe\u7247\u751f\u6210 {i+1}\",\n        \"spendTime\": \"0.2 s\",\n        \"status\": \"\u6210\u529f\",\n        \"log\": [\n            f\"\u56fe\u7247 {i+1} \u751f\u6210\u6210\u529f\",\n            b64_img\n        ]\n    }\n    report.append_row(test_result)\n\nreport.write(\"./image_reports/\")\n</code></pre>"},{"location":"report/#3","title":"3. \u590d\u6742\u65e5\u5fd7\u62a5\u544a","text":""},{"location":"report/#_12","title":"\u6df7\u5408\u5185\u5bb9\u62a5\u544a","text":"<pre><code>from sindre.report import Report\n\n# \u521b\u5efa\u62a5\u544a\nreport = Report()\n\n# \u590d\u6742\u6d4b\u8bd5\u7ed3\u679c\ncomplex_test = {\n    \"className\": \"ComplexTest\",\n    \"methodName\": \"test_complex_function\",\n    \"description\": \"\u6d4b\u8bd5\u590d\u6742\u529f\u80fd\",\n    \"spendTime\": \"5.2 s\",\n    \"status\": \"\u6210\u529f\",\n    \"log\": [\n        \"&lt;br&gt;&lt;/br&gt;\",  # HTML\u6362\u884c\n        \"\u5f00\u59cb\u6d4b\u8bd5...\",\n        \"\u6b65\u9aa41: \u521d\u59cb\u5316\u5b8c\u6210\",\n        \"\u6b65\u9aa42: \u6570\u636e\u5904\u7406\u5b8c\u6210\",\n        \"\u6b65\u9aa43: \u7ed3\u679c\u9a8c\u8bc1\u5b8c\u6210\",\n        \"\u6d4b\u8bd5\u5b8c\u6210\uff01\",\n        \"&lt;a href='https://example.com'&gt;\u67e5\u770b\u8be6\u7ec6\u6587\u6863&lt;/a&gt;\",  # HTML\u94fe\u63a5\n        \"\"\n    ]\n}\n\nreport.append_row(complex_test)\nreport.write(\"./complex_reports/\")\n</code></pre>"},{"location":"report/#_13","title":"\ud83d\ude80 \u9ad8\u7ea7\u529f\u80fd","text":""},{"location":"report/#1_1","title":"1. \u81ea\u5b9a\u4e49\u62a5\u544a\u6807\u9898","text":"<pre><code>from sindre.report import Report\n\n# \u521b\u5efa\u62a5\u544a\u5e76\u8bbe\u7f6e\u6807\u9898\nreport = Report()\nreport.data[\"testName\"] = \"\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u8bc4\u4f30\u62a5\u544a\"\n\n# \u6dfb\u52a0\u6d4b\u8bd5\u7ed3\u679c...\nreport.write(\"./custom_reports/\")\n</code></pre>"},{"location":"report/#2_1","title":"2. \u7edf\u8ba1\u4fe1\u606f\u81ea\u52a8\u8ba1\u7b97","text":"<pre><code>from sindre.report import Report\n\n# \u521b\u5efa\u62a5\u544a\nreport = Report()\n\n# \u6dfb\u52a0\u5404\u79cd\u6d4b\u8bd5\u7ed3\u679c\ntest_results = [\n    {\"status\": \"\u6210\u529f\", \"spendTime\": \"1.0 s\"},\n    {\"status\": \"\u6210\u529f\", \"spendTime\": \"2.0 s\"},\n    {\"status\": \"\u5931\u8d25\", \"spendTime\": \"0.5 s\"},\n    {\"status\": \"\u8df3\u8fc7\", \"spendTime\": \"0.0 s\"},\n]\n\nfor i, result in enumerate(test_results):\n    test_result = {\n        \"className\": \"AutoTest\",\n        \"methodName\": f\"test_{i+1}\",\n        \"description\": f\"\u81ea\u52a8\u6d4b\u8bd5 {i+1}\",\n        \"spendTime\": result[\"spendTime\"],\n        \"status\": result[\"status\"],\n        \"log\": [f\"\u6d4b\u8bd5 {result['status']}\"]\n    }\n    report.append_row(test_result)\n\n# \u751f\u6210\u62a5\u544a\uff08\u4f1a\u81ea\u52a8\u8ba1\u7b97\u7edf\u8ba1\u4fe1\u606f\uff09\nreport.write(\"./auto_reports/\")\n# \u62a5\u544a\u4f1a\u81ea\u52a8\u5305\u542b\uff1a\n# - testAll: \u603b\u6d4b\u8bd5\u6570\n# - testPass: \u6210\u529f\u6570\n# - testFail: \u5931\u8d25\u6570\n# - testSkip: \u8df3\u8fc7\u6570\n# - totalTime: \u603b\u8017\u65f6\n</code></pre>"},{"location":"report/#3_1","title":"3. \u5f02\u5e38\u5904\u7406\u62a5\u544a","text":"<pre><code>from sindre.report import Report\n\n# \u521b\u5efa\u62a5\u544a\nreport = Report()\n\n# \u6a21\u62df\u5f02\u5e38\u6d4b\u8bd5\ntry:\n    # \u6a21\u62df\u53ef\u80fd\u51fa\u9519\u7684\u4ee3\u7801\n    result = 1 / 0\nexcept Exception as e:\n    error_test = {\n        \"className\": \"ExceptionTest\",\n        \"methodName\": \"test_division_by_zero\",\n        \"description\": \"\u6d4b\u8bd5\u9664\u96f6\u5f02\u5e38\u5904\u7406\",\n        \"spendTime\": \"0.01 s\",\n        \"status\": \"\u5931\u8d25\",\n        \"log\": [\n            f\"\u6355\u83b7\u5f02\u5e38: {type(e).__name__}\",\n            f\"\u5f02\u5e38\u4fe1\u606f: {str(e)}\",\n            \"\u5f02\u5e38\u5904\u7406\u5b8c\u6210\"\n        ]\n    }\n    report.append_row(error_test)\n\nreport.write(\"./exception_reports/\")\n</code></pre>"},{"location":"report/#_14","title":"\ud83c\udfa8 \u6a21\u677f\u5b9a\u5236","text":""},{"location":"report/#1_2","title":"1. \u62a5\u544a\u6a21\u677f\u7ed3\u6784","text":"<p>Report\u6a21\u5757\u4f7f\u7528\u5185\u7f6e\u7684HTML\u6a21\u677f\uff0c\u5305\u542b\u4ee5\u4e0b\u90e8\u5206\uff1a</p> <ul> <li>\u5934\u90e8\u4fe1\u606f: \u6d4b\u8bd5\u540d\u79f0\u3001\u5f00\u59cb\u65f6\u95f4\u3001\u603b\u8017\u65f6</li> <li>\u7edf\u8ba1\u4fe1\u606f: \u6210\u529f/\u5931\u8d25/\u8df3\u8fc7\u6570\u91cf\u7edf\u8ba1</li> <li>\u6d4b\u8bd5\u7ed3\u679c\u8868\u683c: \u8be6\u7ec6\u7684\u6d4b\u8bd5\u7ed3\u679c\u5217\u8868</li> <li>\u6837\u5f0f\u8bbe\u8ba1: \u54cd\u5e94\u5f0fCSS\u6837\u5f0f</li> </ul>"},{"location":"report/#2_2","title":"2. \u81ea\u5b9a\u4e49\u6837\u5f0f","text":"<p>\u867d\u7136Report\u7c7b\u4f7f\u7528\u5185\u7f6e\u6a21\u677f\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u751f\u6210\u7684HTML\u6587\u4ef6\u6765\u81ea\u5b9a\u4e49\u6837\u5f0f\uff1a</p> <pre><code>&lt;!-- \u5728\u751f\u6210\u7684HTML\u6587\u4ef6\u4e2d\u6dfb\u52a0\u81ea\u5b9a\u4e49CSS --&gt;\n&lt;style&gt;\n.custom-style {\n    background-color: #f0f0f0;\n    border-radius: 5px;\n    padding: 10px;\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"report/#_15","title":"\u2753 \u5e38\u89c1\u95ee\u9898","text":""},{"location":"report/#q1","title":"Q1: \u5982\u4f55\u8bbe\u7f6e\u62a5\u544a\u6807\u9898\uff1f","text":"<p>A: \u901a\u8fc7\u4fee\u6539data\u5b57\u5178\u4e2d\u7684testName\u5b57\u6bb5\uff1a</p> <pre><code>report = Report()\nreport.data[\"testName\"] = \"\u6211\u7684\u81ea\u5b9a\u4e49\u6d4b\u8bd5\u62a5\u544a\"\n</code></pre>"},{"location":"report/#q2","title":"Q2: \u652f\u6301\u54ea\u4e9b\u56fe\u7247\u683c\u5f0f\uff1f","text":"<p>A: \u652f\u6301PIL\u5e93\u652f\u6301\u7684\u6240\u6709\u683c\u5f0f\uff0c\u5e38\u7528\u683c\u5f0f\u5305\u62ec\uff1a - PNG - JPEG/JPG - GIF - BMP - TIFF</p>"},{"location":"report/#q3-html","title":"Q3: \u5982\u4f55\u6dfb\u52a0HTML\u5185\u5bb9\uff1f","text":"<p>A: \u5728log\u5217\u8868\u4e2d\u76f4\u63a5\u6dfb\u52a0HTML\u6807\u7b7e\uff1a</p> <pre><code>test_result = {\n    # ... \u5176\u4ed6\u5b57\u6bb5\n    \"log\": [\n        \"\u666e\u901a\u6587\u672c\",\n        \"&lt;strong&gt;\u7c97\u4f53\u6587\u672c&lt;/strong&gt;\",\n        \"&lt;a href='https://example.com'&gt;\u94fe\u63a5&lt;/a&gt;\",\n        \"&lt;br&gt;&lt;/br&gt;\",  # \u6362\u884c\n        \"&lt;img src='data:image/png;base64,...'&gt;\"  # \u56fe\u7247\n    ]\n}\n</code></pre>"},{"location":"report/#q4","title":"Q4: \u62a5\u544a\u6587\u4ef6\u4fdd\u5b58\u5728\u54ea\u91cc\uff1f","text":"<p>A: \u9ed8\u8ba4\u4fdd\u5b58\u5728\u6307\u5b9a\u8def\u5f84\u4e0b\u7684\"\u6d4b\u8bd5\u62a5\u544a.html\"\u6587\u4ef6\u4e2d\uff1a</p> <pre><code>report.write(\"./reports/\")  # \u4fdd\u5b58\u4e3a ./reports/\u6d4b\u8bd5\u62a5\u544a.html\n</code></pre>"},{"location":"report/#q5","title":"Q5: \u5982\u4f55\u83b7\u53d6\u6d4b\u8bd5\u7edf\u8ba1\u4fe1\u606f\uff1f","text":"<p>A: \u5728\u8c03\u7528write()\u65b9\u6cd5\u540e\uff0c\u7edf\u8ba1\u4fe1\u606f\u4f1a\u81ea\u52a8\u8ba1\u7b97\u5e76\u5305\u542b\u5728\u62a5\u544a\u4e2d\uff1a</p> <pre><code>report.write(\"./reports/\")\n# \u7edf\u8ba1\u4fe1\u606f\u5728report.data\u4e2d\uff1a\n# - testAll: \u603b\u6d4b\u8bd5\u6570\n# - testPass: \u6210\u529f\u6570\n# - testFail: \u5931\u8d25\u6570\n# - testSkip: \u8df3\u8fc7\u6570\n# - totalTime: \u603b\u8017\u65f6\n</code></pre>"},{"location":"report/#q6","title":"Q6: \u652f\u6301\u5e76\u53d1\u6d4b\u8bd5\u5417\uff1f","text":"<p>A: Report\u7c7b\u672c\u8eab\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u5982\u679c\u9700\u8981\u5e76\u53d1\u4f7f\u7528\uff0c\u5efa\u8bae\uff1a</p> <pre><code># \u6bcf\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u72ec\u7acb\u7684Report\u5b9e\u4f8b\nimport threading\n\ndef worker(thread_id):\n    report = Report()\n    report.data[\"testName\"] = f\"\u7ebf\u7a0b{thread_id}\u6d4b\u8bd5\u62a5\u544a\"\n    # \u6dfb\u52a0\u6d4b\u8bd5\u7ed3\u679c...\n    report.write(f\"./thread_{thread_id}_reports/\")\n\n# \u521b\u5efa\u591a\u4e2a\u7ebf\u7a0b\nthreads = []\nfor i in range(4):\n    t = threading.Thread(target=worker, args=(i,))\n    threads.append(t)\n    t.start()\n\nfor t in threads:\n    t.join()\n</code></pre>"},{"location":"report/#_16","title":"\ud83d\udcca \u62a5\u544a\u793a\u4f8b","text":"<p>\u751f\u6210\u7684HTML\u62a5\u544a\u5305\u542b\u4ee5\u4e0b\u7279\u6027\uff1a</p> <ul> <li>\u54cd\u5e94\u5f0f\u8bbe\u8ba1: \u9002\u914d\u4e0d\u540c\u5c4f\u5e55\u5c3a\u5bf8</li> <li>\u72b6\u6001\u6807\u8bc6: \u4e0d\u540c\u989c\u8272\u533a\u5206\u6210\u529f/\u5931\u8d25/\u8df3\u8fc7</li> <li>\u65f6\u95f4\u7edf\u8ba1: \u663e\u793a\u6267\u884c\u65f6\u95f4\u4fe1\u606f</li> <li>\u591a\u5a92\u4f53\u652f\u6301: \u652f\u6301\u56fe\u7247\u3001\u94fe\u63a5\u3001\u4ee3\u7801\u5757</li> <li>\u4ea4\u4e92\u529f\u80fd: \u53ef\u6298\u53e0\u8be6\u60c5\u3001\u72b6\u6001\u7b5b\u9009</li> <li>\u7f8e\u89c2\u6837\u5f0f: \u73b0\u4ee3\u5316\u7684UI\u8bbe\u8ba1</li> </ul>"},{"location":"report/#_17","title":"\ud83d\udd17 \u76f8\u5173\u94fe\u63a5","text":"<ul> <li>HTML\u6a21\u677f\u8bed\u6cd5</li> <li>CSS\u6837\u5f0f\u6307\u5357</li> <li>PIL\u56fe\u50cf\u5904\u7406</li> </ul> <p>\u5982\u6709\u95ee\u9898\uff0c\u8bf7\u67e5\u770b \u5e38\u89c1\u95ee\u9898 \u6216\u63d0\u4ea4 Issue</p>"},{"location":"win_tools/","title":"WinTools Windows\u5de5\u5177\u6a21\u5757","text":"<p>\u4e13\u4e3aWindows\u7cfb\u7edf\u8bbe\u8ba1\u7684\u5de5\u5177\u96c6\u5408\uff0c\u63d0\u4f9b\u7a97\u53e3\u7ba1\u7406\u3001\u6587\u4ef6\u7f16\u8bd1\u3001\u5b89\u88c5\u5305\u5236\u4f5c\u7b49\u529f\u80fd</p>"},{"location":"win_tools/#_1","title":"\ud83d\udccb \u76ee\u5f55","text":"<ul> <li>\u529f\u80fd\u7279\u6027</li> <li>\u5feb\u901f\u5f00\u59cb</li> <li>\u6838\u5fc3\u529f\u80fd</li> <li>\u4f7f\u7528\u6307\u5357</li> <li>\u9ad8\u7ea7\u529f\u80fd</li> <li>\u7cfb\u7edf\u96c6\u6210</li> <li>\u5e38\u89c1\u95ee\u9898</li> </ul>"},{"location":"win_tools/#_2","title":"\u2728 \u529f\u80fd\u7279\u6027","text":"<ul> <li>\ud83e\ude9f \u7a97\u53e3\u7ba1\u7406: \u8bbe\u7f6e\u7a97\u53e3\u900f\u660e\u5ea6\u3001\u67e5\u627e\u7a97\u53e3\u53e5\u67c4</li> <li>\ud83d\udd27 \u6587\u4ef6\u7f16\u8bd1: Python\u6587\u4ef6\u7f16\u8bd1\u4e3aPYD\u3001C++\u7f16\u8bd1</li> <li>\ud83d\udce6 \u5b89\u88c5\u5305\u5236\u4f5c: NSIS\u5b89\u88c5\u5305\u5236\u4f5c\u3001\u81ea\u52a8\u5b89\u88c5\u811a\u672c</li> <li>\ud83d\udc0d Python\u7ba1\u7406: \u81ea\u52a8\u5b89\u88c5Python\u3001\u5305\u7ba1\u7406</li> <li>\ud83d\udcac \u6d88\u606f\u6846: \u7cfb\u7edf\u6d88\u606f\u6846\u3001\u7528\u6237\u4ea4\u4e92</li> <li>\ud83c\udfa8 \u754c\u9762\u7f8e\u5316: \u4efb\u52a1\u680f\u900f\u660e\u3001\u7a97\u53e3\u7279\u6548</li> <li>\u26a1 \u7cfb\u7edf\u5de5\u5177: \u7cfb\u7edf\u4fe1\u606f\u3001\u8fdb\u7a0b\u7ba1\u7406</li> </ul>"},{"location":"win_tools/#_3","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"win_tools/#_4","title":"\u57fa\u672c\u4f7f\u7528","text":"<pre><code>from sindre.win_tools import tools, taskbar\n\n# \u8bbe\u7f6e\u7a97\u53e3\u900f\u660e\u5ea6\ntaskbar.set_windows_alpha(128, \"Shell_TrayWnd\")\n\n# \u7f16\u8bd1Python\u6587\u4ef6\ntools.py2pyd(r\"C:\\project\\src\", clear_py=False)\n\n# \u663e\u793a\u6d88\u606f\u6846\ntools.show_message(\"\u64cd\u4f5c\u5b8c\u6210\", \"\u4efb\u52a1\u5df2\u6210\u529f\u6267\u884c\")\n</code></pre>"},{"location":"win_tools/#_5","title":"\u5b89\u88c5\u5305\u5236\u4f5c","text":"<pre><code>from sindre.win_tools import tools\n\n# \u5236\u4f5cNSIS\u5b89\u88c5\u5305\ntools.exe2nsis(\n    work_dir=r\"C:\\project\",\n    files_to_compress=[\n        r\"C:\\project\\app.exe\",\n        r\"C:\\project\\config.ini\",\n        r\"C:\\project\\data\\\"\n    ],\n    exe_name=\"MyApp.exe\"\n)\n</code></pre>"},{"location":"win_tools/#_6","title":"\ud83d\udd27 \u6838\u5fc3\u529f\u80fd","text":""},{"location":"win_tools/#_7","title":"\u6587\u4ef6\u7f16\u8bd1\u51fd\u6570","text":"<pre><code>def py2pyd(source_path: str, clear_py: bool = False):\n    \"\"\"\n    \u5c06\u76ee\u5f55\u4e0b\u6240\u6709py\u6587\u4ef6\u7f16\u8bd1\u6210pyd\u6587\u4ef6\n\n    Args:\n        source_path: \u6e90\u7801\u76ee\u5f55\n        clear_py: \u662f\u5426\u7f16\u8bd1\u540e\u6e05\u9664py\u6587\u4ef6\uff0c\u6ce8\u610f\u5907\u4efd\n    \"\"\"\n\ndef pip_install(package_name: str = \"\", target_dir: str = \"\", requirements_path: str = \"\"):\n    \"\"\"\n    \u6a21\u62dfpip\u5b89\u88c5\n\n    Args:\n        package_name: \u5305\u540d\n        target_dir: \u5b89\u88c5\u76ee\u5f55\uff0c\u4e3a\u7a7a\u5219\u81ea\u52a8\u5b89\u88c5\u5230\u5f53\u524d\u73af\u5883\u4e0b\n        requirements_path: requirements.txt\u8def\u5f84\n    \"\"\"\n\ndef python_installer(install_dir: str, version: str = '3.9.6'):\n    \"\"\"\n    \u81ea\u52a8\u5b89\u88c5Python\n\n    Args:\n        install_dir: \u5b89\u88c5\u76ee\u5f55\n        version: Python\u7248\u672c\n    \"\"\"\n\ndef exe2nsis(work_dir: str, files_to_compress: list, exe_name: str, \n            appname: str = \"AI\", version: str = \"1.0.0.0\", \n            author: str = \"SindreYang\", license: str = \"\", icon_old: str = \"\"):\n    \"\"\"\n    \u5236\u4f5cNSIS\u5b89\u88c5\u5305\n\n    Args:\n        work_dir: \u5de5\u4f5c\u76ee\u5f55\n        files_to_compress: \u8981\u538b\u7f29\u7684\u6587\u4ef6\u5217\u8868\n        exe_name: \u751f\u6210\u7684exe\u540d\u79f0\n        appname: \u5e94\u7528\u540d\u79f0\n        version: \u7248\u672c\u53f7\n        author: \u4f5c\u8005\n        license: \u8bb8\u53ef\u8bc1\n        icon_old: \u56fe\u6807\u8def\u5f84\n    \"\"\"\n</code></pre>"},{"location":"win_tools/#_8","title":"\u7a97\u53e3\u7ba1\u7406\u51fd\u6570","text":"<pre><code>def set_windows_alpha(alpha: int = 255, class_name: str = \"Shell_TrayWnd\"):\n    \"\"\"\n    \u901a\u8fc7\u67e5\u627eclass_name\uff0c\u5f3a\u5236\u7528\u4e8e\u8bbe\u7f6e\u4efb\u52a1\u680f\u900f\u660e\u7a0b\u5ea6\n\n    Args:\n        alpha: \u900f\u660e\u5ea6 (0--\u5b8c\u5168\u900f\u660e\uff0c255--\u5b8c\u5168\u4e0d\u900f\u660e)\n        class_name: \u7a97\u53e3\u7c7b\u540d\n    \"\"\"\n\ndef get_windows_child(hWnd):\n    \"\"\"\n    \u83b7\u53d6\u7a97\u53e3\u7684\u6240\u6709\u5b50\u7a97\u53e3\n\n    Args:\n        hWnd: \u7a97\u53e3\u53e5\u67c4\n\n    Returns:\n        list: \u5b50\u7a97\u53e3\u53e5\u67c4\u5217\u8868\n    \"\"\"\n\ndef HEXtoRGBAint(HEX: str):\n    \"\"\"\n    \u5c06HEX\u989c\u8272\u8f6c\u6362\u4e3aRGBA\u6574\u6570\n\n    Args:\n        HEX: \u5341\u516d\u8fdb\u5236\u989c\u8272\u5b57\u7b26\u4e32\n\n    Returns:\n        int: RGBA\u6574\u6570\u503c\n    \"\"\"\n</code></pre>"},{"location":"win_tools/#_9","title":"\u7cfb\u7edf\u5de5\u5177\u51fd\u6570","text":"<pre><code>def is_service_exists(service_name: str) -&gt; bool:\n    \"\"\"\n    \u68c0\u67e5Windows\u670d\u52a1\u662f\u5426\u5b58\u5728\n\n    Args:\n        service_name: \u670d\u52a1\u540d\u79f0\n\n    Returns:\n        bool: \u670d\u52a1\u662f\u5426\u5b58\u5728\n    \"\"\"\n\ndef check_port(port: int) -&gt; bool:\n    \"\"\"\n    \u68c0\u67e5\u7aef\u53e3\u662f\u5426\u88ab\u5360\u7528\n\n    Args:\n        port: \u7aef\u53e3\u53f7\n\n    Returns:\n        bool: \u7aef\u53e3\u662f\u5426\u88ab\u5360\u7528\n    \"\"\"\n\ndef kill_process_using_port(server_port: int) -&gt; bool:\n    \"\"\"\n    \u6740\u6b7b\u5360\u7528\u6307\u5b9a\u7aef\u53e3\u7684\u8fdb\u7a0b\n\n    Args:\n        server_port: \u7aef\u53e3\u53f7\n\n    Returns:\n        bool: \u662f\u5426\u6210\u529f\u6740\u6b7b\u8fdb\u7a0b\n    \"\"\"\n\ndef download_url_file(url: str, package_path: str = \"test.zip\") -&gt; bool:\n    \"\"\"\n    \u4e0b\u8f7dURL\u6587\u4ef6\n\n    Args:\n        url: \u4e0b\u8f7dURL\n        package_path: \u4fdd\u5b58\u8def\u5f84\n\n    Returns:\n        bool: \u4e0b\u8f7d\u662f\u5426\u6210\u529f\n    \"\"\"\n\ndef zip_extract(zip_path: str, install_dir: str) -&gt; bool:\n    \"\"\"\n    \u89e3\u538bZIP\u6587\u4ef6\n\n    Args:\n        zip_path: ZIP\u6587\u4ef6\u8def\u5f84\n        install_dir: \u89e3\u538b\u76ee\u5f55\n\n    Returns:\n        bool: \u89e3\u538b\u662f\u5426\u6210\u529f\n    \"\"\"\n</code></pre>"},{"location":"win_tools/#_10","title":"\ud83d\udcd6 \u4f7f\u7528\u6307\u5357","text":""},{"location":"win_tools/#1","title":"1. \u7a97\u53e3\u7ba1\u7406","text":""},{"location":"win_tools/#_11","title":"\u8bbe\u7f6e\u7a97\u53e3\u900f\u660e\u5ea6","text":"<pre><code>from sindre.win_tools import taskbar\n\n# \u8bbe\u7f6e\u4efb\u52a1\u680f\u900f\u660e\u5ea6\ntaskbar.set_windows_alpha(255, \"Shell_TrayWnd\")  # \u5b8c\u5168\u4e0d\u900f\u660e\ntaskbar.set_windows_alpha(128, \"Shell_TrayWnd\")  # \u534a\u900f\u660e\ntaskbar.set_windows_alpha(0, \"Shell_TrayWnd\")    # \u5b8c\u5168\u900f\u660e\n\n# \u8bbe\u7f6e\u5176\u4ed6\u7a97\u53e3\u900f\u660e\u5ea6\ntaskbar.set_windows_alpha(200, \"Notepad\")        # \u8bb0\u4e8b\u672c\ntaskbar.set_windows_alpha(150, \"Calculator\")     # \u8ba1\u7b97\u5668\n\n# \u6279\u91cf\u8bbe\u7f6e\u7a97\u53e3\u900f\u660e\u5ea6\nwindows = [\"Notepad\", \"Calculator\", \"Paint\"]\nfor window in windows:\n    try:\n        taskbar.set_windows_alpha(180, window)\n        print(f\"\u8bbe\u7f6e {window} \u900f\u660e\u5ea6\u6210\u529f\")\n    except Exception as e:\n        print(f\"\u8bbe\u7f6e {window} \u900f\u660e\u5ea6\u5931\u8d25: {e}\")\n</code></pre>"},{"location":"win_tools/#_12","title":"\u67e5\u627e\u548c\u7ba1\u7406\u7a97\u53e3","text":"<pre><code>from sindre.win_tools import taskbar\nimport win32gui\n\n# \u67e5\u627e\u7a97\u53e3\u53e5\u67c4\nnotepad_handle = win32gui.FindWindow(\"Notepad\", None)\nif notepad_handle:\n    print(f\"\u8bb0\u4e8b\u672c\u7a97\u53e3\u53e5\u67c4: {notepad_handle}\")\n\n    # \u83b7\u53d6\u5b50\u7a97\u53e3\n    child_windows = taskbar.get_windows_child(notepad_handle)\n    print(f\"\u5b50\u7a97\u53e3\u6570\u91cf: {len(child_windows)}\")\nelse:\n    print(\"\u672a\u627e\u5230\u8bb0\u4e8b\u672c\u7a97\u53e3\")\n\n# \u83b7\u53d6\u6240\u6709\u7a97\u53e3\u4fe1\u606f\ndef list_windows():\n    \"\"\"\u5217\u51fa\u6240\u6709\u53ef\u89c1\u7a97\u53e3\"\"\"\n    def enum_windows_callback(hwnd, windows):\n        if win32gui.IsWindowVisible(hwnd):\n            window_text = win32gui.GetWindowText(hwnd)\n            if window_text:\n                windows.append((hwnd, window_text))\n        return True\n\n    windows = []\n    win32gui.EnumWindows(enum_windows_callback, windows)\n    return windows\n\n# \u663e\u793a\u6240\u6709\u7a97\u53e3\nall_windows = list_windows()\nfor hwnd, title in all_windows[:10]:  # \u663e\u793a\u524d10\u4e2a\n    print(f\"\u7a97\u53e3: {title} (\u53e5\u67c4: {hwnd})\")\n</code></pre>"},{"location":"win_tools/#2","title":"2. \u6587\u4ef6\u7f16\u8bd1","text":""},{"location":"win_tools/#python","title":"Python\u6587\u4ef6\u7f16\u8bd1","text":"<pre><code>from sindre.win_tools import tools\n\n# \u7f16\u8bd1\u6574\u4e2a\u76ee\u5f55\ntools.py2pyd(r\"C:\\project\\src\", clear_py=False)\n\n# \u7f16\u8bd1\u5e76\u5220\u9664\u539f\u6587\u4ef6\ntools.py2pyd(r\"C:\\project\\src\", clear_py=True)\n\n# \u7f16\u8bd1\u7279\u5b9a\u76ee\u5f55\ntools.py2pyd(r\"C:\\project\\src\\utils\", clear_py=False)\n</code></pre>"},{"location":"win_tools/#_13","title":"\u5305\u7ba1\u7406","text":"<pre><code>from sindre.win_tools import tools\n\n# \u5b89\u88c5\u5355\u4e2a\u5305\ntools.pip_install(package_name=\"numpy\")\n\n# \u5b89\u88c5\u5230\u6307\u5b9a\u76ee\u5f55\ntools.pip_install(package_name=\"pandas\", target_dir=r\"C:\\custom_packages\")\n\n# \u4ecerequirements\u6587\u4ef6\u5b89\u88c5\ntools.pip_install(requirements_path=r\"C:\\project\\requirements.txt\")\n\n# \u5b89\u88c5\u5230\u6307\u5b9a\u76ee\u5f55\ntools.pip_install(requirements_path=r\"C:\\project\\requirements.txt\", \n                 target_dir=r\"C:\\project\\packages\")\n</code></pre>"},{"location":"win_tools/#3-python","title":"3. Python\u73af\u5883\u7ba1\u7406","text":"<pre><code>from sindre.win_tools import tools\n\n# \u5b89\u88c5Python 3.9.6\ntools.python_installer(r\"C:\\Python39\", version=\"3.9.6\")\n\n# \u5b89\u88c5Python 3.8.10\ntools.python_installer(r\"C:\\Python38\", version=\"3.8.10\")\n\n# \u5b89\u88c5\u6700\u65b0\u7248\u672c\ntools.python_installer(r\"C:\\Python\", version=\"3.11.0\")\n</code></pre>"},{"location":"win_tools/#4","title":"4. \u5b89\u88c5\u5305\u5236\u4f5c","text":"<pre><code>from sindre.win_tools import tools\n\n# \u57fa\u672c\u5b89\u88c5\u5305\u5236\u4f5c\ntools.exe2nsis(\n    work_dir=r\"C:\\project\",\n    files_to_compress=[\n        r\"C:\\project\\app.exe\",\n        r\"C:\\project\\config.ini\",\n        r\"C:\\project\\data\\\"\n    ],\n    exe_name=\"MyApp.exe\"\n)\n\n# \u81ea\u5b9a\u4e49\u5b89\u88c5\u5305\ntools.exe2nsis(\n    work_dir=r\"C:\\project\",\n    files_to_compress=[\n        r\"C:\\project\\app.exe\",\n        r\"C:\\project\\lib\\\",\n        r\"C:\\project\\resources\\\"\n    ],\n    exe_name=\"MyApp.exe\",\n    appname=\"\u6211\u7684\u5e94\u7528\",\n    version=\"2.1.0\",\n    author=\"\u5f20\u4e09\",\n    license=\"MIT\",\n    icon_old=r\"C:\\project\\icon.ico\"\n)\n</code></pre>"},{"location":"win_tools/#5","title":"5. \u7cfb\u7edf\u5de5\u5177","text":""},{"location":"win_tools/#_14","title":"\u7aef\u53e3\u7ba1\u7406","text":"<pre><code>from sindre.win_tools import tools\n\n# \u68c0\u67e5\u7aef\u53e3\u5360\u7528\nport = 8080\nif tools.check_port(port):\n    print(f\"\u7aef\u53e3 {port} \u88ab\u5360\u7528\")\n\n    # \u6740\u6b7b\u5360\u7528\u8fdb\u7a0b\n    if tools.kill_process_using_port(port):\n        print(f\"\u6210\u529f\u6740\u6b7b\u5360\u7528\u7aef\u53e3 {port} \u7684\u8fdb\u7a0b\")\n    else:\n        print(f\"\u65e0\u6cd5\u6740\u6b7b\u5360\u7528\u7aef\u53e3 {port} \u7684\u8fdb\u7a0b\")\nelse:\n    print(f\"\u7aef\u53e3 {port} \u53ef\u7528\")\n</code></pre>"},{"location":"win_tools/#_15","title":"\u670d\u52a1\u7ba1\u7406","text":"<pre><code>from sindre.win_tools import tools\n\n# \u68c0\u67e5\u670d\u52a1\u662f\u5426\u5b58\u5728\nservice_name = \"MySQL\"\nif tools.is_service_exists(service_name):\n    print(f\"\u670d\u52a1 {service_name} \u5b58\u5728\")\nelse:\n    print(f\"\u670d\u52a1 {service_name} \u4e0d\u5b58\u5728\")\n</code></pre>"},{"location":"win_tools/#_16","title":"\u6587\u4ef6\u4e0b\u8f7d\u548c\u89e3\u538b","text":"<pre><code>from sindre.win_tools import tools\n\n# \u4e0b\u8f7d\u6587\u4ef6\nurl = \"https://example.com/file.zip\"\nif tools.download_url_file(url, \"downloaded_file.zip\"):\n    print(\"\u6587\u4ef6\u4e0b\u8f7d\u6210\u529f\")\n\n    # \u89e3\u538b\u6587\u4ef6\n    if tools.zip_extract(\"downloaded_file.zip\", r\"C:\\extracted\"):\n        print(\"\u6587\u4ef6\u89e3\u538b\u6210\u529f\")\n    else:\n        print(\"\u6587\u4ef6\u89e3\u538b\u5931\u8d25\")\nelse:\n    print(\"\u6587\u4ef6\u4e0b\u8f7d\u5931\u8d25\")\n</code></pre>"},{"location":"win_tools/#_17","title":"\ud83d\ude80 \u9ad8\u7ea7\u529f\u80fd","text":""},{"location":"win_tools/#1_1","title":"1. \u7f51\u7edc\u5de5\u5177","text":""},{"location":"win_tools/#tcp","title":"TCP\u6620\u5c04","text":"<pre><code>from sindre.win_tools import tools\n\n# \u521b\u5efaTCP\u6620\u5c04\nmapping = tools.tcp_mapping_qt(conn_receiver, conn_sender)\nmapping.start()\n\n# IP\u7ed1\u5b9a\nip_binder = tools.ip_bind()\nip_binder.set_ip(\"192.168.1.100\", \"8080\")\nip_binder.start()\n</code></pre>"},{"location":"win_tools/#2_1","title":"2. \u6279\u91cf\u64cd\u4f5c","text":"<pre><code>from sindre.win_tools import tools\nimport os\n\n# \u6279\u91cf\u7f16\u8bd1\u591a\u4e2a\u76ee\u5f55\ndirectories = [\n    r\"C:\\project\\src\\utils\",\n    r\"C:\\project\\src\\models\",\n    r\"C:\\project\\src\\controllers\"\n]\n\nfor directory in directories:\n    if os.path.exists(directory):\n        print(f\"\u7f16\u8bd1\u76ee\u5f55: {directory}\")\n        tools.py2pyd(directory, clear_py=False)\n    else:\n        print(f\"\u76ee\u5f55\u4e0d\u5b58\u5728: {directory}\")\n\n# \u6279\u91cf\u5b89\u88c5\u5305\npackages = [\"numpy\", \"pandas\", \"matplotlib\", \"scikit-learn\"]\nfor package in packages:\n    print(f\"\u5b89\u88c5\u5305: {package}\")\n    tools.pip_install(package_name=package)\n</code></pre>"},{"location":"win_tools/#3","title":"3. \u81ea\u52a8\u5316\u811a\u672c","text":"<pre><code>from sindre.win_tools import tools\nimport os\n\ndef setup_development_environment():\n    \"\"\"\u8bbe\u7f6e\u5f00\u53d1\u73af\u5883\"\"\"\n\n    # 1. \u5b89\u88c5Python\n    python_dir = r\"C:\\Python39\"\n    if not os.path.exists(python_dir):\n        print(\"\u5b89\u88c5Python...\")\n        tools.python_installer(python_dir, version=\"3.9.6\")\n\n    # 2. \u5b89\u88c5\u4f9d\u8d56\u5305\n    requirements_file = r\"C:\\project\\requirements.txt\"\n    if os.path.exists(requirements_file):\n        print(\"\u5b89\u88c5\u4f9d\u8d56\u5305...\")\n        tools.pip_install(requirements_path=requirements_file)\n\n    # 3. \u7f16\u8bd1\u6e90\u4ee3\u7801\n    src_dir = r\"C:\\project\\src\"\n    if os.path.exists(src_dir):\n        print(\"\u7f16\u8bd1\u6e90\u4ee3\u7801...\")\n        tools.py2pyd(src_dir, clear_py=False)\n\n    # 4. \u5236\u4f5c\u5b89\u88c5\u5305\n    print(\"\u5236\u4f5c\u5b89\u88c5\u5305...\")\n    tools.exe2nsis(\n        work_dir=r\"C:\\project\",\n        files_to_compress=[\n            r\"C:\\project\\app.exe\",\n            r\"C:\\project\\src\\\",\n            r\"C:\\project\\config\\\"\n        ],\n        exe_name=\"MyApp.exe\"\n    )\n\n    print(\"\u5f00\u53d1\u73af\u5883\u8bbe\u7f6e\u5b8c\u6210\uff01\")\n\n# \u6267\u884c\u8bbe\u7f6e\nsetup_development_environment()\n</code></pre>"},{"location":"win_tools/#_18","title":"\ud83d\udd27 \u7cfb\u7edf\u96c6\u6210","text":""},{"location":"win_tools/#1-cicd","title":"1. \u4e0eCI/CD\u96c6\u6210","text":"<pre><code>from sindre.win_tools import tools\nimport os\n\ndef ci_build():\n    \"\"\"CI/CD\u6784\u5efa\u6d41\u7a0b\"\"\"\n\n    # \u68c0\u67e5\u73af\u5883\n    if not os.path.exists(\"requirements.txt\"):\n        print(\"\u7f3a\u5c11requirements.txt\u6587\u4ef6\")\n        return False\n\n    # \u5b89\u88c5\u4f9d\u8d56\n    tools.pip_install(requirements_path=\"requirements.txt\")\n\n    # \u7f16\u8bd1\u4ee3\u7801\n    tools.py2pyd(\"src\", clear_py=False)\n\n    # \u5236\u4f5c\u5b89\u88c5\u5305\n    tools.exe2nsis(\n        work_dir=\".\",\n        files_to_compress=[\"app.exe\", \"src/\", \"config/\"],\n        exe_name=\"AppInstaller.exe\"\n    )\n\n    return True\n\nif __name__ == \"__main__\":\n    success = ci_build()\n    exit(0 if success else 1)\n</code></pre>"},{"location":"win_tools/#2-pyinstaller","title":"2. \u4e0ePyInstaller\u96c6\u6210","text":"<pre><code>from sindre.win_tools import tools\nimport subprocess\n\ndef build_with_pyinstaller():\n    \"\"\"\u4f7f\u7528PyInstaller\u6784\u5efa\"\"\"\n\n    # \u5b89\u88c5PyInstaller\n    tools.pip_install(package_name=\"pyinstaller\")\n\n    # \u4f7f\u7528PyInstaller\u6784\u5efa\n    subprocess.run([\n        \"pyinstaller\",\n        \"--onefile\",\n        \"--windowed\",\n        \"app.py\"\n    ])\n\n    # \u5236\u4f5c\u5b89\u88c5\u5305\n    tools.exe2nsis(\n        work_dir=\".\",\n        files_to_compress=[\"dist/app.exe\", \"config/\"],\n        exe_name=\"AppSetup.exe\"\n    )\n\nbuild_with_pyinstaller()\n</code></pre>"},{"location":"win_tools/#_19","title":"\u2753 \u5e38\u89c1\u95ee\u9898","text":""},{"location":"win_tools/#q1-cython","title":"Q1: \u7f16\u8bd1\u65f6\u51fa\u73b0Cython\u9519\u8bef\uff1f","text":"<p>A: \u9700\u8981\u5b89\u88c5Cython\uff1a</p> <pre><code>tools.pip_install(package_name=\"cython\")\n</code></pre>"},{"location":"win_tools/#q2","title":"Q2: \u7a97\u53e3\u900f\u660e\u5ea6\u8bbe\u7f6e\u4e0d\u751f\u6548\uff1f","text":"<p>A: \u786e\u4fdd\u5df2\u5b89\u88c5pywin32\uff1a</p> <pre><code>tools.pip_install(package_name=\"pywin32\")\n</code></pre>"},{"location":"win_tools/#q3-nsis","title":"Q3: NSIS\u5b89\u88c5\u5305\u5236\u4f5c\u5931\u8d25\uff1f","text":"<p>A: \u68c0\u67e5\u4ee5\u4e0b\u51e0\u70b9\uff1a 1. \u786e\u4fdd\u6587\u4ef6\u8def\u5f84\u5b58\u5728 2. \u786e\u4fdd\u6709\u8db3\u591f\u7684\u78c1\u76d8\u7a7a\u95f4 3. \u68c0\u67e5\u6587\u4ef6\u6743\u9650</p>"},{"location":"win_tools/#q4","title":"Q4: \u7aef\u53e3\u68c0\u67e5\u4e0d\u51c6\u786e\uff1f","text":"<p>A: \u4f7f\u7528\u7ba1\u7406\u5458\u6743\u9650\u8fd0\u884c\u7a0b\u5e8f\uff0c\u6216\u8005\uff1a</p> <pre><code># \u624b\u52a8\u68c0\u67e5\u7aef\u53e3\nimport socket\ndef check_port_manual(port):\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        return s.connect_ex(('localhost', port)) == 0\n</code></pre>"},{"location":"win_tools/#q5-python","title":"Q5: Python\u5b89\u88c5\u5931\u8d25\uff1f","text":"<p>A: \u53ef\u80fd\u7684\u539f\u56e0\uff1a 1. \u7f51\u7edc\u8fde\u63a5\u95ee\u9898 2. \u78c1\u76d8\u7a7a\u95f4\u4e0d\u8db3 3. \u6743\u9650\u4e0d\u8db3</p>"},{"location":"win_tools/#q6","title":"Q6: \u5982\u4f55\u8c03\u8bd5\u7f16\u8bd1\u95ee\u9898\uff1f","text":"<p>A: \u67e5\u770b\u7f16\u8bd1\u65e5\u5fd7\uff1a</p> <pre><code># \u7f16\u8bd1\u65f6\u4fdd\u7559\u4e34\u65f6\u6587\u4ef6\ntools.py2pyd(\"src\", clear_py=False)\n# \u68c0\u67e5tmp\u76ee\u5f55\u4e2d\u7684\u7f16\u8bd1\u65e5\u5fd7\n</code></pre>"},{"location":"win_tools/#_20","title":"\ud83d\udcca \u6027\u80fd\u57fa\u51c6","text":"\u64cd\u4f5c \u6570\u636e\u5927\u5c0f \u65f6\u95f4 \u5185\u5b58\u4f7f\u7528 \u6587\u4ef6\u7f16\u8bd1 100\u4e2aPY\u6587\u4ef6 ~30s ~50MB \u5b89\u88c5\u5305\u5236\u4f5c 100MB\u6587\u4ef6 ~60s ~200MB Python\u5b89\u88c5 \u6807\u51c6\u5b89\u88c5 ~120s ~500MB \u7a97\u53e3\u900f\u660e\u5ea6 \u5355\u4e2a\u7a97\u53e3 ~0.1s ~1MB"},{"location":"win_tools/#_21","title":"\ud83d\udd17 \u76f8\u5173\u94fe\u63a5","text":"<ul> <li>Windows API\u6587\u6863</li> <li>PyWin32\u6587\u6863</li> <li>NSIS\u6587\u6863</li> <li>Python\u7f16\u8bd1\u6587\u6863</li> </ul> <p>\u5982\u6709\u95ee\u9898\uff0c\u8bf7\u67e5\u770b \u5e38\u89c1\u95ee\u9898 \u6216\u63d0\u4ea4 Issue</p>"}]}