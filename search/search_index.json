{"config":{"lang":["en","zh"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Sindre \u5e93\u6587\u6863","text":"<p>\u4e00\u4e2a\u529f\u80fd\u4e30\u5bcc\u7684Python\u5de5\u5177\u5e93\uff0c\u63d0\u4f9bLMDB\u6570\u636e\u5e93\u64cd\u4f5c\u30013D\u5904\u7406\u3001\u62a5\u544a\u751f\u6210\u3001Windows\u5de5\u5177\u7b49\u529f\u80fd</p> <p> </p>"},{"location":"#_1","title":"\ud83d\udccb \u76ee\u5f55","text":"<ul> <li>\u5feb\u901f\u5f00\u59cb</li> <li>\u6838\u5fc3\u529f\u80fd</li> <li>\u5b89\u88c5\u6307\u5357</li> <li>\u4f7f\u7528\u793a\u4f8b</li> <li>API\u6587\u6863</li> <li>\u6d4b\u8bd5\u6307\u5357</li> <li>\u8d21\u732e\u6307\u5357</li> </ul>"},{"location":"#_2","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"#_3","title":"\u5b89\u88c5","text":"<pre><code># \u4ecePyPI\u5b89\u88c5\npip install sindre\n\n# \u4ece\u6e90\u7801\u5b89\u88c5\ngit clone https://github.com/SindreYang/sindre.git\ncd sindre\npip install -e .\n</code></pre>"},{"location":"#_4","title":"\u6700\u5c0f\u793a\u4f8b","text":"<pre><code>import sindre\n\n# LMDB\u6570\u636e\u5e93\u64cd\u4f5c\nfrom sindre.lmdb import Reader, Writer\nimport numpy as np\n\n# \u5199\u5165\u6570\u636e\nwriter = Writer('./data', map_size_limit=1024*100)  # 100GB\nwriter.put_samples({0: {'points': np.random.rand(100, 3)}})\nwriter.close()\n\n# \u8bfb\u53d6\u6570\u636e\nreader = Reader('./data')\ndata = reader[0]\nprint(f\"\u8bfb\u53d6\u5230 {len(data['points'])} \u4e2a\u70b9\")\nreader.close()\n</code></pre>"},{"location":"#_5","title":"\ud83c\udfaf \u6838\u5fc3\u529f\u80fd","text":"\u6a21\u5757 \u529f\u80fd\u63cf\u8ff0 \u9002\u7528\u573a\u666f LMDB \u9ad8\u6027\u80fd\u6570\u636e\u5e93\u64cd\u4f5c \u5927\u89c4\u6a21\u6570\u636e\u5b58\u50a8\u3001\u673a\u5668\u5b66\u4e60\u6570\u636e\u96c6 Utils3D 3D\u6570\u636e\u5904\u7406\u5de5\u5177 \u70b9\u4e91\u5904\u7406\u3001\u7f51\u683c\u64cd\u4f5c\u30013D\u53ef\u89c6\u5316 Report HTML\u62a5\u544a\u751f\u6210 \u6d4b\u8bd5\u62a5\u544a\u3001\u6570\u636e\u5206\u6790\u62a5\u544a WinTools Windows\u7cfb\u7edf\u5de5\u5177 Windows\u5e94\u7528\u5f00\u53d1\u3001\u7cfb\u7edf\u96c6\u6210 Deploy \u6a21\u578b\u90e8\u7f72\u5de5\u5177 \u6a21\u578b\u4f18\u5316\u3001\u63a8\u7406\u52a0\u901f General \u901a\u7528\u5de5\u5177 \u65e5\u5fd7\u8bb0\u5f55\u3001\u901a\u7528\u529f\u80fd"},{"location":"#_6","title":"\ud83d\udce6 \u5b89\u88c5\u6307\u5357","text":""},{"location":"#_7","title":"\u7cfb\u7edf\u8981\u6c42","text":"<ul> <li>Python: 3.8 \u6216\u66f4\u9ad8\u7248\u672c</li> <li>\u64cd\u4f5c\u7cfb\u7edf: Windows, Linux, macOS</li> <li>\u5185\u5b58: \u5efa\u8bae 4GB \u4ee5\u4e0a</li> </ul>"},{"location":"#_8","title":"\u4f9d\u8d56\u5b89\u88c5","text":"<pre><code># \u57fa\u7840\u4f9d\u8d56\npip install numpy lmdb msgpack tqdm\n\n# \u53ef\u9009\u4f9d\u8d56\uff08\u6839\u636e\u4f7f\u7528\u573a\u666f\uff09\npip install torch vedo scikit-learn pillow loguru\n</code></pre>"},{"location":"#_9","title":"\u5f00\u53d1\u73af\u5883","text":"<pre><code># \u514b\u9686\u9879\u76ee\ngit clone https://github.com/SindreYang/sindre.git\ncd sindre\n\n# \u5b89\u88c5\u5f00\u53d1\u4f9d\u8d56\npip install -r requirements.txt\n\n# \u5f00\u53d1\u6a21\u5f0f\u5b89\u88c5\npip install -e .\n\n# \u8fd0\u884c\u6d4b\u8bd5\ncd sindre/test\npython run_tests.py --all\n</code></pre>"},{"location":"#_10","title":"\ud83d\udca1 \u4f7f\u7528\u793a\u4f8b","text":""},{"location":"#1-lmdb","title":"1. LMDB \u6570\u636e\u5e93\u64cd\u4f5c","text":"<pre><code>import sindre.lmdb as lmdb\nimport numpy as np\n\n# \u521b\u5efa\u6570\u636e\u5e93\nwriter = lmdb.Writer('./dataset', map_size_limit=1024*100)  # 100GB\n\n# \u5199\u5165\u6570\u636e\nfor i in range(1000):\n    data = {\n        'points': np.random.rand(100, 3),\n        'labels': np.random.randint(0, 10, 100),\n        'metadata': {'id': i, 'source': 'synthetic'}\n    }\n    writer.put_samples({i: data})\n\nwriter.close()\n\n# \u8bfb\u53d6\u6570\u636e\nreader = lmdb.Reader('./dataset')\nprint(f\"\u6570\u636e\u5e93\u5305\u542b {len(reader)} \u4e2a\u6837\u672c\")\n\n# \u6279\u91cf\u8bfb\u53d6\nbatch = reader.get_samples(0, 10)\nprint(f\"\u6279\u91cf\u8bfb\u53d6 {len(batch)} \u4e2a\u6837\u672c\")\n\nreader.close()\n</code></pre>"},{"location":"#2-3d","title":"2. 3D \u6570\u636e\u5904\u7406","text":"<pre><code>from sindre.utils3d.mesh import SindreMesh\nimport numpy as np\n\n# \u521b\u5efa\u7f51\u683c\nvertices = np.array([\n    [0, 0, 0], [1, 0, 0], [0, 1, 0], [1, 1, 0]\n])\nfaces = np.array([[0, 1, 2], [1, 3, 2]])\n\nmesh = SindreMesh()\nmesh.vertices = vertices\nmesh.faces = faces\n\n# \u7f51\u683c\u64cd\u4f5c\nprint(f\"\u7f51\u683c\u5305\u542b {len(mesh.vertices)} \u4e2a\u9876\u70b9\uff0c{len(mesh.faces)} \u4e2a\u9762\")\n\n# \u91c7\u6837\u70b9\u4e91\npoints = mesh.sample(density=1.0)\nprint(f\"\u91c7\u6837\u5f97\u5230 {len(points)} \u4e2a\u70b9\")\n\n# \u53ef\u89c6\u5316\nmesh.show()\n</code></pre>"},{"location":"#3","title":"3. \u62a5\u544a\u751f\u6210","text":"<pre><code>from sindre.report import Report\nfrom PIL import Image\n\n# \u521b\u5efa\u62a5\u544a\nreport = Report()\n\n# \u6dfb\u52a0\u6d4b\u8bd5\u7ed3\u679c\ntest_result = {\n    \"className\": \"ModelTest\",\n    \"methodName\": \"test_accuracy\",\n    \"description\": \"\u6d4b\u8bd5\u6a21\u578b\u51c6\u786e\u7387\",\n    \"spendTime\": \"2.5 s\",\n    \"status\": \"\u6210\u529f\",\n    \"log\": [\"\u51c6\u786e\u7387: 95.2%\", \"\u635f\u5931: 0.048\"]\n}\n\nreport.append_row(test_result)\n\n# \u6dfb\u52a0\u56fe\u7247\nimage = Image.open('result.png')\nb64_image = Report.PIL_To_B64(image)\ntest_result[\"log\"].append(b64_image)\n\n# \u751f\u6210\u62a5\u544a\nreport.write('./reports/')\n</code></pre>"},{"location":"#4-windows","title":"4. Windows \u5de5\u5177","text":"<pre><code>from sindre.win_tools import tools, taskbar\n\n# \u7f16\u8bd1Python\u6587\u4ef6\u4e3aPYD\ntools.py2pyd(r\"C:\\project\\src\", clear_py=False)\n\n# \u8bbe\u7f6e\u7a97\u53e3\u900f\u660e\u5ea6\ntaskbar.set_windows_alpha(128, \"Shell_TrayWnd\")\n\n# \u5236\u4f5c\u5b89\u88c5\u5305\ntools.exe2nsis(\n    work_dir=r\"C:\\project\",\n    files_to_compress=[r\"C:\\project\\app.exe\", r\"C:\\project\\config.ini\"],\n    exe_name=\"MyApp.exe\"\n)\n</code></pre>"},{"location":"#5","title":"5. \u6a21\u578b\u90e8\u7f72","text":"<pre><code>from sindre.deploy import onnxruntime_deploy, TenserRT_deploy\n\n# ONNX Runtime\u90e8\u7f72\nonnx_infer = onnxruntime_deploy.OnnxInfer(\"model.onnx\")\nresult = onnx_infer(input_data)\n\n# TensorRT\u90e8\u7f72\ntrt_infer = TenserRT_deploy.TRTInfer()\ntrt_infer.load_model(\"model.engine\")\nresult = trt_infer(input_data)\n</code></pre>"},{"location":"#6","title":"6. \u65e5\u5fd7\u8bb0\u5f55","text":"<pre><code>from sindre.general.logs import CustomLogger\n\n# \u521b\u5efa\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = CustomLogger(\"my_app\").get_logger()\n\n# \u8bb0\u5f55\u65e5\u5fd7\nlogger.info(\"\u5e94\u7528\u542f\u52a8\")\nlogger.warning(\"\u53d1\u73b0\u8b66\u544a\u4fe1\u606f\")\nlogger.error(\"\u53d1\u751f\u9519\u8bef\")\n\n# \u91cd\u5b9a\u5411print\u5230\u65e5\u5fd7\nlogger.redirect_print()\nprint(\"\u8fd9\u6761\u6d88\u606f\u4f1a\u88ab\u8bb0\u5f55\u5230\u65e5\u5fd7\u6587\u4ef6\")\n</code></pre>"},{"location":"#api","title":"\ud83d\udcda API\u6587\u6863","text":""},{"location":"#_11","title":"\u6a21\u5757\u6982\u89c8","text":"<ul> <li>LMDB\u6a21\u5757 - \u9ad8\u6027\u80fd\u6570\u636e\u5e93\u64cd\u4f5c</li> <li>Utils3D\u6a21\u5757 - 3D\u6570\u636e\u5904\u7406\u5de5\u5177</li> <li>Report\u6a21\u5757 - HTML\u62a5\u544a\u751f\u6210</li> <li>WinTools\u6a21\u5757 - Windows\u7cfb\u7edf\u5de5\u5177</li> <li>Deploy\u6a21\u5757 - \u6a21\u578b\u90e8\u7f72\u5de5\u5177</li> <li>General\u6a21\u5757 - \u901a\u7528\u5de5\u5177</li> </ul>"},{"location":"#_12","title":"\u6838\u5fc3\u7c7b","text":""},{"location":"#lmdb","title":"LMDB\u6a21\u5757","text":"<ul> <li><code>Writer</code> - \u6570\u636e\u5e93\u5199\u5165\u5668</li> <li><code>Reader</code> - \u6570\u636e\u5e93\u8bfb\u53d6\u5668</li> <li><code>ReaderList</code> - \u591a\u6570\u636e\u5e93\u8bfb\u53d6\u5668</li> <li><code>ReaderSSD</code> - SSD\u4f18\u5316\u8bfb\u53d6\u5668</li> </ul>"},{"location":"#utils3d","title":"Utils3D\u6a21\u5757","text":"<ul> <li><code>SindreMesh</code> - 3D\u7f51\u683c\u5904\u7406\u7c7b</li> <li><code>pointcloud_augment</code> - \u70b9\u4e91\u6570\u636e\u589e\u5f3a</li> </ul>"},{"location":"#report","title":"Report\u6a21\u5757","text":"<ul> <li><code>Report</code> - HTML\u62a5\u544a\u751f\u6210\u5668</li> </ul>"},{"location":"#wintools","title":"WinTools\u6a21\u5757","text":"<ul> <li><code>tools</code> - Windows\u5de5\u5177\u51fd\u6570\u96c6\u5408</li> <li><code>taskbar</code> - \u4efb\u52a1\u680f\u7ba1\u7406\u51fd\u6570</li> </ul>"},{"location":"#deploy","title":"Deploy\u6a21\u5757","text":"<ul> <li><code>OnnxInfer</code> - ONNX\u63a8\u7406\u7c7b</li> <li><code>TRTInfer</code> - TensorRT\u63a8\u7406\u7c7b</li> </ul>"},{"location":"#general","title":"General\u6a21\u5757","text":"<ul> <li><code>CustomLogger</code> - \u81ea\u5b9a\u4e49\u65e5\u5fd7\u8bb0\u5f55\u5668</li> </ul>"},{"location":"#_13","title":"\ud83e\uddea \u6d4b\u8bd5\u6307\u5357","text":""},{"location":"#_14","title":"\u8fd0\u884c\u6d4b\u8bd5","text":"<pre><code># \u8fd0\u884c\u6240\u6709\u6d4b\u8bd5\ncd sindre/test\npython run_tests.py --all\n\n# \u8fd0\u884c\u7279\u5b9a\u6a21\u5757\u6d4b\u8bd5\npython run_tests.py --module lmdb\npython run_tests.py --module utils3d\npython run_tests.py --module report\npython run_tests.py --module win_tools\npython run_tests.py --module deploy\npython run_tests.py --module general\n</code></pre>"},{"location":"#_15","title":"\u6d4b\u8bd5\u8986\u76d6\u7387","text":"<pre><code># \u5b89\u88c5\u6d4b\u8bd5\u4f9d\u8d56\npip install pytest pytest-cov\n\n# \u8fd0\u884c\u6d4b\u8bd5\u5e76\u751f\u6210\u8986\u76d6\u7387\u62a5\u544a\npytest --cov=sindre --cov-report=html\n</code></pre>"},{"location":"#_16","title":"\u6027\u80fd\u6d4b\u8bd5","text":"<pre><code># \u8fd0\u884c\u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5\npython benchmark_tests.py\n</code></pre>"},{"location":"#_17","title":"\ud83e\udd1d \u8d21\u732e\u6307\u5357","text":""},{"location":"#_18","title":"\u5f00\u53d1\u73af\u5883\u8bbe\u7f6e","text":"<pre><code># 1. Fork\u9879\u76ee\ngit clone https://github.com/your-username/sindre.git\ncd sindre\n\n# 2. \u521b\u5efa\u865a\u62df\u73af\u5883\npython -m venv venv\nsource venv/bin/activate  # Linux/macOS\n# \u6216\nvenv\\Scripts\\activate  # Windows\n\n# 3. \u5b89\u88c5\u4f9d\u8d56\npip install -r requirements.txt\npip install -e .\n\n# 4. \u5b89\u88c5\u5f00\u53d1\u5de5\u5177\npip install black flake8 mypy pre-commit\n</code></pre>"},{"location":"#_19","title":"\u4ee3\u7801\u89c4\u8303","text":"<pre><code># \u4ee3\u7801\u683c\u5f0f\u5316\nblack sindre/\n\n# \u4ee3\u7801\u68c0\u67e5\nflake8 sindre/\n\n# \u7c7b\u578b\u68c0\u67e5\nmypy sindre/\n\n# \u8fd0\u884c\u9884\u63d0\u4ea4\u94a9\u5b50\npre-commit run --all-files\n</code></pre>"},{"location":"#_20","title":"\u63d0\u4ea4\u89c4\u8303","text":"<pre><code># \u63d0\u4ea4\u4fe1\u606f\u683c\u5f0f\ngit commit -m \"feat: \u6dfb\u52a0\u65b0\u529f\u80fd\"\ngit commit -m \"fix: \u4fee\u590dbug\"\ngit commit -m \"docs: \u66f4\u65b0\u6587\u6863\"\ngit commit -m \"test: \u6dfb\u52a0\u6d4b\u8bd5\"\ngit commit -m \"refactor: \u91cd\u6784\u4ee3\u7801\"\n</code></pre>"},{"location":"#_21","title":"\u62c9\u53d6\u8bf7\u6c42","text":"<ol> <li>\u521b\u5efa\u529f\u80fd\u5206\u652f</li> <li>\u5b9e\u73b0\u529f\u80fd\u5e76\u6dfb\u52a0\u6d4b\u8bd5</li> <li>\u786e\u4fdd\u6240\u6709\u6d4b\u8bd5\u901a\u8fc7</li> <li>\u66f4\u65b0\u6587\u6863</li> <li>\u63d0\u4ea4\u62c9\u53d6\u8bf7\u6c42</li> </ol>"},{"location":"#_22","title":"\ud83d\udcc4 \u8bb8\u53ef\u8bc1","text":"<p>\u672c\u9879\u76ee\u91c7\u7528 MIT \u8bb8\u53ef\u8bc1 - \u67e5\u770b LICENSE \u6587\u4ef6\u4e86\u89e3\u8be6\u60c5\u3002</p>"},{"location":"#_23","title":"\ud83d\ude4f \u81f4\u8c22","text":"<p>\u611f\u8c22\u6240\u6709\u4e3a\u8fd9\u4e2a\u9879\u76ee\u505a\u51fa\u8d21\u732e\u7684\u5f00\u53d1\u8005\u548c\u7528\u6237\u3002</p>"},{"location":"#_24","title":"\ud83d\udcde \u8054\u7cfb\u65b9\u5f0f","text":"<ul> <li>\u4f5c\u8005: Sindre Yang</li> <li>\u90ae\u7bb1: yx@mviai.com</li> <li>GitHub: https://github.com/SindreYang</li> </ul> <p>\u6ce8\u610f: \u8fd9\u662f\u4e00\u4e2a\u6d3b\u8dc3\u5f00\u53d1\u4e2d\u7684\u9879\u76ee\uff0cAPI\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\u3002\u8bf7\u67e5\u770b\u6700\u65b0\u6587\u6863\u83b7\u53d6\u6700\u65b0\u4fe1\u606f\u3002</p>"},{"location":"3d/","title":"sindre.utils3d \u4e09\u7ef4\u5de5\u5177\u5305\u6587\u6863","text":"<p>\u672c\u6a21\u5757\u4e3a\u4e09\u7ef4\u6570\u636e\u5904\u7406\u4e0e\u6df1\u5ea6\u5b66\u4e60\u7684\u5168\u529f\u80fd\u5de5\u5177\u5305\uff0c\u6db5\u76d6\u7f51\u683c/\u70b9\u4e91\u5904\u7406\u3001\u7259\u79d1\u4e13\u7528\u7b97\u6cd5\u3001\u4e09\u7ef4\u589e\u5f3a\u3001\u53ef\u89c6\u5316\u3001\u4ee5\u53ca\u4e09\u7ef4\u6df1\u5ea6\u5b66\u4e60\u7f51\u7edc\u3002</p>"},{"location":"3d/#_1","title":"\u76ee\u5f55","text":"<ul> <li>sindre.utils3d \u4e09\u7ef4\u5de5\u5177\u5305\u6587\u6863</li> <li>\u76ee\u5f55</li> <li>\u6a21\u5757\u6982\u89c8</li> <li>mesh \u7f51\u683c\u5904\u7406</li> <li>dental_tools \u7259\u79d1\u4e13\u7528\u5de5\u5177</li> <li>algorithm \u4e09\u7ef4\u7b97\u6cd5\u5e93</li> <li>vedo_tools \u4e09\u7ef4\u53ef\u89c6\u5316</li> <li>pointcloud_augment \u70b9\u4e91\u589e\u5f3a</li> <li>networks \u4e09\u7ef4\u6df1\u5ea6\u5b66\u4e60\u5de5\u5177\u5305\uff08\u91cd\u70b9\uff09<ul> <li>\u4e3b\u8981\u5185\u5bb9</li> <li>\u5178\u578b\u7528\u6cd5</li> <li>\u9002\u7528\u573a\u666f</li> </ul> </li> <li>FAQ</li> </ul>"},{"location":"3d/#_2","title":"\u6a21\u5757\u6982\u89c8","text":"\u5b50\u6a21\u5757 \u4e3b\u8981\u529f\u80fd\u63cf\u8ff0 mesh \u901a\u7528\u4e09\u7ef4\u7f51\u683c\u5904\u7406\u4e0e\u683c\u5f0f\u4e92\u8f6c dental_tools \u7259\u9f7f/\u53e3\u8154mesh\u4e13\u7528\u7b97\u6cd5 algorithm \u4e09\u7ef4\u51e0\u4f55/\u7f51\u683c\u7b97\u6cd5\u4e0e\u4f18\u5316 vedo_tools \u57fa\u4e8evedo\u7684\u4e09\u7ef4\u53ef\u89c6\u5316\u4e0e\u4ea4\u4e92 pointcloud_augment \u70b9\u4e91\u589e\u5f3a\u4e0e\u9884\u5904\u7406\u5de5\u5177 networks \u4e09\u7ef4\u6df1\u5ea6\u5b66\u4e60\u7f51\u7edc\u4e0e\u635f\u5931\u51fd\u6570\uff08\u91cd\u70b9\uff09"},{"location":"3d/#mesh","title":"mesh \u7f51\u683c\u5904\u7406","text":"<p>\u6838\u5fc3\u7c7b\uff1aSindreMesh</p> <ul> <li>\u901a\u7528\u4e09\u7ef4\u7f51\u683c\u5bf9\u8c61\uff0c\u652f\u6301\u591a\u683c\u5f0f\u4e92\u8f6c\uff08trimesh\u3001vedo\u3001open3d\u3001pytorch3d\u7b49\uff09</li> <li>\u652f\u6301\u5c5e\u6027\uff1a\u9876\u70b9\u3001\u9762\u3001\u6cd5\u7ebf\u3001\u6807\u7b7e\u3001\u989c\u8272\u3001\u66f2\u7387\u7b49</li> <li>\u4e3b\u8981\u65b9\u6cd5\uff1a</li> <li><code>clone()</code>\uff1a\u5feb\u901f\u514b\u9686\u7f51\u683c</li> <li><code>set_vertex_labels()</code>\uff1a\u8bbe\u7f6e\u9876\u70b9\u6807\u7b7e\u5e76\u81ea\u52a8\u7740\u8272</li> <li><code>update_geometry()</code>\uff1a\u51e0\u4f55\u7ed3\u6784\u66f4\u65b0</li> <li><code>compute_normals()</code>\uff1a\u6cd5\u7ebf\u8ba1\u7b97</li> <li><code>apply_transform()</code>\uff1a\u5e94\u7528\u53d8\u6362\u77e9\u9635</li> <li><code>show()</code>\uff1a\u4e09\u7ef4\u53ef\u89c6\u5316</li> <li><code>sample()</code>\uff1a\u7f51\u683c\u91c7\u6837\u70b9\u4e91</li> <li><code>to_trimesh()/to_open3d()/to_dict()/to_json()</code>\uff1a\u683c\u5f0f\u4e92\u8f6c</li> <li><code>save()/load()</code>\uff1a\u6587\u4ef6\u8bfb\u5199</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>from sindre.utils3d.mesh import SindreMesh\nimport numpy as np\n\nvertices = np.array([[0,0,0],[1,0,0],[0,1,0]])\nfaces = np.array([[0,1,2]])\nmesh = SindreMesh([vertices,faces])\nmesh.get_curvature()\nmesh.show()\n</code></pre>"},{"location":"3d/#dental_tools","title":"dental_tools \u7259\u79d1\u4e13\u7528\u5de5\u5177","text":"<ul> <li>FDI\u7f16\u53f7\u4e0e\u7d22\u5f15\u8f6c\u6362\u3001\u6807\u7b7e\u8f6c\u989c\u8272\u3001\u7259\u51a0\u53d8\u6362\u3001\u7259\u9f7fmesh\u5207\u5272\u7b49</li> <li>\u4e3b\u8981\u51fd\u6570\uff1a</li> <li><code>convert_fdi2idx(labels)</code>\uff1aFDI\u7f16\u53f7\u8f6c\u7d22\u5f15</li> <li><code>convert_labels2color(data)</code>\uff1a\u6807\u7b7e\u8f6c\u989c\u8272</li> <li><code>transform_crown(near_mesh, jaw_mesh)</code>\uff1a\u7259\u51a0\u5750\u6807\u7cfb\u8c03\u6574</li> <li><code>cut_mesh_point_loop_crow(mesh, pts)</code>\uff1a\u7259\u51a0\u5206\u5272</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>from sindre.utils3d.dental_tools import convert_fdi2idx, convert_labels2color\nlabels = [11, 12, 13, 21, 22]\nidx = convert_fdi2idx(labels)\ncolors = convert_labels2color(labels)\n</code></pre>"},{"location":"3d/#algorithm","title":"algorithm \u4e09\u7ef4\u7b97\u6cd5\u5e93","text":"<ul> <li>\u4e09\u7ef4\u6807\u7b7e\u4e0e\u989c\u8272\u6620\u5c04\u3001\u6cd5\u7ebf/\u66f2\u7387/\u8fb9\u754c/\u4f53\u7d20/\u91c7\u6837/\u91cd\u5efa/\u5206\u5272/\u4f18\u5316\u7b49</li> <li>\u4e3b\u8981\u51fd\u6570\uff1a</li> <li><code>labels2colors(labels)</code>\uff1a\u6807\u7b7e\u8f6c\u989c\u8272</li> <li><code>compute_vertex_normals(vertices, faces)</code>\uff1a\u9876\u70b9\u6cd5\u7ebf</li> <li><code>compute_face_normals(vertices, faces)</code>\uff1a\u9762\u6cd5\u7ebf</li> <li><code>farthest_point_sampling(vertices, n_sample)</code>\uff1a\u6700\u8fdc\u70b9\u91c7\u6837</li> <li><code>remesh()</code>\u3001<code>fix_invalid_by_meshlab()</code>\u3001<code>A_Star</code>\u3001<code>GraphCutRefiner</code>\u7b49\u9ad8\u7ea7\u7b97\u6cd5</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>from sindre.utils3d.algorithm import labels2colors, compute_vertex_normals\nimport numpy as np\nvertices = np.random.rand(100,3)\nfaces = np.random.randint(0,100,(50,3))\ncolors = labels2colors(np.arange(100))\nnormals = compute_vertex_normals(vertices, faces)\n</code></pre>"},{"location":"3d/#vedo_tools","title":"vedo_tools \u4e09\u7ef4\u53ef\u89c6\u5316","text":"<ul> <li>\u57fa\u4e8evedo\u7684\u4e09\u7ef4\u4f53\u6570\u636e\u5207\u7247\u4e0e\u4ea4\u4e92\u3001\u77e9\u9635\u53ef\u89c6\u5316</li> <li>\u4e3b\u8981\u7c7b/\u51fd\u6570\uff1a</li> <li><code>matrix3d_by_vedo</code>\uff1a\u4e09\u7ef4\u4f53\u6570\u636e\u5207\u7247\u7a97\u53e3</li> <li><code>show_matrix_by_vedo(data)</code>\uff1a\u77e9\u9635\u53ef\u89c6\u5316</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>from sindre.utils3d.vedo_tools import matrix3d_by_vedo\nimport numpy as np\nvol = np.random.rand(64,64,64)\nviewer = matrix3d_by_vedo(vol)\nviewer.show()\n</code></pre>"},{"location":"3d/#pointcloud_augment","title":"pointcloud_augment \u70b9\u4e91\u589e\u5f3a","text":"<ul> <li>\u70b9\u4e91\u7684\u968f\u673a\u65cb\u8f6c\u3001\u7f29\u653e\u3001\u5e73\u79fb\u3001\u6296\u52a8\u3001\u5f52\u4e00\u5316\u3001\u968f\u673a\u4e22\u5f03\u3001\u88c1\u526a\u3001\u5f20\u91cf\u8f6c\u6362\u7b49</li> <li>\u652f\u6301numpy\u548ctorch\u4e24\u5957API</li> <li>\u4e3b\u8981\u7c7b\uff1a</li> <li><code>Flip_np</code>\u3001<code>Scale_np</code>\u3001<code>RotateAxis_np</code>\u3001<code>RotateXYZ_np</code>\u3001<code>Jitter_np</code>\u3001<code>Translate_np</code>\u3001<code>RandomDropout_np</code>\u3001<code>Normalize_np</code>\u3001<code>ToTensor</code>\u3001<code>RandomCrop</code></li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>from sindre.utils3d.pointcloud_augment import Flip_np, Scale_np\nimport numpy as np\npoints = np.random.rand(100,3)\nflipper = Flip_np(axis_x=True, axis_y=False)\npoints_flipped = flipper(points)\nscaler = Scale_np(lo=0.9, hi=1.1)\npoints_scaled = scaler(points)\n\n\n\n# \u793a\u4f8b\nfrom torchvision import transforms\n# torch\u98ce\u683c\u589e\u5f3a\u6d41\u6c34\u7ebf\ntransforms_torch = transforms.Compose([\n    ToTensor(device=\"cuda:0\"),\n    Normalize(method=\"MaxMix\", v_range=[0,1]),\n    RotateAxis(axis=[0,1,0]),\n    RotateXYZ(angle_sigma=0.05, angle_clip=0.15),\n    Scale(lo=0.8, hi=1.25),\n    Translate(translate_range=0.1),\n    Jitter(std=0.01, clip=0.05),\n    RandomDropout(max_dropout_ratio=0.2),\n    Flip(axis_x=False, axis_y=False, axis_z=True),\n])\n\n# numpy\u98ce\u683c\u589e\u5f3a\u6d41\u6c34\u7ebf\ntransforms_np = transforms.Compose([\n    Normalize_np(method=\"MaxMix\", v_range=[0,1]),\n    RotateAxis_np(axis=[0,1,0]),\n    RotateXYZ_np(angle_sigma=0.05, angle_clip=0.15),\n    Scale_np(lo=0.8, hi=1.25),\n    Translate_np(translate_range=0.1),\n    Jitter_np(std=0.01, clip=0.05),\n    RandomDropout_np(max_dropout_ratio=0.2),\n    Flip_np(axis_x=False, axis_y=False, axis_z=True),\n    ToTensor(device=\"cuda:0\"),\n])\n\n# \u793a\u4f8b\u6570\u636e\npoints = np.random.randn(1024, 6)\npoints[:,3:6] = np.random.rand(1024,3)\n\n# \u6279\u91cf\u589e\u5f3a\ntransformed_points = transforms_torch(points)\ntransformed_points_np = transforms_np(points)\n\n</code></pre>"},{"location":"3d/#networks","title":"networks \u4e09\u7ef4\u6df1\u5ea6\u5b66\u4e60\u5de5\u5177\u5305\uff08\u91cd\u70b9\uff09","text":"<p>\u672c\u5b50\u5305\u4e13\u4e3a\u4e09\u7ef4\u70b9\u4e91/\u7f51\u683c\u4efb\u52a1\u8bbe\u8ba1\uff0c\u5305\u542b\u591a\u79cd\u4e3b\u6d41\u6df1\u5ea6\u5b66\u4e60\u7f51\u7edc\u7ed3\u6784\u3001\u635f\u5931\u51fd\u6570\u53ca\u76f8\u5173\u5de5\u5177\u3002</p>"},{"location":"3d/#_3","title":"\u4e3b\u8981\u5185\u5bb9","text":"<ul> <li>\u70b9\u4e91/\u7f51\u683c\u795e\u7ecf\u7f51\u7edc\uff1a</li> <li><code>pointnet2.py</code>\uff1aPointNet++</li> <li><code>dgcnn.py</code>\uff1aDGCNN</li> <li><code>point_transformerV3.py</code>\uff1aPoint Transformer V3</li> <li><code>conv_occ.py</code>\uff1a\u4f53\u7d20\u5377\u79ef/\u5360\u7528\u7f51\u7edc</li> <li><code>Reconstruct3D.py</code>\uff1a\u4e09\u7ef4\u91cd\u5efa\u7f51\u7edc</li> <li><code>image_text_net.py</code>\uff1a\u56fe\u50cf-\u6587\u672c\u591a\u6a21\u6001\u7f51\u7edc</li> <li><code>embed_attention.py</code>\uff1a\u5d4c\u5165\u5f0f\u6ce8\u610f\u529b\u673a\u5236</li> <li>\u4f53\u7d20/\u7a00\u758f\u5377\u79ef\uff1a</li> <li><code>point2voxel.py</code>\u3001<code>minkowski_utils.py</code></li> <li>\u7f51\u7edc\u901a\u7528\u5de5\u5177\u4e0e\u635f\u5931\uff1a</li> <li><code>network_utils.py</code>\u3001<code>losses.py</code></li> </ul>"},{"location":"3d/#_4","title":"\u5178\u578b\u7528\u6cd5","text":"<pre><code>from sindre.utils3d.networks.pointnet2 import PointNet2\nimport torch\nmodel = PointNet2(num_classes=40)\npoints = torch.rand(8, 1024, 3)\nlogits = model(points)\n\nfrom sindre.utils3d.networks.dgcnn import DGCNN\nmodel = DGCNN(num_classes=40)\nlogits = model(points)\n\nfrom sindre.utils3d.networks.losses import get_loss\nloss = get_loss(logits, labels)\n</code></pre>"},{"location":"3d/#_5","title":"\u9002\u7528\u573a\u666f","text":"<ul> <li>\u4e09\u7ef4\u70b9\u4e91\u5206\u7c7b/\u5206\u5272/\u91cd\u5efa/\u914d\u51c6/\u591a\u6a21\u6001\u7b49\u4efb\u52a1</li> <li>\u652f\u6301\u4e3b\u6d41\u4e09\u7ef4\u6df1\u5ea6\u5b66\u4e60\u7814\u7a76\u4e0e\u5de5\u7a0b\u843d\u5730</li> </ul>"},{"location":"3d/#faq","title":"FAQ","text":"<ul> <li>Q: networks\u5b50\u5305\u9002\u5408\u54ea\u4e9b\u4e09\u7ef4\u4efb\u52a1\uff1f</li> <li>A: \u9002\u5408\u70b9\u4e91/\u7f51\u683c\u7684\u5206\u7c7b\u3001\u5206\u5272\u3001\u91cd\u5efa\u3001\u914d\u51c6\u3001\u5360\u7528\u9884\u6d4b\u3001\u591a\u6a21\u6001\u7b49\u4e3b\u6d41\u4e09\u7ef4\u6df1\u5ea6\u5b66\u4e60\u4efb\u52a1\u3002</li> <li>Q: \u5982\u4f55\u81ea\u5b9a\u4e49\u81ea\u5df1\u7684\u4e09\u7ef4\u7f51\u7edc\uff1f</li> <li>A: \u53ef\u53c2\u8003<code>networks</code>\u5b50\u5305\u5185\u7684\u7f51\u7edc\u7ed3\u6784\uff0c\u7ee7\u627f<code>torch.nn.Module</code>\uff0c\u7075\u6d3b\u7ec4\u5408\u5df2\u6709\u6a21\u5757\u3002</li> </ul> <p>\u5982\u9700\u8be6\u7ec6API\u548c\u53c2\u6570\u8bf4\u660e\uff0c\u8bf7\u67e5\u9605\u5b8c\u6574API\u6587\u6863\u3002 </p>"},{"location":"deploy/","title":"Deploy \u90e8\u7f72\u6a21\u5757","text":"<p>\u6a21\u578b\u90e8\u7f72\u548c\u63a8\u7406\u52a0\u901f\u5de5\u5177\uff0c\u652f\u6301ONNX\u3001TensorRT\u3001\u5171\u4eab\u5185\u5b58\u7b49\u591a\u79cd\u90e8\u7f72\u65b9\u5f0f</p>"},{"location":"deploy/#_1","title":"\ud83d\udccb \u76ee\u5f55","text":"<ul> <li>\u529f\u80fd\u7279\u6027</li> <li>\u5feb\u901f\u5f00\u59cb</li> <li>\u6838\u5fc3\u529f\u80fd</li> <li>\u4f7f\u7528\u6307\u5357</li> <li>\u9ad8\u7ea7\u529f\u80fd</li> <li>\u6027\u80fd\u4f18\u5316</li> <li>\u5e38\u89c1\u95ee\u9898</li> </ul>"},{"location":"deploy/#_2","title":"\u2728 \u529f\u80fd\u7279\u6027","text":"<ul> <li>\ud83d\ude80 \u591a\u683c\u5f0f\u652f\u6301: ONNX\u3001TensorRT\u3001OpenVINO\u7b49\u63a8\u7406\u5f15\u64ce</li> <li>\ud83d\udcbe \u5171\u4eab\u5185\u5b58: \u9ad8\u6548\u7684\u8fdb\u7a0b\u95f4\u6570\u636e\u4f20\u8f93</li> <li>\ud83d\udd27 \u6a21\u578b\u4f18\u5316: \u81ea\u52a8\u6a21\u578b\u91cf\u5316\u548c\u4f18\u5316</li> <li>\ud83d\udcca \u6027\u80fd\u76d1\u63a7: \u5b9e\u65f6\u63a8\u7406\u6027\u80fd\u7edf\u8ba1</li> <li>\ud83d\udd04 \u70ed\u66f4\u65b0: \u652f\u6301\u6a21\u578b\u52a8\u6001\u66f4\u65b0</li> <li>\ud83d\udee1\ufe0f \u9519\u8bef\u5904\u7406: \u5b8c\u5584\u7684\u5f02\u5e38\u5904\u7406\u673a\u5236</li> <li>\ud83d\udcc8 \u53ef\u6269\u5c55: \u652f\u6301\u81ea\u5b9a\u4e49\u63a8\u7406\u540e\u7aef</li> </ul>"},{"location":"deploy/#_3","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"deploy/#_4","title":"\u57fa\u672c\u4f7f\u7528","text":"<pre><code>from sindre.deploy import onnxruntime_deploy, TenserRT_deploy\n\n# ONNX Runtime\u90e8\u7f72\nonnx_infer = onnxruntime_deploy.OnnxInfer(\"model.onnx\")\nresult = onnx_infer(input_data)\n\n# TensorRT\u90e8\u7f72\ntrt_infer = TenserRT_deploy.TRTInfer()\ntrt_infer.load_model(\"model.engine\")\nresult = trt_infer(input_data)\n</code></pre>"},{"location":"deploy/#_5","title":"\u5171\u4eab\u5185\u5b58\u90e8\u7f72","text":"<pre><code>from sindre.deploy import python_share_memory\n\n# \u521b\u5efa\u5171\u4eab\u5185\u5b58\u670d\u52a1\nserver = python_share_memory.SharedMemoryServer(\"model_server\")\nserver.start()\n\n# \u5ba2\u6237\u7aef\u8fde\u63a5\nclient = python_share_memory.SharedMemoryClient(\"model_server\")\nresult = client.infer(input_data)\n</code></pre>"},{"location":"deploy/#_6","title":"\ud83d\udd27 \u6838\u5fc3\u529f\u80fd","text":""},{"location":"deploy/#onnx-runtime","title":"ONNX Runtime \u90e8\u7f72","text":"<pre><code>class OnnxInfer:\n    \"\"\"ONNX\u6a21\u578b\u63a8\u7406\u7c7b\"\"\"\n\n    def __init__(self, onnx_path: str, providers: List[Tuple[str, Dict[str, Any]]] = [('CPUExecutionProvider', {})], enable_log: bool = False):\n        \"\"\"\n        \u521d\u59cb\u5316ONNX\u63a8\u7406\n\n        Args:\n            onnx_path: ONNX\u6a21\u578b\u6587\u4ef6\u8def\u5f84\n            providers: \u63a8\u7406\u63d0\u4f9b\u8005\u5217\u8868\n            enable_log: \u662f\u5426\u542f\u7528\u65e5\u5fd7\n        \"\"\"\n\n    def __call__(self, inputs: np.ndarray) -&gt; List[np.ndarray]:\n        \"\"\"\n        \u6267\u884c\u6a21\u578b\u63a8\u7406\n\n        Args:\n            inputs: \u8f93\u5165\u6570\u636e\uff08numpy\u6570\u7ec4\u6216\u5b57\u5178\uff09\n\n        Returns:\n            List[np.ndarray]: \u63a8\u7406\u7ed3\u679c\n        \"\"\"\n\n    def optimizer(self, save_onnx: str):\n        \"\"\"\n        \u4f18\u5316\u5e76\u7b80\u5316ONNX\u6a21\u578b\n\n        Args:\n            save_onnx: \u4fdd\u5b58\u8def\u5f84\n        \"\"\"\n\n    def convert_opset_version(self, save_path: str, target_version: int):\n        \"\"\"\n        \u8f6c\u6362ONNX\u6a21\u578b\u7684Opset\u7248\u672c\n\n        Args:\n            save_path: \u4fdd\u5b58\u8def\u5f84\n            target_version: \u76ee\u6807Opset\u7248\u672c\n        \"\"\"\n\n    def fix_input_shape(self, save_path: str, input_shapes: list):\n        \"\"\"\n        \u56fa\u5b9aONNX\u6a21\u578b\u7684\u8f93\u5165\u5c3a\u5bf8\n\n        Args:\n            save_path: \u4fdd\u5b58\u8def\u5f84\n            input_shapes: \u8f93\u5165\u5f62\u72b6\u5217\u8868\n        \"\"\"\n\n    def dynamic_input_shape(self, save_path: str, dynamic_dims: list):\n        \"\"\"\n        \u8bbe\u7f6eONNX\u6a21\u578b\u7684\u8f93\u5165\u4e3a\u52a8\u6001\u5c3a\u5bf8\n\n        Args:\n            save_path: \u4fdd\u5b58\u8def\u5f84\n            dynamic_dims: \u52a8\u6001\u7ef4\u5ea6\u5217\u8868\n        \"\"\"\n\n    def test_performance(self, loop: int = 10, warmup: int = 3):\n        \"\"\"\n        \u6d4b\u8bd5\u63a8\u7406\u6027\u80fd\n\n        Args:\n            loop: \u6b63\u5f0f\u6d4b\u8bd5\u5faa\u73af\u6b21\u6570\n            warmup: \u9884\u70ed\u6b21\u6570\n        \"\"\"\n</code></pre>"},{"location":"deploy/#tensorrt","title":"TensorRT \u90e8\u7f72","text":"<pre><code>class TRTInfer:\n    \"\"\"TensorRT\u63a8\u7406\u7c7b\"\"\"\n\n    def __init__(self):\n        \"\"\"\u521d\u59cb\u5316TensorRT\u63a8\u7406\"\"\"\n\n    def load_model(self, engine_path: str):\n        \"\"\"\n        \u52a0\u8f7dTensorRT\u5f15\u64ce\n\n        Args:\n            engine_path: \u5f15\u64ce\u6587\u4ef6\u8def\u5f84\n        \"\"\"\n\n    def build_engine(self, onnx_path: str, engine_path: str, max_workspace_size=4&lt;&lt;30, \n                    fp16=False, dynamic_shape_profile=None, hardware_compatibility=\"\", \n                    optimization_level=3, version_compatible=False):\n        \"\"\"\n        \u4eceONNX\u6784\u5efaTensorRT\u5f15\u64ce\n\n        Args:\n            onnx_path: ONNX\u6a21\u578b\u8def\u5f84\n            engine_path: \u8f93\u51fa\u5f15\u64ce\u8def\u5f84\n            max_workspace_size: \u6700\u5927\u5de5\u4f5c\u7a7a\u95f4\u5927\u5c0f\n            fp16: \u662f\u5426\u4f7f\u7528FP16\n            dynamic_shape_profile: \u52a8\u6001\u5f62\u72b6\u914d\u7f6e\n            hardware_compatibility: \u786c\u4ef6\u517c\u5bb9\u6027\n            optimization_level: \u4f18\u5316\u7ea7\u522b\n            version_compatible: \u7248\u672c\u517c\u5bb9\u6027\n        \"\"\"\n\n    def __call__(self, data):\n        \"\"\"\n        \u6267\u884c\u63a8\u7406\n\n        Args:\n            data: \u8f93\u5165\u6570\u636e\n\n        Returns:\n            List[np.ndarray]: \u63a8\u7406\u7ed3\u679c\n        \"\"\"\n\n    def test_performance(self, loop: int = 10, warmup: int = 3) -&gt; float:\n        \"\"\"\n        \u6d4b\u8bd5\u63a8\u7406\u6027\u80fd\n\n        Args:\n            loop: \u6b63\u5f0f\u6d4b\u8bd5\u5faa\u73af\u6b21\u6570\n            warmup: \u9884\u70ed\u6b21\u6570\n\n        Returns:\n            float: \u5e73\u5747\u63a8\u7406\u65f6\u95f4\n        \"\"\"\n</code></pre>"},{"location":"deploy/#_7","title":"\u5171\u4eab\u5185\u5b58\u90e8\u7f72","text":"<pre><code>class SharedMemoryServer:\n    \"\"\"\u5171\u4eab\u5185\u5b58\u670d\u52a1\u5668\"\"\"\n\n    def __init__(self, name: str, model_path: str):\n        \"\"\"\n        \u521d\u59cb\u5316\u5171\u4eab\u5185\u5b58\u670d\u52a1\u5668\n\n        Args:\n            name: \u670d\u52a1\u5668\u540d\u79f0\n            model_path: \u6a21\u578b\u8def\u5f84\n        \"\"\"\n\n    def start(self):\n        \"\"\"\u542f\u52a8\u670d\u52a1\u5668\"\"\"\n\n    def stop(self):\n        \"\"\"\u505c\u6b62\u670d\u52a1\u5668\"\"\"\n\nclass SharedMemoryClient:\n    \"\"\"\u5171\u4eab\u5185\u5b58\u5ba2\u6237\u7aef\"\"\"\n\n    def __init__(self, server_name: str):\n        \"\"\"\n        \u521d\u59cb\u5316\u5171\u4eab\u5185\u5b58\u5ba2\u6237\u7aef\n\n        Args:\n            server_name: \u670d\u52a1\u5668\u540d\u79f0\n        \"\"\"\n\n    def infer(self, input_data: dict):\n        \"\"\"\n        \u901a\u8fc7\u5171\u4eab\u5185\u5b58\u6267\u884c\u63a8\u7406\n\n        Args:\n            input_data: \u8f93\u5165\u6570\u636e\u5b57\u5178\n\n        Returns:\n            dict: \u63a8\u7406\u7ed3\u679c\n        \"\"\"\n</code></pre>"},{"location":"deploy/#_8","title":"\ud83d\udcd6 \u4f7f\u7528\u6307\u5357","text":""},{"location":"deploy/#1-onnx-runtime","title":"1. ONNX Runtime \u90e8\u7f72","text":""},{"location":"deploy/#_9","title":"\u57fa\u672c\u63a8\u7406","text":"<pre><code>from sindre.deploy import onnxruntime_deploy\nimport numpy as np\n\n# \u521b\u5efa\u63a8\u7406\u5b9e\u4f8b\ninfer = onnxruntime_deploy.OnnxInfer(\"model.onnx\")\n\n# \u51c6\u5907\u8f93\u5165\u6570\u636e\ninput_data = np.random.rand(1, 3, 224, 224).astype(np.float32)\n\n# \u6267\u884c\u63a8\u7406\nresult = infer(input_data)\nprint(f\"\u63a8\u7406\u7ed3\u679c: {result}\")\n\n# \u83b7\u53d6\u63a8\u7406\u65f6\u95f4\ninfer.test_performance(loop=10, warmup=3)\n</code></pre>"},{"location":"deploy/#_10","title":"\u591a\u8f93\u5165\u63a8\u7406","text":"<pre><code># \u591a\u8f93\u5165\u6a21\u578b\ninput_data = {\n    \"input1\": np.random.rand(1, 3, 224, 224).astype(np.float32),\n    \"input2\": np.random.rand(1, 10).astype(np.float32)\n}\n\nresult = infer(input_data)\nprint(f\"\u591a\u8f93\u5165\u63a8\u7406\u7ed3\u679c: {result}\")\n</code></pre>"},{"location":"deploy/#_11","title":"\u6a21\u578b\u4f18\u5316","text":"<pre><code># \u4f18\u5316\u6a21\u578b\ninfer.optimizer(\"optimized_model.onnx\")\n\n# \u8f6c\u6362Opset\u7248\u672c\ninfer.convert_opset_version(\"model_v16.onnx\", 16)\n\n# \u56fa\u5b9a\u8f93\u5165\u5f62\u72b6\ninfer.fix_input_shape(\"fixed_model.onnx\", [[1, 3, 224, 224]])\n\n# \u8bbe\u7f6e\u52a8\u6001\u8f93\u5165\ninfer.dynamic_input_shape(\"dynamic_model.onnx\", [[None, 3, None, None]])\n</code></pre>"},{"location":"deploy/#2-tensorrt","title":"2. TensorRT \u90e8\u7f72","text":""},{"location":"deploy/#_12","title":"\u57fa\u672c\u63a8\u7406","text":"<pre><code>from sindre.deploy import TenserRT_deploy\nimport numpy as np\n\n# \u521b\u5efa\u63a8\u7406\u5b9e\u4f8b\ntrt_infer = TenserRT_deploy.TRTInfer()\n\n# \u52a0\u8f7d\u5f15\u64ce\ntrt_infer.load_model(\"model.engine\")\n\n# \u51c6\u5907\u8f93\u5165\u6570\u636e\ninput_data = np.random.rand(1, 3, 224, 224).astype(np.float32)\n\n# \u6267\u884c\u63a8\u7406\nresult = trt_infer(input_data)\nprint(f\"TensorRT\u63a8\u7406\u7ed3\u679c: {result}\")\n\n# \u6027\u80fd\u6d4b\u8bd5\navg_time = trt_infer.test_performance(loop=100, warmup=10)\nprint(f\"\u5e73\u5747\u63a8\u7406\u65f6\u95f4: {avg_time:.3f}ms\")\n</code></pre>"},{"location":"deploy/#_13","title":"\u6784\u5efa\u5f15\u64ce","text":"<pre><code># \u4eceONNX\u6784\u5efa\u5f15\u64ce\ntrt_infer.build_engine(\n    onnx_path=\"model.onnx\",\n    engine_path=\"model.engine\",\n    max_workspace_size=4&lt;&lt;30,  # 4GB\n    fp16=True,  # \u4f7f\u7528FP16\n    optimization_level=3\n)\n\n# \u52a8\u6001\u5f62\u72b6\u5f15\u64ce\ndynamic_profile = {\n    \"input\": [(1, 3, 224, 224), (4, 3, 224, 224), (8, 3, 224, 224)]\n}\n\ntrt_infer.build_engine(\n    onnx_path=\"model.onnx\",\n    engine_path=\"dynamic_model.engine\",\n    dynamic_shape_profile=dynamic_profile\n)\n</code></pre>"},{"location":"deploy/#3","title":"3. \u5171\u4eab\u5185\u5b58\u90e8\u7f72","text":""},{"location":"deploy/#_14","title":"\u670d\u52a1\u5668\u7aef","text":"<pre><code>from sindre.deploy import python_share_memory\n\n# \u521b\u5efa\u670d\u52a1\u5668\nserver = python_share_memory.SharedMemoryServer(\"model_server\", \"model.onnx\")\n\n# \u542f\u52a8\u670d\u52a1\u5668\nserver.start()\n\n# \u4fdd\u6301\u8fd0\u884c\ntry:\n    while True:\n        time.sleep(1)\nexcept KeyboardInterrupt:\n    server.stop()\n</code></pre>"},{"location":"deploy/#_15","title":"\u5ba2\u6237\u7aef","text":"<pre><code>from sindre.deploy import python_share_memory\n\n# \u521b\u5efa\u5ba2\u6237\u7aef\nclient = python_share_memory.SharedMemoryClient(\"model_server\")\n\n# \u51c6\u5907\u6570\u636e\ninput_data = {\n    \"input\": np.random.rand(1, 3, 224, 224).astype(np.float32)\n}\n\n# \u6267\u884c\u63a8\u7406\nresult = client.infer(input_data)\nprint(f\"\u5171\u4eab\u5185\u5b58\u63a8\u7406\u7ed3\u679c: {result}\")\n</code></pre>"},{"location":"deploy/#4","title":"4. \u7cfb\u7edf\u68c0\u6d4b\u5de5\u5177","text":"<pre><code>from sindre.deploy import check_tools\n\n# \u68c0\u6d4bGPU\u548c\u7cfb\u7edf\u4fe1\u606f\ncheck_tools.check_gpu_info()\n\n# \u6027\u80fd\u6d4b\u91cf\u5de5\u5177 - CPU\u6a21\u5f0f\nwith check_tools.timeit(\"CPU\u8ba1\u7b97\"):\n    result = [i**2 for i in range(10**6)]\n\n# \u6027\u80fd\u6d4b\u91cf\u5de5\u5177 - GPU\u6a21\u5f0f\nimport torch\nif torch.cuda.is_available():\n    with check_tools.timeit(\"GPU\u8ba1\u7b97\", use_torch=True):\n        tensor = torch.randn(10000, 10000).cuda()\n        result = tensor @ tensor.T\n</code></pre> <p>check_gpu_info() \u529f\u80fd: - \u68c0\u6d4b\u64cd\u4f5c\u7cfb\u7edf\u4fe1\u606f - \u663e\u793aCPU\u6838\u5fc3\u6570\u3001\u9891\u7387\u3001\u4f7f\u7528\u7387 - \u663e\u793a\u5185\u5b58\u603b\u91cf\u548c\u4f7f\u7528\u60c5\u51b5 - \u68c0\u6d4bGPU\u8bbe\u5907\u6570\u91cf\u548c\u8be6\u7ec6\u4fe1\u606f - \u663e\u793aCUDA\u548ccuDNN\u7248\u672c - \u68c0\u67e5\u786c\u4ef6\u652f\u6301\u7684\u6570\u636e\u7c7b\u578b\uff08FP16\u3001BF16\u3001INT8\u7b49\uff09</p> <p>timeit \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668: - \u6d4b\u91cf\u51fd\u6570\u6267\u884c\u65f6\u95f4 - \u76d1\u63a7\u5185\u5b58\u4f7f\u7528\u53d8\u5316 - \u652f\u6301CPU\u548cGPU\u6a21\u5f0f - \u663e\u793a\u663e\u5b58\u4f7f\u7528\u60c5\u51b5\uff08GPU\u6a21\u5f0f\uff09</p>"},{"location":"deploy/#_16","title":"\ud83d\ude80 \u9ad8\u7ea7\u529f\u80fd","text":""},{"location":"deploy/#1","title":"1. \u6a21\u578b\u4f18\u5316","text":""},{"location":"deploy/#onnx","title":"ONNX\u4f18\u5316","text":"<pre><code># \u81ea\u52a8\u4f18\u5316\ninfer.optimizer(\"optimized.onnx\")\n\n# \u624b\u52a8\u4f18\u5316\u9009\u9879\noptimization_passes = [\n    'eliminate_deadend',\n    'eliminate_identity',\n    'fuse_bn_into_conv',\n    'fuse_consecutive_concats'\n]\n</code></pre>"},{"location":"deploy/#tensorrt_1","title":"TensorRT\u4f18\u5316","text":"<pre><code># FP16\u4f18\u5316\ntrt_infer.build_engine(\n    onnx_path=\"model.onnx\",\n    engine_path=\"fp16_model.engine\",\n    fp16=True\n)\n\n# INT8\u91cf\u5316\ntrt_infer.build_engine(\n    onnx_path=\"model.onnx\",\n    engine_path=\"int8_model.engine\",\n    int8=True\n)\n</code></pre>"},{"location":"deploy/#2","title":"2. \u52a8\u6001\u5f62\u72b6\u652f\u6301","text":"<pre><code># ONNX\u52a8\u6001\u5f62\u72b6\ninfer.dynamic_input_shape(\"dynamic.onnx\", [[None, 3, None, None]])\n\n# TensorRT\u52a8\u6001\u5f62\u72b6\ndynamic_profile = {\n    \"input\": [(1, 3, 224, 224), (4, 3, 224, 224), (8, 3, 224, 224)]\n}\ntrt_infer.build_engine(\n    onnx_path=\"model.onnx\",\n    engine_path=\"dynamic.engine\",\n    dynamic_shape_profile=dynamic_profile\n)\n</code></pre>"},{"location":"deploy/#3_1","title":"3. \u6027\u80fd\u76d1\u63a7","text":"<pre><code># ONNX\u6027\u80fd\u6d4b\u8bd5\ninfer.test_performance(loop=100, warmup=10)\n\n# TensorRT\u6027\u80fd\u6d4b\u8bd5\navg_time = trt_infer.test_performance(loop=100, warmup=10)\nprint(f\"\u5e73\u5747\u63a8\u7406\u65f6\u95f4: {avg_time:.3f}ms\")\n\n# \u5185\u5b58\u4f7f\u7528\u76d1\u63a7\nimport psutil\nprocess = psutil.Process()\nmemory_usage = process.memory_info().rss / 1024 / 1024  # MB\nprint(f\"\u5185\u5b58\u4f7f\u7528: {memory_usage:.2f} MB\")\n</code></pre>"},{"location":"deploy/#4_1","title":"4. \u9519\u8bef\u5904\u7406","text":"<pre><code>try:\n    result = infer(input_data)\nexcept RuntimeError as e:\n    print(f\"\u63a8\u7406\u9519\u8bef: {e}\")\n    # \u68c0\u67e5\u6a21\u578b\u6587\u4ef6\n    if not os.path.exists(\"model.onnx\"):\n        print(\"\u6a21\u578b\u6587\u4ef6\u4e0d\u5b58\u5728\")\n    # \u68c0\u67e5\u8f93\u5165\u6570\u636e\n    if input_data.shape != expected_shape:\n        print(f\"\u8f93\u5165\u5f62\u72b6\u4e0d\u5339\u914d: {input_data.shape} vs {expected_shape}\")\nexcept Exception as e:\n    print(f\"\u672a\u77e5\u9519\u8bef: {e}\")\n</code></pre>"},{"location":"deploy/#_17","title":"\u26a1 \u6027\u80fd\u4f18\u5316","text":""},{"location":"deploy/#1_1","title":"1. \u5185\u5b58\u4f18\u5316","text":"<pre><code># \u4f7f\u7528\u5185\u5b58\u6c60\nimport numpy as np\nfrom contextlib import contextmanager\n\n@contextmanager\ndef memory_pool():\n    \"\"\"\u5185\u5b58\u6c60\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\"\"\"\n    pool = {}\n    try:\n        yield pool\n    finally:\n        pool.clear()\n\n# \u4f7f\u7528\u5185\u5b58\u6c60\nwith memory_pool() as pool:\n    if \"input_buffer\" not in pool:\n        pool[\"input_buffer\"] = np.zeros((1, 3, 224, 224), dtype=np.float32)\n    input_data = pool[\"input_buffer\"]\n    result = infer(input_data)\n</code></pre>"},{"location":"deploy/#2_1","title":"2. \u6279\u5904\u7406\u4f18\u5316","text":"<pre><code># \u6279\u91cf\u63a8\u7406\ndef batch_inference(infer, data_list, batch_size=4):\n    \"\"\"\u6279\u91cf\u63a8\u7406\"\"\"\n    results = []\n    for i in range(0, len(data_list), batch_size):\n        batch = data_list[i:i+batch_size]\n        batch_result = infer(batch)\n        results.extend(batch_result)\n    return results\n\n# \u4f7f\u7528\u6279\u91cf\u63a8\u7406\ndata_list = [np.random.rand(1, 3, 224, 224) for _ in range(100)]\nresults = batch_inference(infer, data_list, batch_size=8)\n</code></pre>"},{"location":"deploy/#3_2","title":"3. \u591a\u7ebf\u7a0b\u4f18\u5316","text":"<pre><code>import threading\nfrom queue import Queue\n\nclass ThreadedInfer:\n    \"\"\"\u591a\u7ebf\u7a0b\u63a8\u7406\"\"\"\n    def __init__(self, model_path, num_threads=4):\n        self.infer = onnxruntime_deploy.OnnxInfer(model_path)\n        self.queue = Queue()\n        self.threads = []\n\n        for _ in range(num_threads):\n            thread = threading.Thread(target=self._worker)\n            thread.start()\n            self.threads.append(thread)\n\n    def _worker(self):\n        while True:\n            try:\n                data, callback = self.queue.get(timeout=1)\n                result = self.infer(data)\n                callback(result)\n            except:\n                break\n\n    def infer_async(self, data, callback):\n        \"\"\"\u5f02\u6b65\u63a8\u7406\"\"\"\n        self.queue.put((data, callback))\n\n# \u4f7f\u7528\u591a\u7ebf\u7a0b\u63a8\u7406\nthreaded_infer = ThreadedInfer(\"model.onnx\", num_threads=4)\n\ndef on_result(result):\n    print(f\"\u5f02\u6b65\u63a8\u7406\u7ed3\u679c: {result}\")\n\nthreaded_infer.infer_async(input_data, on_result)\n</code></pre>"},{"location":"deploy/#_18","title":"\u2753 \u5e38\u89c1\u95ee\u9898","text":""},{"location":"deploy/#q1-onnx","title":"Q1: ONNX\u6a21\u578b\u52a0\u8f7d\u5931\u8d25\uff1f","text":"<p>A: \u68c0\u67e5\u4ee5\u4e0b\u51e0\u70b9\uff1a</p> <pre><code># 1. \u68c0\u67e5\u6a21\u578b\u6587\u4ef6\nif not os.path.exists(\"model.onnx\"):\n    print(\"\u6a21\u578b\u6587\u4ef6\u4e0d\u5b58\u5728\")\n\n# 2. \u68c0\u67e5\u6a21\u578b\u683c\u5f0f\nimport onnx\ntry:\n    model = onnx.load(\"model.onnx\")\n    onnx.checker.check_model(model)\nexcept Exception as e:\n    print(f\"\u6a21\u578b\u683c\u5f0f\u9519\u8bef: {e}\")\n\n# 3. \u68c0\u67e5\u63a8\u7406\u63d0\u4f9b\u8005\navailable_providers = onnxruntime.get_available_providers()\nprint(f\"\u53ef\u7528\u63d0\u4f9b\u8005: {available_providers}\")\n</code></pre>"},{"location":"deploy/#q2-tensorrt","title":"Q2: TensorRT\u5f15\u64ce\u6784\u5efa\u5931\u8d25\uff1f","text":"<p>A: \u5e38\u89c1\u89e3\u51b3\u65b9\u6848\uff1a</p> <pre><code># 1. \u68c0\u67e5TensorRT\u7248\u672c\nimport tensorrt as trt\nprint(f\"TensorRT\u7248\u672c: {trt.__version__}\")\n\n# 2. \u68c0\u67e5CUDA\u7248\u672c\nimport torch\nprint(f\"CUDA\u7248\u672c: {torch.version.cuda}\")\n\n# 3. \u51cf\u5c11\u5de5\u4f5c\u7a7a\u95f4\u5927\u5c0f\ntrt_infer.build_engine(\n    onnx_path=\"model.onnx\",\n    engine_path=\"model.engine\",\n    max_workspace_size=1&lt;&lt;30  # 1GB\n)\n</code></pre>"},{"location":"deploy/#q3","title":"Q3: \u63a8\u7406\u6027\u80fd\u4e0d\u7406\u60f3\uff1f","text":"<p>A: \u6027\u80fd\u4f18\u5316\u5efa\u8bae\uff1a</p> <pre><code># 1. \u4f7f\u7528GPU\u63a8\u7406\ninfer = onnxruntime_deploy.OnnxInfer(\n    \"model.onnx\",\n    providers=[('CUDAExecutionProvider', {})]\n)\n\n# 2. \u542f\u7528\u6a21\u578b\u4f18\u5316\ninfer.optimizer(\"optimized.onnx\")\n\n# 3. \u4f7f\u7528FP16\ntrt_infer.build_engine(\n    onnx_path=\"model.onnx\",\n    engine_path=\"fp16.engine\",\n    fp16=True\n)\n</code></pre>"},{"location":"deploy/#q4","title":"Q4: \u5185\u5b58\u4e0d\u8db3\uff1f","text":"<p>A: \u5185\u5b58\u4f18\u5316\u65b9\u6cd5\uff1a</p> <pre><code># 1. \u51cf\u5c11\u6279\u5904\u7406\u5927\u5c0f\nbatch_size = 1  # \u4ece4\u51cf\u5c11\u52301\n\n# 2. \u4f7f\u7528\u52a8\u6001\u5f62\u72b6\ninfer.dynamic_input_shape(\"dynamic.onnx\", [[None, 3, None, None]])\n\n# 3. \u53ca\u65f6\u91ca\u653e\u5185\u5b58\nimport gc\ngc.collect()\n</code></pre>"},{"location":"deploy/#q5","title":"Q5: \u5171\u4eab\u5185\u5b58\u8fde\u63a5\u5931\u8d25\uff1f","text":"<p>A: \u68c0\u67e5\u8fde\u63a5\u8bbe\u7f6e\uff1a</p> <pre><code># 1. \u68c0\u67e5\u670d\u52a1\u5668\u72b6\u6001\nif not server.is_running():\n    print(\"\u670d\u52a1\u5668\u672a\u8fd0\u884c\")\n\n# 2. \u68c0\u67e5\u7aef\u53e3\u5360\u7528\nimport socket\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nresult = sock.connect_ex(('localhost', 8080))\nif result == 0:\n    print(\"\u7aef\u53e3\u88ab\u5360\u7528\")\n\n# 3. \u68c0\u67e5\u6743\u9650\nimport os\nif not os.access(\"/dev/shm\", os.W_OK):\n    print(\"\u5171\u4eab\u5185\u5b58\u6743\u9650\u4e0d\u8db3\")\n</code></pre>"},{"location":"deploy/#q6","title":"Q6: \u6a21\u578b\u7cbe\u5ea6\u4e0b\u964d\uff1f","text":"<p>A: \u7cbe\u5ea6\u4f18\u5316\u65b9\u6cd5\uff1a</p> <pre><code># 1. \u4f7f\u7528FP32\u800c\u4e0d\u662fFP16\ntrt_infer.build_engine(\n    onnx_path=\"model.onnx\",\n    engine_path=\"fp32.engine\",\n    fp16=False\n)\n\n# 2. \u68c0\u67e5\u91cf\u5316\u8bbe\u7f6e\n# \u907f\u514d\u8fc7\u5ea6\u91cf\u5316\n\n# 3. \u9a8c\u8bc1\u63a8\u7406\u7ed3\u679c\nexpected_result = reference_inference(input_data)\nactual_result = optimized_inference(input_data)\ndiff = np.abs(expected_result - actual_result).max()\nprint(f\"\u6700\u5927\u8bef\u5dee: {diff}\")\n</code></pre>"},{"location":"deploy/#_19","title":"\ud83d\udcca \u6027\u80fd\u57fa\u51c6","text":"\u63a8\u7406\u5f15\u64ce \u6a21\u578b\u5927\u5c0f \u63a8\u7406\u65f6\u95f4 \u5185\u5b58\u4f7f\u7528 \u9002\u7528\u573a\u666f ONNX Runtime (CPU) 50MB ~50ms ~200MB \u5f00\u53d1\u6d4b\u8bd5 ONNX Runtime (GPU) 50MB ~10ms ~500MB \u751f\u4ea7\u73af\u5883 TensorRT 50MB ~5ms ~800MB \u9ad8\u6027\u80fd\u9700\u6c42 \u5171\u4eab\u5185\u5b58 50MB ~2ms ~100MB \u4f4e\u5ef6\u8fdf\u9700\u6c42"},{"location":"deploy/#_20","title":"\ud83d\udd17 \u76f8\u5173\u94fe\u63a5","text":"<ul> <li>ONNX Runtime\u6587\u6863</li> <li>TensorRT\u6587\u6863</li> <li>OpenVINO\u6587\u6863</li> <li>\u5171\u4eab\u5185\u5b58\u6587\u6863</li> </ul>   **\u5982\u6709\u95ee\u9898\uff0c\u8bf7\u67e5\u770b [\u5e38\u89c1\u95ee\u9898](#\u5e38\u89c1\u95ee\u9898) \u6216\u63d0\u4ea4 [Issue](https://github.com/SindreYang/sindre/issues)**"},{"location":"general/","title":"General \u901a\u7528\u5de5\u5177\u6a21\u5757","text":"<p>\u63d0\u4f9b\u901a\u7528\u5de5\u5177\u548c\u529f\u80fd\uff0c\u5305\u62ec\u9ad8\u7ea7\u65e5\u5fd7\u8bb0\u5f55\u3001\u591a\u8fdb\u7a0b\u652f\u6301\u3001print\u91cd\u5b9a\u5411\u7b49</p>"},{"location":"general/#_1","title":"\ud83d\udccb \u76ee\u5f55","text":"<ul> <li>\u529f\u80fd\u7279\u6027</li> <li>\u5feb\u901f\u5f00\u59cb</li> <li>\u6838\u5fc3\u529f\u80fd</li> <li>\u4f7f\u7528\u6307\u5357</li> <li>\u9ad8\u7ea7\u529f\u80fd</li> <li>\u914d\u7f6e\u9009\u9879</li> <li>\u5e38\u89c1\u95ee\u9898</li> </ul>"},{"location":"general/#_2","title":"\u2728 \u529f\u80fd\u7279\u6027","text":"<ul> <li>\ud83d\udcdd \u9ad8\u7ea7\u65e5\u5fd7: \u57fa\u4e8eloguru\u7684\u5f3a\u5927\u65e5\u5fd7\u8bb0\u5f55\u529f\u80fd</li> <li>\ud83d\udd04 \u591a\u8fdb\u7a0b\u652f\u6301: \u7ebf\u7a0b\u5b89\u5168\u7684\u65e5\u5fd7\u8bb0\u5f55</li> <li>\ud83d\udda8\ufe0f Print\u91cd\u5b9a\u5411: \u81ea\u52a8\u6355\u83b7print\u8f93\u51fa\u5230\u65e5\u5fd7</li> <li>\ud83d\udcca \u65e5\u5fd7\u5206\u7ea7: \u652f\u6301\u591a\u79cd\u65e5\u5fd7\u7ea7\u522b\u548c\u8fc7\u6ee4</li> <li>\ud83d\udcc1 \u6587\u4ef6\u7ba1\u7406: \u81ea\u52a8\u65e5\u5fd7\u6587\u4ef6\u8f6e\u8f6c\u548c\u7ba1\u7406</li> <li>\ud83c\udfa8 \u5f69\u8272\u8f93\u51fa: \u7f8e\u89c2\u7684\u63a7\u5236\u53f0\u5f69\u8272\u65e5\u5fd7</li> <li>\ud83d\udee1\ufe0f \u5f02\u5e38\u6355\u83b7: \u81ea\u52a8\u5f02\u5e38\u8bb0\u5f55\u548c\u5806\u6808\u8ddf\u8e2a</li> </ul>"},{"location":"general/#_3","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"general/#_4","title":"\u57fa\u672c\u4f7f\u7528","text":"<pre><code>from sindre.general.logs import CustomLogger\n\n# \u521b\u5efa\u57fa\u672c\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = CustomLogger(\n    logger_name=\"MyApp\",\n    level=\"INFO\",\n    console_output=True,\n    file_output=True\n).get_logger()\n\n# \u8bb0\u5f55\u65e5\u5fd7\nlogger.info(\"\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\")\nlogger.warning(\"\u53d1\u73b0\u6f5c\u5728\u95ee\u9898\")\nlogger.error(\"\u53d1\u751f\u9519\u8bef\")\n</code></pre>"},{"location":"general/#_5","title":"\u9ad8\u7ea7\u914d\u7f6e","text":"<pre><code>from sindre.general.logs import CustomLogger\n\n# \u521b\u5efa\u9ad8\u7ea7\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = CustomLogger(\n    logger_name=\"AdvancedApp\",\n    level=\"DEBUG\",\n    log_dir=\"logs\",\n    console_output=True,\n    file_output=True,\n    capture_print=True\n).get_logger()\n\n# \u8bb0\u5f55\u4e0d\u540c\u7ea7\u522b\u7684\u65e5\u5fd7\nlogger.debug(\"\u8c03\u8bd5\u4fe1\u606f\")\nlogger.info(\"\u666e\u901a\u4fe1\u606f\")\nlogger.success(\"\u6210\u529f\u4fe1\u606f\")\nlogger.warning(\"\u8b66\u544a\u4fe1\u606f\")\nlogger.error(\"\u9519\u8bef\u4fe1\u606f\")\nlogger.critical(\"\u4e25\u91cd\u9519\u8bef\")\n</code></pre>"},{"location":"general/#_6","title":"\ud83d\udd27 \u6838\u5fc3\u529f\u80fd","text":""},{"location":"general/#customlogger","title":"CustomLogger \u7c7b","text":"<pre><code>class CustomLogger:\n    \"\"\"\u81ea\u5b9a\u4e49\u65e5\u5fd7\u8bb0\u5f55\u5668\u7c7b\"\"\"\n\n    def __init__(\n        self,\n        logger_name=None,\n        level=\"DEBUG\",\n        log_dir=\"logs\",\n        console_output=True,\n        file_output=False,\n        capture_print=False,\n        filter_log=None\n    ):\n        \"\"\"\n        \u521d\u59cb\u5316\u65e5\u5fd7\u8bb0\u5f55\u5668\n\n        Args:\n            logger_name: \u65e5\u5fd7\u8bb0\u5f55\u5668\u540d\u79f0\n            level: \u65e5\u5fd7\u7ea7\u522b (TRACE, DEBUG, INFO, SUCCESS, WARNING, ERROR, CRITICAL)\n            log_dir: \u65e5\u5fd7\u6587\u4ef6\u5b58\u50a8\u76ee\u5f55\n            console_output: \u662f\u5426\u542f\u7528\u63a7\u5236\u53f0\u8f93\u51fa\n            file_output: \u662f\u5426\u542f\u7528\u6587\u4ef6\u8f93\u51fa\n            capture_print: \u662f\u5426\u6355\u83b7print\u8f93\u51fa\n            filter_log: \u81ea\u5b9a\u4e49\u65e5\u5fd7\u8fc7\u6ee4\u51fd\u6570\n        \"\"\"\n\n    def get_logger(self):\n        \"\"\"\u83b7\u53d6\u914d\u7f6e\u597d\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u5b9e\u4f8b\"\"\"\n        return self.logger\n</code></pre>"},{"location":"general/#_7","title":"\ud83d\udcd6 \u4f7f\u7528\u6307\u5357","text":""},{"location":"general/#1","title":"1. \u57fa\u672c\u65e5\u5fd7\u8bb0\u5f55","text":""},{"location":"general/#_8","title":"\u7b80\u5355\u65e5\u5fd7\u8bb0\u5f55","text":"<pre><code>from sindre.general.logs import CustomLogger\n\n# \u521b\u5efa\u57fa\u672c\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = CustomLogger(\n    logger_name=\"SimpleApp\",\n    level=\"INFO\",\n    console_output=True\n).get_logger()\n\n# \u8bb0\u5f55\u4e0d\u540c\u7ea7\u522b\u7684\u65e5\u5fd7\nlogger.debug(\"\u8fd9\u662f\u8c03\u8bd5\u4fe1\u606f\")\nlogger.info(\"\u8fd9\u662f\u666e\u901a\u4fe1\u606f\")\nlogger.warning(\"\u8fd9\u662f\u8b66\u544a\u4fe1\u606f\")\nlogger.error(\"\u8fd9\u662f\u9519\u8bef\u4fe1\u606f\")\nlogger.critical(\"\u8fd9\u662f\u4e25\u91cd\u9519\u8bef\")\n\n# \u683c\u5f0f\u5316\u65e5\u5fd7\nname = \"\u5f20\u4e09\"\nage = 25\nlogger.info(f\"\u7528\u6237 {name} \u5e74\u9f84 {age} \u5c81\")\nlogger.info(\"\u7528\u6237 {} \u5e74\u9f84 {} \u5c81\", name, age)  # loguru\u98ce\u683c\n</code></pre>"},{"location":"general/#_9","title":"\u6587\u4ef6\u65e5\u5fd7\u8bb0\u5f55","text":"<pre><code>from sindre.general.logs import CustomLogger\n\n# \u521b\u5efa\u6587\u4ef6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = CustomLogger(\n    logger_name=\"FileApp\",\n    level=\"DEBUG\",\n    log_dir=\"logs\",\n    console_output=True,\n    file_output=True\n).get_logger()\n\n# \u65e5\u5fd7\u4f1a\u81ea\u52a8\u4fdd\u5b58\u5230\u6587\u4ef6\nlogger.info(\"\u8fd9\u6761\u4fe1\u606f\u4f1a\u540c\u65f6\u663e\u793a\u5728\u63a7\u5236\u53f0\u548c\u4fdd\u5b58\u5230\u6587\u4ef6\")\nlogger.error(\"\u9519\u8bef\u4fe1\u606f\u4e5f\u4f1a\u88ab\u8bb0\u5f55\")\n\n# \u67e5\u770b\u751f\u6210\u7684\u65e5\u5fd7\u6587\u4ef6\n# - logs/run_YYYY-MM-DD.log (\u8fd0\u884c\u65e5\u5fd7\uff0c\u6bcf\u5929\u8f6e\u8f6c)\n# - logs/error.log (\u9519\u8bef\u65e5\u5fd7\uff0c10MB\u8f6e\u8f6c)\n</code></pre>"},{"location":"general/#2-print","title":"2. Print\u91cd\u5b9a\u5411","text":""},{"location":"general/#print","title":"\u6355\u83b7Print\u8f93\u51fa","text":"<pre><code>from sindre.general.logs import CustomLogger\n\n# \u521b\u5efa\u652f\u6301print\u91cd\u5b9a\u5411\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = CustomLogger(\n    logger_name=\"PrintCapture\",\n    level=\"INFO\",\n    console_output=True,\n    capture_print=True\n).get_logger()\n\n# \u666e\u901a\u7684print\u8bed\u53e5\u4f1a\u88ab\u81ea\u52a8\u6355\u83b7\nprint(\"\u8fd9\u6761print\u8bed\u53e5\u4f1a\u88ab\u6355\u83b7\u5e76\u8bb0\u5f55\u5230\u65e5\u5fd7\u4e2d\")\nprint(\"\u5305\u542b\u884c\u53f7\u4fe1\u606f\u7684print\u8f93\u51fa\")\n\n# \u65e5\u5fd7\u8f93\u51fa\u793a\u4f8b\uff1a\n# 2024-01-01 12:00:00 | INFO     | PrintCapture | main.py:main:15 - Print(line 15): \u8fd9\u6761print\u8bed\u53e5\u4f1a\u88ab\u6355\u83b7\u5e76\u8bb0\u5f55\u5230\u65e5\u5fd7\u4e2d\n</code></pre>"},{"location":"general/#_10","title":"\u6df7\u5408\u4f7f\u7528","text":"<pre><code>from sindre.general.logs import CustomLogger\n\nlogger = CustomLogger(\n    logger_name=\"MixedApp\",\n    level=\"INFO\",\n    console_output=True,\n    capture_print=True\n).get_logger()\n\n# \u4f7f\u7528logger\u8bb0\u5f55\nlogger.info(\"\u4f7f\u7528logger\u8bb0\u5f55\u7684\u4fe1\u606f\")\n\n# \u4f7f\u7528print\uff08\u4f1a\u88ab\u81ea\u52a8\u6355\u83b7\uff09\nprint(\"\u4f7f\u7528print\u8f93\u51fa\u7684\u4fe1\u606f\")\n\n# \u4e24\u8005\u90fd\u4f1a\u663e\u793a\u5728\u65e5\u5fd7\u4e2d\uff0c\u4f46\u683c\u5f0f\u7565\u6709\u4e0d\u540c\n</code></pre>"},{"location":"general/#3","title":"3. \u5f02\u5e38\u6355\u83b7","text":""},{"location":"general/#_11","title":"\u81ea\u52a8\u5f02\u5e38\u6355\u83b7","text":"<pre><code>from sindre.general.logs import CustomLogger\n\nlogger = CustomLogger(\n    logger_name=\"ExceptionApp\",\n    level=\"INFO\",\n    console_output=True\n).get_logger()\n\n# \u4f7f\u7528\u88c5\u9970\u5668\u81ea\u52a8\u6355\u83b7\u5f02\u5e38\n@logger.catch\ndef risky_function():\n    \"\"\"\u53ef\u80fd\u51fa\u9519\u7684\u51fd\u6570\"\"\"\n    result = 10 / 0\n    return result\n\n# \u8c03\u7528\u51fd\u6570\uff0c\u5f02\u5e38\u4f1a\u88ab\u81ea\u52a8\u8bb0\u5f55\ntry:\n    risky_function()\nexcept Exception:\n    pass\n\n# \u624b\u52a8\u6355\u83b7\u5f02\u5e38\ntry:\n    raise ValueError(\"\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u5f02\u5e38\")\nexcept Exception:\n    logger.exception(\"\u6355\u83b7\u5230\u5f02\u5e38\")\n</code></pre>"},{"location":"general/#4","title":"4. \u65e5\u5fd7\u8fc7\u6ee4","text":""},{"location":"general/#_12","title":"\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668","text":"<pre><code>from sindre.general.logs import CustomLogger\n\n# \u5b9a\u4e49\u8fc7\u6ee4\u51fd\u6570\ndef info_only_filter(record):\n    \"\"\"\u53ea\u663e\u793aINFO\u7ea7\u522b\u7684\u65e5\u5fd7\"\"\"\n    return record[\"level\"].name == \"INFO\"\n\ndef exclude_sensitive_filter(record):\n    \"\"\"\u6392\u9664\u5305\u542b\u654f\u611f\u4fe1\u606f\u7684\u65e5\u5fd7\"\"\"\n    sensitive_words = [\"password\", \"token\", \"secret\"]\n    message = record[\"message\"].lower()\n    return not any(word in message for word in sensitive_words)\n\n# \u521b\u5efa\u5e26\u8fc7\u6ee4\u5668\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = CustomLogger(\n    logger_name=\"FilteredApp\",\n    level=\"DEBUG\",\n    console_output=True,\n    filter_log=info_only_filter\n).get_logger()\n\n# \u53ea\u6709INFO\u7ea7\u522b\u7684\u65e5\u5fd7\u4f1a\u88ab\u663e\u793a\nlogger.debug(\"\u8fd9\u6761\u8c03\u8bd5\u4fe1\u606f\u4e0d\u4f1a\u663e\u793a\")\nlogger.info(\"\u8fd9\u6761\u4fe1\u606f\u4f1a\u663e\u793a\")\nlogger.warning(\"\u8fd9\u6761\u8b66\u544a\u4e0d\u4f1a\u663e\u793a\")\n</code></pre>"},{"location":"general/#_13","title":"\ud83d\ude80 \u9ad8\u7ea7\u529f\u80fd","text":""},{"location":"general/#1_1","title":"1. \u591a\u8fdb\u7a0b\u65e5\u5fd7","text":"<pre><code>from sindre.general.logs import CustomLogger\nimport multiprocessing as mp\n\ndef worker_process(logger_name, process_id):\n    \"\"\"\u5de5\u4f5c\u8fdb\u7a0b\u51fd\u6570\"\"\"\n    logger = CustomLogger(\n        logger_name=logger_name,\n        level=\"INFO\",\n        log_dir=\"logs\",\n        console_output=False,\n        file_output=True\n    ).get_logger()\n\n    logger.info(f\"\u8fdb\u7a0b {process_id} \u5f00\u59cb\u5de5\u4f5c\")\n    # \u6267\u884c\u4e00\u4e9b\u5de5\u4f5c...\n    logger.info(f\"\u8fdb\u7a0b {process_id} \u5b8c\u6210\u5de5\u4f5c\")\n\n# \u4e3b\u8fdb\u7a0b\nif __name__ == \"__main__\":\n    main_logger = CustomLogger(\n        logger_name=\"MainApp\",\n        level=\"INFO\",\n        console_output=True,\n        file_output=True\n    ).get_logger()\n\n    main_logger.info(\"\u542f\u52a8\u591a\u8fdb\u7a0b\u4efb\u52a1\")\n\n    # \u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b\n    processes = []\n    for i in range(4):\n        p = mp.Process(target=worker_process, args=(\"WorkerApp\", i))\n        processes.append(p)\n        p.start()\n\n    # \u7b49\u5f85\u6240\u6709\u8fdb\u7a0b\u5b8c\u6210\n    for p in processes:\n        p.join()\n\n    main_logger.info(\"\u6240\u6709\u8fdb\u7a0b\u5b8c\u6210\")\n</code></pre>"},{"location":"general/#2","title":"2. \u65e5\u5fd7\u8f6e\u8f6c","text":"<pre><code>from sindre.general.logs import CustomLogger\n\n# \u65e5\u5fd7\u4f1a\u81ea\u52a8\u8f6e\u8f6c\nlogger = CustomLogger(\n    logger_name=\"RotationApp\",\n    level=\"INFO\",\n    log_dir=\"logs\",\n    file_output=True\n).get_logger()\n\n# \u8fd0\u884c\u65e5\u5fd7\uff1a\u6bcf\u592900:00\u8f6e\u8f6c\n# \u9519\u8bef\u65e5\u5fd7\uff1a\u8fbe\u523010MB\u65f6\u8f6e\u8f6c\nfor i in range(1000):\n    logger.info(f\"\u8fd9\u662f\u7b2c {i} \u6761\u65e5\u5fd7\u4fe1\u606f\")\n    if i % 100 == 0:\n        logger.error(f\"\u8fd9\u662f\u7b2c {i} \u6761\u9519\u8bef\u4fe1\u606f\")\n</code></pre>"},{"location":"general/#3_1","title":"3. \u6027\u80fd\u76d1\u63a7","text":"<pre><code>from sindre.general.logs import CustomLogger\nimport time\n\nlogger = CustomLogger(\n    logger_name=\"PerformanceApp\",\n    level=\"INFO\",\n    console_output=True\n).get_logger()\n\n# \u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u8bb0\u5f55\u6267\u884c\u65f6\u95f4\n@logger.catch\ndef performance_test():\n    start_time = time.time()\n\n    # \u6a21\u62df\u8017\u65f6\u64cd\u4f5c\n    time.sleep(2)\n\n    end_time = time.time()\n    execution_time = end_time - start_time\n\n    logger.info(f\"\u64cd\u4f5c\u5b8c\u6210\uff0c\u8017\u65f6: {execution_time:.2f}\u79d2\")\n\n    # \u6a21\u62df\u5f02\u5e38\n    if execution_time &gt; 1.5:\n        raise TimeoutError(\"\u64cd\u4f5c\u8d85\u65f6\")\n\n# \u6267\u884c\u6027\u80fd\u6d4b\u8bd5\nperformance_test()\n</code></pre>"},{"location":"general/#4_1","title":"4. \u7ed3\u6784\u5316\u65e5\u5fd7","text":"<pre><code>from sindre.general.logs import CustomLogger\nimport json\n\nlogger = CustomLogger(\n    logger_name=\"StructuredApp\",\n    level=\"INFO\",\n    console_output=True\n).get_logger()\n\n# \u8bb0\u5f55\u7ed3\u6784\u5316\u6570\u636e\nuser_data = {\n    \"user_id\": 12345,\n    \"username\": \"\u5f20\u4e09\",\n    \"action\": \"login\",\n    \"timestamp\": \"2024-01-01T12:00:00Z\"\n}\n\nlogger.info(\"\u7528\u6237\u64cd\u4f5c: {}\", json.dumps(user_data, ensure_ascii=False))\n\n# \u8bb0\u5f55\u4e1a\u52a1\u4e8b\u4ef6\ndef log_business_event(event_type, data):\n    \"\"\"\u8bb0\u5f55\u4e1a\u52a1\u4e8b\u4ef6\"\"\"\n    event = {\n        \"event_type\": event_type,\n        \"data\": data,\n        \"timestamp\": time.time()\n    }\n    logger.info(\"\u4e1a\u52a1\u4e8b\u4ef6: {}\", json.dumps(event, ensure_ascii=False))\n\n# \u4f7f\u7528\u793a\u4f8b\nlog_business_event(\"user_login\", {\"user_id\": 12345, \"ip\": \"192.168.1.1\"})\nlog_business_event(\"order_created\", {\"order_id\": \"ORD001\", \"amount\": 99.99})\n</code></pre>"},{"location":"general/#_14","title":"\u2699\ufe0f \u914d\u7f6e\u9009\u9879","text":""},{"location":"general/#_15","title":"\u65e5\u5fd7\u7ea7\u522b","text":"<pre><code># \u652f\u6301\u7684\u65e5\u5fd7\u7ea7\u522b\uff08\u4ece\u4f4e\u5230\u9ad8\uff09\nlevels = [\n    \"TRACE\",      # \u6700\u8be6\u7ec6\u7684\u8c03\u8bd5\u4fe1\u606f\n    \"DEBUG\",      # \u8c03\u8bd5\u4fe1\u606f\n    \"INFO\",       # \u4e00\u822c\u4fe1\u606f\n    \"SUCCESS\",    # \u6210\u529f\u4fe1\u606f\n    \"WARNING\",    # \u8b66\u544a\u4fe1\u606f\n    \"ERROR\",      # \u9519\u8bef\u4fe1\u606f\n    \"CRITICAL\"    # \u4e25\u91cd\u9519\u8bef\n]\n\n# \u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b\nlogger = CustomLogger(\n    logger_name=\"LevelApp\",\n    level=\"WARNING\",  # \u53ea\u663e\u793aWARNING\u53ca\u4ee5\u4e0a\u7ea7\u522b\u7684\u65e5\u5fd7\n    console_output=True\n).get_logger()\n</code></pre>"},{"location":"general/#_16","title":"\u65e5\u5fd7\u683c\u5f0f","text":"<pre><code># \u9ed8\u8ba4\u65e5\u5fd7\u683c\u5f0f\nlog_format = (\n    \"&lt;green&gt;{time:YYYY-MM-DD HH:mm:ss}&lt;/green&gt; | \"\n    \"&lt;level&gt;{level: &lt;8}&lt;/level&gt; | \"\n    \"&lt;blue&gt;{extra[name]: &lt;8}&lt;/blue&gt; | \"\n    \"&lt;cyan&gt;{file}&lt;/cyan&gt;:&lt;cyan&gt;{name}&lt;/cyan&gt;:&lt;cyan&gt;{function}&lt;/cyan&gt;:&lt;cyan&gt;{line}&lt;/cyan&gt; - \"\n    \"&lt;level&gt;{message}&lt;/level&gt;\"\n)\n\n# \u8f93\u51fa\u793a\u4f8b\uff1a\n# 2024-01-01 12:00:00 | INFO     | MyApp     | main.py:main:15 - \u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\n</code></pre>"},{"location":"general/#_17","title":"\u6587\u4ef6\u914d\u7f6e","text":"<pre><code># \u65e5\u5fd7\u6587\u4ef6\u914d\u7f6e\nlogger = CustomLogger(\n    logger_name=\"FileConfigApp\",\n    level=\"INFO\",\n    log_dir=\"custom_logs\",  # \u81ea\u5b9a\u4e49\u65e5\u5fd7\u76ee\u5f55\n    console_output=True,\n    file_output=True\n).get_logger()\n\n# \u751f\u6210\u7684\u6587\u4ef6\uff1a\n# - custom_logs/run_2024-01-01.log (\u8fd0\u884c\u65e5\u5fd7)\n# - custom_logs/error.log (\u9519\u8bef\u65e5\u5fd7)\n</code></pre>"},{"location":"general/#_18","title":"\u2753 \u5e38\u89c1\u95ee\u9898","text":""},{"location":"general/#q1","title":"Q1: \u5982\u4f55\u7981\u7528\u7279\u5b9a\u6a21\u5757\u7684\u65e5\u5fd7\uff1f","text":"<p>A: \u4f7f\u7528enable/disable\u65b9\u6cd5\uff1a</p> <pre><code>from sindre.general.logs import CustomLogger\n\nlogger = CustomLogger(\"MyApp\").get_logger()\n\n# \u7981\u7528\u5f53\u524d\u6a21\u5757\u7684\u65e5\u5fd7\nlogger.disable(__name__)\nlogger.info(\"\u8fd9\u6761\u65e5\u5fd7\u4e0d\u4f1a\u663e\u793a\")\n\n# \u91cd\u65b0\u542f\u7528\nlogger.enable(__name__)\nlogger.info(\"\u8fd9\u6761\u65e5\u5fd7\u4f1a\u663e\u793a\")\n</code></pre>"},{"location":"general/#q2","title":"Q2: \u5982\u4f55\u81ea\u5b9a\u4e49\u65e5\u5fd7\u683c\u5f0f\uff1f","text":"<p>A: \u4fee\u6539CustomLogger\u7c7b\u7684_configure_logger\u65b9\u6cd5\uff1a</p> <pre><code># \u5728CustomLogger\u7c7b\u4e2d\u4fee\u6539log_format\nlog_format = (\n    \"{time:YYYY-MM-DD HH:mm:ss} | \"\n    \"{level} | \"\n    \"{name} | \"\n    \"{message}\"\n)\n</code></pre>"},{"location":"general/#q3","title":"Q3: \u5982\u4f55\u5904\u7406\u5927\u91cf\u65e5\u5fd7\uff1f","text":"<p>A: \u4f7f\u7528\u65e5\u5fd7\u8f6e\u8f6c\u548c\u8fc7\u6ee4\uff1a</p> <pre><code>logger = CustomLogger(\n    logger_name=\"HighVolumeApp\",\n    level=\"WARNING\",  # \u53ea\u8bb0\u5f55\u91cd\u8981\u65e5\u5fd7\n    log_dir=\"logs\",\n    file_output=True\n).get_logger()\n\n# \u65e5\u5fd7\u4f1a\u81ea\u52a8\u8f6e\u8f6c\uff0c\u907f\u514d\u6587\u4ef6\u8fc7\u5927\n</code></pre>"},{"location":"general/#q4","title":"Q4: \u5982\u4f55\u5728\u4e0d\u540c\u8fdb\u7a0b\u95f4\u5171\u4eab\u65e5\u5fd7\uff1f","text":"<p>A: \u4f7f\u7528\u6587\u4ef6\u8f93\u51fa\u548c\u8fdb\u7a0b\u5b89\u5168\u7684\u914d\u7f6e\uff1a</p> <pre><code>logger = CustomLogger(\n    logger_name=\"MultiProcessApp\",\n    level=\"INFO\",\n    log_dir=\"logs\",\n    console_output=False,  # \u907f\u514d\u63a7\u5236\u53f0\u51b2\u7a81\n    file_output=True       # \u4f7f\u7528\u6587\u4ef6\u8f93\u51fa\n).get_logger()\n</code></pre>"},{"location":"general/#q5","title":"Q5: \u5982\u4f55\u6355\u83b7\u7b2c\u4e09\u65b9\u5e93\u7684\u65e5\u5fd7\uff1f","text":"<p>A: \u4f7f\u7528print\u91cd\u5b9a\u5411\u548c\u5f02\u5e38\u6355\u83b7\uff1a</p> <pre><code>logger = CustomLogger(\n    logger_name=\"ThirdPartyApp\",\n    level=\"INFO\",\n    console_output=True,\n    capture_print=True  # \u6355\u83b7print\u8f93\u51fa\n).get_logger()\n\n# \u7b2c\u4e09\u65b9\u5e93\u7684print\u8f93\u51fa\u4f1a\u88ab\u6355\u83b7\nimport some_third_party_library\nsome_third_party_library.some_function()\n</code></pre>"},{"location":"general/#q6","title":"Q6: \u5982\u4f55\u8c03\u8bd5\u65e5\u5fd7\u914d\u7f6e\u95ee\u9898\uff1f","text":"<p>A: \u4f7f\u7528\u7b80\u5355\u7684\u914d\u7f6e\u8fdb\u884c\u6d4b\u8bd5\uff1a</p> <pre><code># \u6700\u7b80\u5355\u7684\u914d\u7f6e\nlogger = CustomLogger(\n    logger_name=\"DebugApp\",\n    level=\"DEBUG\",\n    console_output=True,\n    file_output=False\n).get_logger()\n\n# \u9010\u6b65\u6dfb\u52a0\u529f\u80fd\nlogger.info(\"\u6d4b\u8bd5\u57fa\u672c\u529f\u80fd\")\nlogger.debug(\"\u6d4b\u8bd5\u8c03\u8bd5\u7ea7\u522b\")\n</code></pre>"},{"location":"general/#q7","title":"Q7: \u5982\u4f55\u4f18\u5316\u65e5\u5fd7\u6027\u80fd\uff1f","text":"<p>A: \u4f7f\u7528\u9002\u5f53\u7684\u914d\u7f6e\uff1a</p> <pre><code>logger = CustomLogger(\n    logger_name=\"PerformanceApp\",\n    level=\"INFO\",  # \u907f\u514d\u8fc7\u591aDEBUG\u65e5\u5fd7\n    console_output=True,\n    file_output=False,  # \u5982\u679c\u4e0d\u9700\u8981\u6587\u4ef6\u8f93\u51fa\n    capture_print=False  # \u5982\u679c\u4e0d\u9700\u8981\u6355\u83b7print\n).get_logger()\n</code></pre>"},{"location":"general/#q8","title":"Q8: \u5982\u4f55\u5904\u7406\u65e5\u5fd7\u6587\u4ef6\u6743\u9650\u95ee\u9898\uff1f","text":"<p>A: \u786e\u4fdd\u76ee\u5f55\u6743\u9650\u6b63\u786e\uff1a</p> <pre><code>import os\n\n# \u786e\u4fdd\u65e5\u5fd7\u76ee\u5f55\u5b58\u5728\u4e14\u6709\u5199\u6743\u9650\nlog_dir = \"logs\"\nos.makedirs(log_dir, exist_ok=True)\n\nlogger = CustomLogger(\n    logger_name=\"PermissionApp\",\n    log_dir=log_dir,\n    file_output=True\n).get_logger()\n</code></pre>"},{"location":"general/#_19","title":"\ud83d\udcca \u6027\u80fd\u57fa\u51c6","text":"\u64cd\u4f5c \u65e5\u5fd7\u6570\u91cf \u65f6\u95f4 \u5185\u5b58\u4f7f\u7528 \u63a7\u5236\u53f0\u8f93\u51fa 10,000\u6761 ~2s ~10MB \u6587\u4ef6\u8f93\u51fa 10,000\u6761 ~5s ~20MB Print\u91cd\u5b9a\u5411 10,000\u6761 ~3s ~15MB \u5f02\u5e38\u6355\u83b7 1,000\u6b21 ~1s ~5MB"},{"location":"general/#_20","title":"\ud83d\udd17 \u76f8\u5173\u94fe\u63a5","text":"<ul> <li>Loguru\u6587\u6863</li> <li>Python\u65e5\u5fd7\u6700\u4f73\u5b9e\u8df5</li> <li>\u591a\u8fdb\u7a0b\u65e5\u5fd7\u5904\u7406</li> </ul>   **\u5982\u6709\u95ee\u9898\uff0c\u8bf7\u67e5\u770b [\u5e38\u89c1\u95ee\u9898](#\u5e38\u89c1\u95ee\u9898) \u6216\u63d0\u4ea4 [Issue](https://github.com/SindreYang/sindre/issues)**"},{"location":"lmdb/","title":"LMDB \u6570\u636e\u5e93\u6a21\u5757","text":"<p>\u9ad8\u6027\u80fd\u7684LMDB\u6570\u636e\u5e93\u64cd\u4f5c\u6a21\u5757\uff0c\u652f\u6301\u5927\u89c4\u6a21\u6570\u636e\u5b58\u50a8\u548c\u9ad8\u6548\u8bfb\u53d6</p>"},{"location":"lmdb/#_1","title":"\ud83d\udccb \u76ee\u5f55","text":"<ul> <li>\u529f\u80fd\u7279\u6027</li> <li>\u5feb\u901f\u5f00\u59cb</li> <li>\u6838\u5fc3\u7c7b</li> <li>\u4f7f\u7528\u6307\u5357</li> <li>\u9ad8\u7ea7\u529f\u80fd</li> <li>\u6027\u80fd\u4f18\u5316</li> <li>\u5e38\u89c1\u95ee\u9898</li> </ul>"},{"location":"lmdb/#_2","title":"\u2728 \u529f\u80fd\u7279\u6027","text":"<ul> <li>\ud83d\ude80 \u9ad8\u6027\u80fd: \u57fa\u4e8eLMDB\u7684\u9ad8\u6027\u80fd\u6570\u636e\u5e93\u64cd\u4f5c</li> <li>\ud83d\udce6 \u6570\u636e\u5e8f\u5217\u5316: \u81ea\u52a8\u5904\u7406numpy\u6570\u7ec4\u548c\u590d\u6742\u6570\u636e\u7ed3\u6784</li> <li>\ud83d\udd04 \u591a\u8fdb\u7a0b\u652f\u6301: \u652f\u6301\u591a\u8fdb\u7a0b\u5e76\u53d1\u8bfb\u5199</li> <li>\ud83d\udcbe \u5185\u5b58\u4f18\u5316: \u667a\u80fd\u5185\u5b58\u7ba1\u7406\u548c\u5927\u5c0f\u63a7\u5236</li> <li>\ud83d\udd27 \u5de5\u5177\u4e30\u5bcc: \u63d0\u4f9b\u6570\u636e\u5e93\u5408\u5e76\u3001\u5206\u5272\u3001\u4fee\u590d\u7b49\u5de5\u5177</li> <li>\ud83d\udee1\ufe0f \u6570\u636e\u5b89\u5168: \u4e8b\u52a1\u6027\u64cd\u4f5c\uff0c\u786e\u4fdd\u6570\u636e\u4e00\u81f4\u6027</li> </ul>"},{"location":"lmdb/#_3","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"lmdb/#_4","title":"\u57fa\u672c\u4f7f\u7528","text":"<pre><code>import sindre.lmdb as lmdb\nimport numpy as np\n\n# \u521b\u5efa\u6570\u636e\u5e93,\u652f\u6301\u76ee\u5f55\uff0c\u4e5f\u652f\u6301\u6587\u4ef6\nwriter = lmdb.Writer('./data.db', map_size_limit=1024*100)  # map_size_limit\u5355\u4f4d\u4e3aMB \n#writer = lmdb.Writer('./data', map_size_limit=1024*100)  # \u4f1a\u521b\u5efadata\u76ee\u5f55\n\n# \u5199\u5165\u6570\u636e\ndata = {\n    'points': np.random.rand(100, 3),\n    'labels': np.random.randint(0, 10, 100),\n    'version': '1.0'\uff0c\n}\nwriter.put_samples(data)\nwriter.close()\n\n# \u8bfb\u53d6\u6570\u636e\nreader = lmdb.Reader('./data.db')\nsample = reader[0]\nprint(f\"\u8bfb\u53d6\u5230 {len(sample['points'])} \u4e2a\u70b9\")\nreader.close()\n</code></pre>"},{"location":"lmdb/#pytorch","title":"PyTorch \u6570\u636e\u96c6\u96c6\u6210","text":"<pre><code>import torch\nfrom sindre.lmdb import Reader\n\nclass LMDBDataset(torch.utils.data.Dataset):\n    def __init__(self, db_path):\n        self.db = Reader(db_path, multiprocessing=False)\n\n    def __len__(self):\n        return len(self.db)\n\n    def __getitem__(self, idx):\n        data = self.db[idx]\n        # \u8f6c\u6362\u4e3atorch\u5f20\u91cf\n        return {k: torch.from_numpy(v) for k, v in data.items()}\n\n# \u4f7f\u7528\ndataset = LMDBDataset('./data')\ndataloader = torch.utils.data.DataLoader(dataset, batch_size=32)\n</code></pre>"},{"location":"lmdb/#_5","title":"\ud83d\udd27 \u6838\u5fc3\u7c7b","text":""},{"location":"lmdb/#writer-","title":"Writer - \u6570\u636e\u5e93\u5199\u5165\u5668","text":"<pre><code>class Writer:\n    \"\"\"LMDB\u6570\u636e\u5e93\u5199\u5165\u5668\"\"\"\n\n    def __init__(self, dirpath: str, map_size_limit: int, multiprocessing: bool = False):\n        \"\"\"\n        \u521d\u59cb\u5316\u5199\u5165\u5668\n\n        Args:\n            dirpath: \u6570\u636e\u5e93\u76ee\u5f55\u8def\u5f84\n            map_size_limit: \u6570\u636e\u5e93\u5927\u5c0f\u9650\u5236\uff08MB\uff09\n            multiprocessing: \u662f\u5426\u542f\u7528\u591a\u8fdb\u7a0b\u652f\u6301\n        \"\"\"\n\n    def put_samples(self, samples: dict):\n        \"\"\"\u6279\u91cf\u5199\u5165\u6837\u672c\u6570\u636e\"\"\"\n\n    def change_value(self, num_id: int, samples: dict):\n        \"\"\"\u4fee\u6539\u6307\u5b9aID\u7684\u6570\u636e\"\"\"\n\n    def change_db_value(self, key: int, value: dict, safe_model: bool = True):\n        \"\"\"\u5b89\u5168\u4fee\u6539\u6570\u636e\u5e93\u503c\uff0c\u5e26\u786e\u8ba4\u63d0\u793a\"\"\"\n\n    def check_sample_size(self, samples: dict):\n        \"\"\"\u68c0\u67e5\u6837\u672c\u5927\u5c0f\uff08GB\uff09\"\"\"\n\n    def close(self):\n        \"\"\"\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5\"\"\"\n</code></pre>"},{"location":"lmdb/#reader-","title":"Reader - \u6570\u636e\u5e93\u8bfb\u53d6\u5668","text":"<pre><code>class Reader:\n    \"\"\"LMDB\u6570\u636e\u5e93\u8bfb\u53d6\u5668\"\"\"\n\n    def __init__(self, dirpath: str, multiprocessing: bool = False):\n        \"\"\"\n        \u521d\u59cb\u5316\u8bfb\u53d6\u5668\n\n        Args:\n            dirpath: \u6570\u636e\u5e93\u76ee\u5f55\u8def\u5f84\n            multiprocessing: \u662f\u5426\u542f\u7528\u591a\u8fdb\u7a0b\u652f\u6301\n        \"\"\"\n\n    def __getitem__(self, idx: int):\n        \"\"\"\u901a\u8fc7\u7d22\u5f15\u83b7\u53d6\u6570\u636e\"\"\"\n\n    def get_sample(self, idx: int):\n        \"\"\"\u83b7\u53d6\u5355\u4e2a\u6837\u672c\"\"\"\n\n    def get_samples(self, start_idx: int, size: int):\n        \"\"\"\u6279\u91cf\u83b7\u53d6\u6837\u672c\"\"\"\n\n    def get_data_keys(self, i: int = 0):\n        \"\"\"\u83b7\u53d6\u7b2ci\u4e2a\u6837\u672c\u7684\u6240\u6709\u952e\"\"\"\n\n    def get_data_value(self, i: int, key: str):\n        \"\"\"\u83b7\u53d6\u7b2ci\u4e2a\u6837\u672c\u7684\u6307\u5b9a\u952e\u503c\"\"\"\n\n    def get_data_specification(self, i: int):\n        \"\"\"\u83b7\u53d6\u7b2ci\u4e2a\u6837\u672c\u7684\u6570\u636e\u89c4\u8303\"\"\"\n\n    def get_meta_str(self, key):\n        \"\"\"\u83b7\u53d6\u5143\u6570\u636e\u5b57\u7b26\u4e32\"\"\"\n\n    def __len__(self):\n        \"\"\"\u83b7\u53d6\u6570\u636e\u5e93\u5927\u5c0f\"\"\"\n</code></pre>"},{"location":"lmdb/#readerlist-","title":"ReaderList - \u591a\u6570\u636e\u5e93\u8bfb\u53d6\u5668","text":"<pre><code>class ReaderList:\n    \"\"\"\u591a\u4e2aLMDB\u6570\u636e\u5e93\u7684\u7edf\u4e00\u8bfb\u53d6\u5668\"\"\"\n\n    def __init__(self, db_path_list: list, multiprocessing: bool = True):\n        \"\"\"\n        \u521d\u59cb\u5316\u591a\u6570\u636e\u5e93\u8bfb\u53d6\u5668\n\n        Args:\n            db_path_list: \u6570\u636e\u5e93\u8def\u5f84\u5217\u8868\n            multiprocessing: \u662f\u5426\u542f\u7528\u591a\u8fdb\u7a0b\u652f\u6301\n        \"\"\"\n</code></pre>"},{"location":"lmdb/#readerssd-ssd","title":"ReaderSSD - SSD\u4f18\u5316\u8bfb\u53d6\u5668","text":"<pre><code>class ReaderSSD:\n    \"\"\"\u9488\u5bf9SSD\u4f18\u5316\u7684\u8bfb\u53d6\u5668\"\"\"\n\n    def __init__(self, db_path: str, multiprocessing: bool = False):\n        \"\"\"\n        \u521d\u59cb\u5316SSD\u8bfb\u53d6\u5668\n\n        Args:\n            db_path: \u6570\u636e\u5e93\u8def\u5f84\n            multiprocessing: \u662f\u5426\u542f\u7528\u591a\u8fdb\u7a0b\u652f\u6301\n        \"\"\"\n\n    def get_batch(self, indices: list):\n        \"\"\"\u6279\u91cf\u83b7\u53d6\u6570\u636e\"\"\"\n</code></pre>"},{"location":"lmdb/#_6","title":"\ud83d\udcd6 \u4f7f\u7528\u6307\u5357","text":""},{"location":"lmdb/#1","title":"1. \u6570\u636e\u5199\u5165","text":""},{"location":"lmdb/#_7","title":"\u57fa\u672c\u5199\u5165","text":"<pre><code>import sindre.lmdb as lmdb\nimport numpy as np\n\n# \u521b\u5efa\u5199\u5165\u5668\nwriter = lmdb.Writer('./dataset', map_size_limit=1024*100)  # 100GB\n\n# \u5199\u5165\u5355\u4e2a\u6837\u672c\ndata = {\n    'points': np.random.rand(1000, 3),\n    'labels': np.random.randint(0, 10, 1000),\n    'features': np.random.rand(1000, 128)\n}\nwriter.put_samples({0: data})\n\n# \u6279\u91cf\u5199\u5165\nfor i in range(1000):\n    data = {\n        'points': np.random.rand(100, 3),\n        'labels': np.random.randint(0, 10, 100),\n        'id': i\n    }\n    writer.put_samples({i: data})\n\nwriter.close()\n</code></pre>"},{"location":"lmdb/#_8","title":"\u8bbe\u7f6e\u5143\u6570\u636e","text":"<pre><code># \u8bbe\u7f6e\u6570\u636e\u5e93\u5143\u6570\u636e\nwriter.set_meta_str(\"description\", \"\u70b9\u4e91\u6570\u636e\u96c6\")\nwriter.set_meta_str(\"version\", \"1.0\")\nwriter.set_meta_str(\"created_by\", \"sindre\")\n</code></pre>"},{"location":"lmdb/#_9","title":"\u6570\u636e\u4fee\u6539","text":"<pre><code># \u4fee\u6539\u73b0\u6709\u6570\u636e\nnew_data = {\n    'points': np.random.rand(200, 3),\n    'labels': np.random.randint(0, 10, 200),\n    'updated': True\n}\nwriter.change_value(0, new_data)\n\n# \u5b89\u5168\u4fee\u6539\uff08\u5e26\u786e\u8ba4\u63d0\u793a\uff09\nwriter.change_db_value(0, new_data, safe_model=True)\n</code></pre>"},{"location":"lmdb/#_10","title":"\u5185\u5b58\u5927\u5c0f\u68c0\u67e5","text":"<pre><code># \u68c0\u67e5\u6570\u636e\u5927\u5c0f\ndata = {\n    'points': np.random.rand(10000, 3),\n    'labels': np.random.randint(0, 10, 10000)\n}\ngb_required = writer.check_sample_size(data)\nprint(f\"\u6570\u636e\u5927\u5c0f: {gb_required:.2f} GB\")\n</code></pre>"},{"location":"lmdb/#2","title":"2. \u6570\u636e\u8bfb\u53d6","text":""},{"location":"lmdb/#_11","title":"\u57fa\u672c\u8bfb\u53d6","text":"<pre><code># \u521b\u5efa\u8bfb\u53d6\u5668\nreader = lmdb.Reader('./dataset')\n\n# \u83b7\u53d6\u6570\u636e\u5e93\u5927\u5c0f\nprint(f\"\u6570\u636e\u5e93\u5305\u542b {len(reader)} \u4e2a\u6837\u672c\")\n\n# \u8bfb\u53d6\u5355\u4e2a\u6837\u672c\nsample = reader[0]\nprint(f\"\u6837\u672c\u952e: {list(sample.keys())}\")\n\n# \u8bfb\u53d6\u6307\u5b9a\u6837\u672c\nsample = reader.get_sample(0)\nprint(f\"\u70b9\u4e91\u6570\u91cf: {len(sample['points'])}\")\n</code></pre>"},{"location":"lmdb/#_12","title":"\u6279\u91cf\u8bfb\u53d6","text":"<pre><code># \u6279\u91cf\u8bfb\u53d6\nsamples = reader.get_samples(0, 10)\nprint(f\"\u8bfb\u53d6\u4e86 {len(samples)} \u4e2a\u6837\u672c\")\n\n# \u4f7f\u7528ReaderList\u8bfb\u53d6\u591a\u4e2a\u6570\u636e\u5e93\nreader_list = lmdb.ReaderList(['./db1', './db2', './db3'])\nprint(f\"\u603b\u6837\u672c\u6570: {len(reader_list)}\")\n</code></pre>"},{"location":"lmdb/#_13","title":"\u5143\u6570\u636e\u67e5\u8be2","text":"<pre><code># \u83b7\u53d6\u5143\u6570\u636e\ndescription = reader.get_meta_str(\"description\")\nversion = reader.get_meta_str(\"version\")\nprint(f\"\u63cf\u8ff0: {description}, \u7248\u672c: {version}\")\n\n# \u83b7\u53d6\u6570\u636e\u952e\u4fe1\u606f\ndata_keys = reader.get_data_keys(0)\nprint(f\"\u6570\u636e\u952e: {data_keys}\")\n\n# \u83b7\u53d6\u6570\u636e\u89c4\u8303\nspec = reader.get_data_specification(0)\nfor key, info in spec.items():\n    print(f\"{key}: shape={info['shape']}, dtype={info['dtype']}\")\n</code></pre>"},{"location":"lmdb/#3","title":"3. \u591a\u8fdb\u7a0b\u652f\u6301","text":"<pre><code># \u542f\u7528\u591a\u8fdb\u7a0b\u5199\u5165\nwriter = lmdb.Writer('./dataset', map_size_limit=1024*100, multiprocessing=True)\n\n# \u542f\u7528\u591a\u8fdb\u7a0b\u8bfb\u53d6\nreader = lmdb.Reader('./dataset', multiprocessing=True)\n</code></pre>"},{"location":"lmdb/#_14","title":"\ud83d\udd27 \u9ad8\u7ea7\u529f\u80fd","text":""},{"location":"lmdb/#_15","title":"\u6570\u636e\u5e93\u5de5\u5177\u51fd\u6570","text":"<pre><code>import sindre.lmdb as lmdb\n\n# \u5408\u5e76\u6570\u636e\u5e93\nlmdb.MergeLmdb(\n    target_dir='./merged_db',\n    source_dirs=['./db1', './db2', './db3'],\n    map_size_limit=1024*100,\n    multiprocessing=True\n)\n\n# \u5206\u5272\u6570\u636e\u5e93\nlmdb.SplitLmdb(\n    source_dir='./large_db',\n    target_dirs=['./part1', './part2', './part3'],\n    map_size_limit=1024*50,\n    multiprocessing=True\n)\n\n# \u4fee\u590dWindows\u5927\u5c0f\u95ee\u9898\nlmdb.fix_lmdb_windows_size('./database')\n\n# \u5e76\u884c\u5199\u5165\ndef process_function(file_path):\n    # \u5904\u7406\u5355\u4e2a\u6587\u4ef6\u7684\u51fd\u6570\n    return {'processed_data': np.random.rand(100, 3)}\n\nlmdb.parallel_write(\n    output_dir='./processed_db',\n    file_list=['file1.txt', 'file2.txt', 'file3.txt'],\n    process=process_function,\n    map_size_limit=1024*100,\n    num_processes=4,\n    multiprocessing=True\n)\n</code></pre>"},{"location":"lmdb/#ssd","title":"SSD\u4f18\u5316\u8bfb\u53d6","text":"<pre><code># \u4f7f\u7528SSD\u4f18\u5316\u8bfb\u53d6\u5668\nreader_ssd = lmdb.ReaderSSD('./dataset', multiprocessing=False)\n\n# \u6279\u91cf\u8bfb\u53d6\nindices = [0, 1, 2, 3, 4]\nbatch_data = reader_ssd.get_batch(indices)\nprint(f\"\u6279\u91cf\u8bfb\u53d6\u4e86 {len(batch_data)} \u4e2a\u6837\u672c\")\n\n# \u591a\u6570\u636e\u5e93SSD\u8bfb\u53d6\nreader_ssd_list = lmdb.ReaderSSDList(['./db1', './db2'], multiprocessing=False)\n</code></pre>"},{"location":"lmdb/#_16","title":"\u26a1 \u6027\u80fd\u4f18\u5316","text":""},{"location":"lmdb/#1_1","title":"1. \u5185\u5b58\u7ba1\u7406","text":"<pre><code># \u5408\u7406\u8bbe\u7f6emap_size_limit\n# \u5efa\u8bae\u8bbe\u7f6e\u4e3a\u9884\u671f\u6570\u636e\u5927\u5c0f\u76841.5-2\u500d\nexpected_size_gb = 50\nmap_size_limit_mb = int(expected_size_gb * 1.5 * 1024)\nwriter = lmdb.Writer('./dataset', map_size_limit=map_size_limit_mb)\n</code></pre>"},{"location":"lmdb/#2_1","title":"2. \u591a\u8fdb\u7a0b\u4f18\u5316","text":"<pre><code># \u5199\u5165\u65f6\u4f7f\u7528\u591a\u8fdb\u7a0b\nwriter = lmdb.Writer('./dataset', map_size_limit=1024*100, multiprocessing=True)\n\n# \u8bfb\u53d6\u65f6\u6839\u636e\u6570\u636e\u5927\u5c0f\u51b3\u5b9a\u662f\u5426\u4f7f\u7528\u591a\u8fdb\u7a0b\nif len(reader) &gt; 10000:\n    reader = lmdb.Reader('./dataset', multiprocessing=True)\nelse:\n    reader = lmdb.Reader('./dataset', multiprocessing=False)\n</code></pre>"},{"location":"lmdb/#3_1","title":"3. \u6279\u91cf\u64cd\u4f5c","text":"<pre><code># \u6279\u91cf\u5199\u5165\u800c\u4e0d\u662f\u9010\u4e2a\u5199\u5165\nbatch_data = {}\nfor i in range(1000):\n    batch_data[i] = {\n        'points': np.random.rand(100, 3),\n        'labels': np.random.randint(0, 10, 100)\n    }\nwriter.put_samples(batch_data)\n</code></pre>"},{"location":"lmdb/#_17","title":"\u2753 \u5e38\u89c1\u95ee\u9898","text":""},{"location":"lmdb/#q1-map_size_limit","title":"Q1: map_size_limit \u8bbe\u7f6e\u591a\u5927\u5408\u9002\uff1f","text":"<p>A: \u5efa\u8bae\u8bbe\u7f6e\u4e3a\u9884\u671f\u6570\u636e\u5927\u5c0f\u76841.5-2\u500d\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6570\u636e\u5927\u7ea650GB\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\uff1a</p> <pre><code>map_size_limit = int(50 * 1.5 * 1024)  # 75GB in MB\n</code></pre>"},{"location":"lmdb/#q2","title":"Q2: \u591a\u8fdb\u7a0b\u6a21\u5f0f\u4ec0\u4e48\u65f6\u5019\u4f7f\u7528\uff1f","text":"<p>A:  - \u5199\u5165\u65f6: \u6570\u636e\u91cf\u5927\uff08&gt;1GB\uff09\u65f6\u5efa\u8bae\u4f7f\u7528 - \u8bfb\u53d6\u65f6: \u6570\u636e\u5e93\u6837\u672c\u6570\u591a\uff08&gt;10000\uff09\u65f6\u5efa\u8bae\u4f7f\u7528</p>"},{"location":"lmdb/#q3","title":"Q3: \u5982\u4f55\u5904\u7406\u6570\u636e\u5e93\u635f\u574f\uff1f","text":"<p>A: \u4f7f\u7528\u4fee\u590d\u5de5\u5177\uff1a</p> <pre><code>lmdb.fix_lmdb_windows_size('./database')\n</code></pre>"},{"location":"lmdb/#q4","title":"Q4: \u5982\u4f55\u68c0\u67e5\u6570\u636e\u5e93\u72b6\u6001\uff1f","text":"<p>A: </p> <pre><code>writer.check_db_stats()  # \u68c0\u67e5\u6570\u636e\u5e93\u7edf\u8ba1\u4fe1\u606f\n</code></pre>"},{"location":"lmdb/#q5","title":"Q5: \u652f\u6301\u54ea\u4e9b\u6570\u636e\u7c7b\u578b\uff1f","text":"<p>A: \u4e3b\u8981\u652f\u6301numpy\u6570\u7ec4\uff0c\u5176\u4ed6\u7c7b\u578b\u4f1a\u81ea\u52a8\u8f6c\u6362\uff1a</p> <pre><code># \u652f\u6301\u7684\u6570\u636e\ndata = {\n    'points': np.random.rand(100, 3),      # numpy\u6570\u7ec4\n    'labels': np.random.randint(0, 10, 100), # numpy\u6570\u7ec4\n    'metadata': 'test'                      # \u5b57\u7b26\u4e32\uff08\u4f1a\u88ab\u5e8f\u5217\u5316\uff09\n}\n</code></pre>"},{"location":"lmdb/#q6","title":"Q6: \u5982\u4f55\u9ad8\u6548\u5730\u4fee\u6539\u73b0\u6709\u6570\u636e\uff1f","text":"<p>A: \u4f7f\u7528\u5b89\u5168\u4fee\u6539\u6a21\u5f0f\uff1a</p> <pre><code># \u5e26\u786e\u8ba4\u63d0\u793a\u7684\u5b89\u5168\u4fee\u6539\nwriter.change_db_value(0, new_data, safe_model=True)\n\n# \u76f4\u63a5\u4fee\u6539\uff08\u65e0\u786e\u8ba4\uff09\nwriter.change_value(0, new_data)\n</code></pre>"},{"location":"lmdb/#_18","title":"\ud83d\udcca \u6027\u80fd\u57fa\u51c6","text":"\u64cd\u4f5c \u6570\u636e\u5927\u5c0f \u65f6\u95f4 \u5185\u5b58\u4f7f\u7528 \u5199\u5165 1GB ~30s ~2GB \u8bfb\u53d6 1GB ~5s ~1GB \u6279\u91cf\u8bfb\u53d6 1GB ~2s ~1.5GB \u968f\u673a\u8bbf\u95ee 1GB ~10s ~1GB"},{"location":"lmdb/#_19","title":"\ud83d\udd17 \u76f8\u5173\u94fe\u63a5","text":"<ul> <li>LMDB\u5b98\u65b9\u6587\u6863</li> <li>PyTorch\u6570\u636e\u96c6\u6559\u7a0b</li> <li>NumPy\u6587\u6863</li> </ul>   **\u5982\u6709\u95ee\u9898\uff0c\u8bf7\u67e5\u770b [\u5e38\u89c1\u95ee\u9898](#\u5e38\u89c1\u95ee\u9898) \u6216\u63d0\u4ea4 [Issue](https://github.com/SindreYang/sindre/issues)**"},{"location":"report/","title":"Report \u62a5\u544a\u751f\u6210\u6a21\u5757","text":"<p>\u5feb\u901f\u751f\u6210\u7f8e\u89c2\u7684HTML\u6d4b\u8bd5\u62a5\u544a\uff0c\u652f\u6301\u56fe\u7247\u3001\u94fe\u63a5\u3001\u6570\u636e\u53ef\u89c6\u5316\u7b49\u529f\u80fd</p>"},{"location":"report/#_1","title":"\ud83d\udccb \u76ee\u5f55","text":"<ul> <li>\u529f\u80fd\u7279\u6027</li> <li>\u5feb\u901f\u5f00\u59cb</li> <li>\u6838\u5fc3\u529f\u80fd</li> <li>\u4f7f\u7528\u6307\u5357</li> <li>\u9ad8\u7ea7\u529f\u80fd</li> <li>\u6a21\u677f\u5b9a\u5236</li> <li>\u5e38\u89c1\u95ee\u9898</li> </ul>"},{"location":"report/#_2","title":"\u2728 \u529f\u80fd\u7279\u6027","text":"<ul> <li>\ud83d\udcca HTML\u62a5\u544a: \u751f\u6210\u7f8e\u89c2\u7684HTML\u683c\u5f0f\u6d4b\u8bd5\u62a5\u544a</li> <li>\ud83d\uddbc\ufe0f \u56fe\u7247\u652f\u6301: \u652f\u6301PIL\u56fe\u7247\u548cBase64\u7f16\u7801\u56fe\u7247</li> <li>\ud83d\udd17 \u94fe\u63a5\u5d4c\u5165: \u652f\u6301\u4e0b\u8f7d\u94fe\u63a5\u548c\u5916\u90e8\u94fe\u63a5</li> <li>\ud83d\udcc8 \u6570\u636e\u53ef\u89c6\u5316: \u652f\u6301\u56fe\u8868\u548c\u7edf\u8ba1\u4fe1\u606f\u5c55\u793a</li> <li>\ud83c\udfa8 \u6a21\u677f\u5b9a\u5236: \u53ef\u81ea\u5b9a\u4e49\u62a5\u544a\u6a21\u677f\u548c\u6837\u5f0f</li> <li>\ud83d\udcf1 \u54cd\u5e94\u5f0f\u8bbe\u8ba1: \u652f\u6301\u79fb\u52a8\u7aef\u548c\u684c\u9762\u7aef\u663e\u793a</li> <li>\u26a1 \u5feb\u901f\u751f\u6210: \u9ad8\u6548\u7684\u62a5\u544a\u751f\u6210\u548c\u5904\u7406</li> </ul>"},{"location":"report/#_3","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"report/#_4","title":"\u57fa\u672c\u4f7f\u7528","text":"<pre><code>from sindre.report import Report\n\n# \u521b\u5efa\u62a5\u544a\u5bf9\u8c61\nreport = Report()\n\n# \u6dfb\u52a0\u6d4b\u8bd5\u7ed3\u679c\ntest_result = {\n    \"className\": \"ModelTest\",\n    \"methodName\": \"test_accuracy\",\n    \"description\": \"\u6d4b\u8bd5\u6a21\u578b\u51c6\u786e\u7387\",\n    \"spendTime\": \"2.5 s\",\n    \"status\": \"\u6210\u529f\",\n    \"log\": [\"\u51c6\u786e\u7387: 95.2%\", \"\u635f\u5931: 0.048\"]\n}\n\nreport.append_row(test_result)\n\n# \u751f\u6210\u62a5\u544a\nreport.write(\"./reports/\")\n</code></pre>"},{"location":"report/#_5","title":"\u5e26\u56fe\u7247\u7684\u62a5\u544a","text":"<pre><code>from sindre.report import Report\nfrom PIL import Image\n\n# \u521b\u5efa\u62a5\u544a\nreport = Report()\n\n# \u52a0\u8f7d\u56fe\u7247\nimage = Image.open('./result.png')\n\n# \u8f6c\u6362\u4e3aBase64\nb64_image = Report.PIL_To_B64(image)\n\n# \u6dfb\u52a0\u5e26\u56fe\u7247\u7684\u6d4b\u8bd5\u7ed3\u679c\ntest_result = {\n    \"className\": \"ImageTest\",\n    \"methodName\": \"test_image_processing\",\n    \"description\": \"\u6d4b\u8bd5\u56fe\u50cf\u5904\u7406\u529f\u80fd\",\n    \"spendTime\": \"1.2 s\",\n    \"status\": \"\u6210\u529f\",\n    \"log\": [\n        \"\u5904\u7406\u5b8c\u6210\",\n        b64_image,  # \u5d4c\u5165\u56fe\u7247\n        \"\u8fd9\u662f\u6587\u672c\u52a0\u56fe\u7247\u7684\u6df7\u5408\u5185\u5bb9\"\n    ]\n}\n\nreport.append_row(test_result)\nreport.write(\"./reports/\")\n</code></pre>"},{"location":"report/#_6","title":"\ud83d\udd27 \u6838\u5fc3\u529f\u80fd","text":""},{"location":"report/#report_1","title":"Report \u7c7b","text":"<pre><code>class Report:\n    \"\"\"HTML\u62a5\u544a\u751f\u6210\u5668\"\"\"\n\n    def __init__(self):\n        \"\"\"\u521d\u59cb\u5316\u62a5\u544a\u5bf9\u8c61\"\"\"\n        self.data = {\n            \"testPass\": 0,\n            \"testResult\": [],\n            \"testName\": \"\u6d4b\u8bd5\u62a5\u544a\",\n            \"testAll\": 0,\n            \"testFail\": 0,\n            \"beginTime\": \"2024-01-01 00:00:00\",\n            \"totalTime\": \"\",\n            \"testSkip\": 0,\n        }\n        self.file_path = os.path.dirname(__file__)\n\n    def append_row(self, row_data: dict):\n        \"\"\"\n        \u6dfb\u52a0\u6d4b\u8bd5\u7ed3\u679c\u884c\n\n        Args:\n            row_data: \u5305\u542b\u6d4b\u8bd5\u4fe1\u606f\u7684\u5b57\u5178\n                - className: \u6d4b\u8bd5\u7c7b\u540d\n                - methodName: \u6d4b\u8bd5\u65b9\u6cd5\u540d\n                - description: \u6d4b\u8bd5\u63cf\u8ff0\n                - spendTime: \u8017\u65f6\n                - status: \u72b6\u6001 (\u6210\u529f/\u5931\u8d25/\u8df3\u8fc7)\n                - log: \u65e5\u5fd7\u5217\u8868\n        \"\"\"\n\n    @staticmethod\n    def PIL_To_B64(image: PIL.Image.Image) -&gt; str:\n        \"\"\"\n        \u5c06PIL\u56fe\u7247\u8f6c\u6362\u4e3aBase64\u5b57\u7b26\u4e32\n\n        Args:\n            image: PIL\u56fe\u7247\u5bf9\u8c61\n\n        Returns:\n            str: Base64\u7f16\u7801\u7684\u56fe\u7247\u5b57\u7b26\u4e32\n        \"\"\"\n\n    def write(self, path: str = \"./\"):\n        \"\"\"\n        \u751f\u6210\u5e76\u4fdd\u5b58HTML\u62a5\u544a\n\n        Args:\n            path: \u4fdd\u5b58\u8def\u5f84\uff0c\u9ed8\u8ba4\u4e3a\u5f53\u524d\u76ee\u5f55\n        \"\"\"\n</code></pre>"},{"location":"report/#_7","title":"\ud83d\udcd6 \u4f7f\u7528\u6307\u5357","text":""},{"location":"report/#1","title":"1. \u57fa\u7840\u62a5\u544a\u751f\u6210","text":""},{"location":"report/#_8","title":"\u7b80\u5355\u6d4b\u8bd5\u62a5\u544a","text":"<pre><code>from sindre.report import Report\n\n# \u521b\u5efa\u62a5\u544a\nreport = Report()\n\n# \u6dfb\u52a0\u6210\u529f\u6d4b\u8bd5\nsuccess_test = {\n    \"className\": \"BasicTest\",\n    \"methodName\": \"test_addition\",\n    \"description\": \"\u6d4b\u8bd5\u52a0\u6cd5\u8fd0\u7b97\",\n    \"spendTime\": \"0.1 s\",\n    \"status\": \"\u6210\u529f\",\n    \"log\": [\"1 + 1 = 2\", \"\u6d4b\u8bd5\u901a\u8fc7\"]\n}\n\n# \u6dfb\u52a0\u5931\u8d25\u6d4b\u8bd5\nfailed_test = {\n    \"className\": \"BasicTest\",\n    \"methodName\": \"test_division\",\n    \"description\": \"\u6d4b\u8bd5\u9664\u6cd5\u8fd0\u7b97\",\n    \"spendTime\": \"0.05 s\",\n    \"status\": \"\u5931\u8d25\",\n    \"log\": [\"\u9664\u96f6\u9519\u8bef\", \"\u9700\u8981\u4fee\u590d\"]\n}\n\n# \u6dfb\u52a0\u8df3\u8fc7\u6d4b\u8bd5\nskipped_test = {\n    \"className\": \"BasicTest\",\n    \"methodName\": \"test_advanced\",\n    \"description\": \"\u9ad8\u7ea7\u529f\u80fd\u6d4b\u8bd5\",\n    \"spendTime\": \"0 s\",\n    \"status\": \"\u8df3\u8fc7\",\n    \"log\": [\"\u529f\u80fd\u672a\u5b9e\u73b0\"]\n}\n\n# \u6dfb\u52a0\u5230\u62a5\u544a\nreport.append_row(success_test)\nreport.append_row(failed_test)\nreport.append_row(skipped_test)\n\n# \u751f\u6210\u62a5\u544a\nreport.write(\"./test_reports/\")\n</code></pre>"},{"location":"report/#_9","title":"\u6279\u91cf\u6d4b\u8bd5\u62a5\u544a","text":"<pre><code>from sindre.report import Report\nimport time\n\n# \u521b\u5efa\u62a5\u544a\nreport = Report()\n\n# \u6a21\u62df\u6279\u91cf\u6d4b\u8bd5\ntest_cases = [\n    (\"test_function_1\", \"\u529f\u80fd1\u6d4b\u8bd5\", \"\u6210\u529f\"),\n    (\"test_function_2\", \"\u529f\u80fd2\u6d4b\u8bd5\", \"\u6210\u529f\"),\n    (\"test_function_3\", \"\u529f\u80fd3\u6d4b\u8bd5\", \"\u5931\u8d25\"),\n    (\"test_function_4\", \"\u529f\u80fd4\u6d4b\u8bd5\", \"\u8df3\u8fc7\"),\n]\n\nfor i, (method_name, description, status) in enumerate(test_cases):\n    test_result = {\n        \"className\": f\"BatchTest{i//2}\",\n        \"methodName\": method_name,\n        \"description\": description,\n        \"spendTime\": f\"{0.1 + i*0.05:.2f} s\",\n        \"status\": status,\n        \"log\": [f\"\u6d4b\u8bd5\u7ed3\u679c: {status}\"]\n    }\n    report.append_row(test_result)\n\n# \u751f\u6210\u62a5\u544a\nreport.write(\"./batch_reports/\")\n</code></pre>"},{"location":"report/#2","title":"2. \u56fe\u7247\u548c\u53ef\u89c6\u5316\u62a5\u544a","text":""},{"location":"report/#_10","title":"\u56fe\u8868\u62a5\u544a","text":"<pre><code>from sindre.report import Report\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# \u521b\u5efa\u62a5\u544a\nreport = Report()\n\n# \u751f\u6210\u6d4b\u8bd5\u56fe\u8868\nfig, ax = plt.subplots(figsize=(8, 6))\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nax.plot(x, y)\nax.set_title('\u6d4b\u8bd5\u56fe\u8868')\nax.set_xlabel('X\u8f74')\nax.set_ylabel('Y\u8f74')\n\n# \u4fdd\u5b58\u56fe\u8868\nplt.savefig('test_chart.png')\nplt.close()\n\n# \u8f6c\u6362\u4e3aBase64\nfrom PIL import Image\nchart_image = Image.open('test_chart.png')\nb64_chart = Report.PIL_To_B64(chart_image)\n\n# \u6dfb\u52a0\u5e26\u56fe\u8868\u7684\u6d4b\u8bd5\u7ed3\u679c\nchart_test = {\n    \"className\": \"VisualizationTest\",\n    \"methodName\": \"test_chart_generation\",\n    \"description\": \"\u6d4b\u8bd5\u56fe\u8868\u751f\u6210\u529f\u80fd\",\n    \"spendTime\": \"1.5 s\",\n    \"status\": \"\u6210\u529f\",\n    \"log\": [\n        \"\u56fe\u8868\u751f\u6210\u6210\u529f\",\n        b64_chart,\n        \"\u56fe\u8868\u6570\u636e: 100\u4e2a\u70b9\"\n    ]\n}\n\nreport.append_row(chart_test)\nreport.write(\"./visual_reports/\")\n</code></pre>"},{"location":"report/#_11","title":"\u591a\u56fe\u7247\u62a5\u544a","text":"<pre><code>from sindre.report import Report\nfrom PIL import Image, ImageDraw\n\n# \u521b\u5efa\u62a5\u544a\nreport = Report()\n\n# \u751f\u6210\u591a\u4e2a\u6d4b\u8bd5\u56fe\u7247\nfor i in range(3):\n    # \u521b\u5efa\u6d4b\u8bd5\u56fe\u7247\n    img = Image.new('RGB', (200, 200), color='white')\n    draw = ImageDraw.Draw(img)\n    draw.text((50, 100), f'Test Image {i+1}', fill='black')\n\n    # \u8f6c\u6362\u4e3aBase64\n    b64_img = Report.PIL_To_B64(img)\n\n    # \u6dfb\u52a0\u6d4b\u8bd5\u7ed3\u679c\n    test_result = {\n        \"className\": \"ImageTest\",\n        \"methodName\": f\"test_image_{i+1}\",\n        \"description\": f\"\u6d4b\u8bd5\u56fe\u7247\u751f\u6210 {i+1}\",\n        \"spendTime\": \"0.2 s\",\n        \"status\": \"\u6210\u529f\",\n        \"log\": [\n            f\"\u56fe\u7247 {i+1} \u751f\u6210\u6210\u529f\",\n            b64_img\n        ]\n    }\n    report.append_row(test_result)\n\nreport.write(\"./image_reports/\")\n</code></pre>"},{"location":"report/#3","title":"3. \u590d\u6742\u65e5\u5fd7\u62a5\u544a","text":""},{"location":"report/#_12","title":"\u6df7\u5408\u5185\u5bb9\u62a5\u544a","text":"<pre><code>from sindre.report import Report\n\n# \u521b\u5efa\u62a5\u544a\nreport = Report()\n\n# \u590d\u6742\u6d4b\u8bd5\u7ed3\u679c\ncomplex_test = {\n    \"className\": \"ComplexTest\",\n    \"methodName\": \"test_complex_function\",\n    \"description\": \"\u6d4b\u8bd5\u590d\u6742\u529f\u80fd\",\n    \"spendTime\": \"5.2 s\",\n    \"status\": \"\u6210\u529f\",\n    \"log\": [\n        \"&lt;br&gt;&lt;/br&gt;\",  # HTML\u6362\u884c\n        \"\u5f00\u59cb\u6d4b\u8bd5...\",\n        \"\u6b65\u9aa41: \u521d\u59cb\u5316\u5b8c\u6210\",\n        \"\u6b65\u9aa42: \u6570\u636e\u5904\u7406\u5b8c\u6210\",\n        \"\u6b65\u9aa43: \u7ed3\u679c\u9a8c\u8bc1\u5b8c\u6210\",\n        \"\u6d4b\u8bd5\u5b8c\u6210\uff01\",\n        \"&lt;a href='https://example.com'&gt;\u67e5\u770b\u8be6\u7ec6\u6587\u6863&lt;/a&gt;\",  # HTML\u94fe\u63a5\n        \"\"\n    ]\n}\n\nreport.append_row(complex_test)\nreport.write(\"./complex_reports/\")\n</code></pre>"},{"location":"report/#_13","title":"\ud83d\ude80 \u9ad8\u7ea7\u529f\u80fd","text":""},{"location":"report/#1_1","title":"1. \u81ea\u5b9a\u4e49\u62a5\u544a\u6807\u9898","text":"<pre><code>from sindre.report import Report\n\n# \u521b\u5efa\u62a5\u544a\u5e76\u8bbe\u7f6e\u6807\u9898\nreport = Report()\nreport.data[\"testName\"] = \"\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u8bc4\u4f30\u62a5\u544a\"\n\n# \u6dfb\u52a0\u6d4b\u8bd5\u7ed3\u679c...\nreport.write(\"./custom_reports/\")\n</code></pre>"},{"location":"report/#2_1","title":"2. \u7edf\u8ba1\u4fe1\u606f\u81ea\u52a8\u8ba1\u7b97","text":"<pre><code>from sindre.report import Report\n\n# \u521b\u5efa\u62a5\u544a\nreport = Report()\n\n# \u6dfb\u52a0\u5404\u79cd\u6d4b\u8bd5\u7ed3\u679c\ntest_results = [\n    {\"status\": \"\u6210\u529f\", \"spendTime\": \"1.0 s\"},\n    {\"status\": \"\u6210\u529f\", \"spendTime\": \"2.0 s\"},\n    {\"status\": \"\u5931\u8d25\", \"spendTime\": \"0.5 s\"},\n    {\"status\": \"\u8df3\u8fc7\", \"spendTime\": \"0.0 s\"},\n]\n\nfor i, result in enumerate(test_results):\n    test_result = {\n        \"className\": \"AutoTest\",\n        \"methodName\": f\"test_{i+1}\",\n        \"description\": f\"\u81ea\u52a8\u6d4b\u8bd5 {i+1}\",\n        \"spendTime\": result[\"spendTime\"],\n        \"status\": result[\"status\"],\n        \"log\": [f\"\u6d4b\u8bd5 {result['status']}\"]\n    }\n    report.append_row(test_result)\n\n# \u751f\u6210\u62a5\u544a\uff08\u4f1a\u81ea\u52a8\u8ba1\u7b97\u7edf\u8ba1\u4fe1\u606f\uff09\nreport.write(\"./auto_reports/\")\n# \u62a5\u544a\u4f1a\u81ea\u52a8\u5305\u542b\uff1a\n# - testAll: \u603b\u6d4b\u8bd5\u6570\n# - testPass: \u6210\u529f\u6570\n# - testFail: \u5931\u8d25\u6570\n# - testSkip: \u8df3\u8fc7\u6570\n# - totalTime: \u603b\u8017\u65f6\n</code></pre>"},{"location":"report/#3_1","title":"3. \u5f02\u5e38\u5904\u7406\u62a5\u544a","text":"<pre><code>from sindre.report import Report\n\n# \u521b\u5efa\u62a5\u544a\nreport = Report()\n\n# \u6a21\u62df\u5f02\u5e38\u6d4b\u8bd5\ntry:\n    # \u6a21\u62df\u53ef\u80fd\u51fa\u9519\u7684\u4ee3\u7801\n    result = 1 / 0\nexcept Exception as e:\n    error_test = {\n        \"className\": \"ExceptionTest\",\n        \"methodName\": \"test_division_by_zero\",\n        \"description\": \"\u6d4b\u8bd5\u9664\u96f6\u5f02\u5e38\u5904\u7406\",\n        \"spendTime\": \"0.01 s\",\n        \"status\": \"\u5931\u8d25\",\n        \"log\": [\n            f\"\u6355\u83b7\u5f02\u5e38: {type(e).__name__}\",\n            f\"\u5f02\u5e38\u4fe1\u606f: {str(e)}\",\n            \"\u5f02\u5e38\u5904\u7406\u5b8c\u6210\"\n        ]\n    }\n    report.append_row(error_test)\n\nreport.write(\"./exception_reports/\")\n</code></pre>"},{"location":"report/#_14","title":"\ud83c\udfa8 \u6a21\u677f\u5b9a\u5236","text":""},{"location":"report/#1_2","title":"1. \u62a5\u544a\u6a21\u677f\u7ed3\u6784","text":"<p>Report\u6a21\u5757\u4f7f\u7528\u5185\u7f6e\u7684HTML\u6a21\u677f\uff0c\u5305\u542b\u4ee5\u4e0b\u90e8\u5206\uff1a</p> <ul> <li>\u5934\u90e8\u4fe1\u606f: \u6d4b\u8bd5\u540d\u79f0\u3001\u5f00\u59cb\u65f6\u95f4\u3001\u603b\u8017\u65f6</li> <li>\u7edf\u8ba1\u4fe1\u606f: \u6210\u529f/\u5931\u8d25/\u8df3\u8fc7\u6570\u91cf\u7edf\u8ba1</li> <li>\u6d4b\u8bd5\u7ed3\u679c\u8868\u683c: \u8be6\u7ec6\u7684\u6d4b\u8bd5\u7ed3\u679c\u5217\u8868</li> <li>\u6837\u5f0f\u8bbe\u8ba1: \u54cd\u5e94\u5f0fCSS\u6837\u5f0f</li> </ul>"},{"location":"report/#2_2","title":"2. \u81ea\u5b9a\u4e49\u6837\u5f0f","text":"<p>\u867d\u7136Report\u7c7b\u4f7f\u7528\u5185\u7f6e\u6a21\u677f\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u751f\u6210\u7684HTML\u6587\u4ef6\u6765\u81ea\u5b9a\u4e49\u6837\u5f0f\uff1a</p> <pre><code>&lt;!-- \u5728\u751f\u6210\u7684HTML\u6587\u4ef6\u4e2d\u6dfb\u52a0\u81ea\u5b9a\u4e49CSS --&gt;\n&lt;style&gt;\n.custom-style {\n    background-color: #f0f0f0;\n    border-radius: 5px;\n    padding: 10px;\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"report/#_15","title":"\u2753 \u5e38\u89c1\u95ee\u9898","text":""},{"location":"report/#q1","title":"Q1: \u5982\u4f55\u8bbe\u7f6e\u62a5\u544a\u6807\u9898\uff1f","text":"<p>A: \u901a\u8fc7\u4fee\u6539data\u5b57\u5178\u4e2d\u7684testName\u5b57\u6bb5\uff1a</p> <pre><code>report = Report()\nreport.data[\"testName\"] = \"\u6211\u7684\u81ea\u5b9a\u4e49\u6d4b\u8bd5\u62a5\u544a\"\n</code></pre>"},{"location":"report/#q2","title":"Q2: \u652f\u6301\u54ea\u4e9b\u56fe\u7247\u683c\u5f0f\uff1f","text":"<p>A: \u652f\u6301PIL\u5e93\u652f\u6301\u7684\u6240\u6709\u683c\u5f0f\uff0c\u5e38\u7528\u683c\u5f0f\u5305\u62ec\uff1a - PNG - JPEG/JPG - GIF - BMP - TIFF</p>"},{"location":"report/#q3-html","title":"Q3: \u5982\u4f55\u6dfb\u52a0HTML\u5185\u5bb9\uff1f","text":"<p>A: \u5728log\u5217\u8868\u4e2d\u76f4\u63a5\u6dfb\u52a0HTML\u6807\u7b7e\uff1a</p> <pre><code>test_result = {\n    # ... \u5176\u4ed6\u5b57\u6bb5\n    \"log\": [\n        \"\u666e\u901a\u6587\u672c\",\n        \"&lt;strong&gt;\u7c97\u4f53\u6587\u672c&lt;/strong&gt;\",\n        \"&lt;a href='https://example.com'&gt;\u94fe\u63a5&lt;/a&gt;\",\n        \"&lt;br&gt;&lt;/br&gt;\",  # \u6362\u884c\n        \"&lt;img src='data:image/png;base64,...'&gt;\"  # \u56fe\u7247\n    ]\n}\n</code></pre>"},{"location":"report/#q4","title":"Q4: \u62a5\u544a\u6587\u4ef6\u4fdd\u5b58\u5728\u54ea\u91cc\uff1f","text":"<p>A: \u9ed8\u8ba4\u4fdd\u5b58\u5728\u6307\u5b9a\u8def\u5f84\u4e0b\u7684\"\u6d4b\u8bd5\u62a5\u544a.html\"\u6587\u4ef6\u4e2d\uff1a</p> <pre><code>report.write(\"./reports/\")  # \u4fdd\u5b58\u4e3a ./reports/\u6d4b\u8bd5\u62a5\u544a.html\n</code></pre>"},{"location":"report/#q5","title":"Q5: \u5982\u4f55\u83b7\u53d6\u6d4b\u8bd5\u7edf\u8ba1\u4fe1\u606f\uff1f","text":"<p>A: \u5728\u8c03\u7528write()\u65b9\u6cd5\u540e\uff0c\u7edf\u8ba1\u4fe1\u606f\u4f1a\u81ea\u52a8\u8ba1\u7b97\u5e76\u5305\u542b\u5728\u62a5\u544a\u4e2d\uff1a</p> <pre><code>report.write(\"./reports/\")\n# \u7edf\u8ba1\u4fe1\u606f\u5728report.data\u4e2d\uff1a\n# - testAll: \u603b\u6d4b\u8bd5\u6570\n# - testPass: \u6210\u529f\u6570\n# - testFail: \u5931\u8d25\u6570\n# - testSkip: \u8df3\u8fc7\u6570\n# - totalTime: \u603b\u8017\u65f6\n</code></pre>"},{"location":"report/#q6","title":"Q6: \u652f\u6301\u5e76\u53d1\u6d4b\u8bd5\u5417\uff1f","text":"<p>A: Report\u7c7b\u672c\u8eab\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u5982\u679c\u9700\u8981\u5e76\u53d1\u4f7f\u7528\uff0c\u5efa\u8bae\uff1a</p> <pre><code># \u6bcf\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u72ec\u7acb\u7684Report\u5b9e\u4f8b\nimport threading\n\ndef worker(thread_id):\n    report = Report()\n    report.data[\"testName\"] = f\"\u7ebf\u7a0b{thread_id}\u6d4b\u8bd5\u62a5\u544a\"\n    # \u6dfb\u52a0\u6d4b\u8bd5\u7ed3\u679c...\n    report.write(f\"./thread_{thread_id}_reports/\")\n\n# \u521b\u5efa\u591a\u4e2a\u7ebf\u7a0b\nthreads = []\nfor i in range(4):\n    t = threading.Thread(target=worker, args=(i,))\n    threads.append(t)\n    t.start()\n\nfor t in threads:\n    t.join()\n</code></pre>"},{"location":"report/#_16","title":"\ud83d\udcca \u62a5\u544a\u793a\u4f8b","text":"<p>\u751f\u6210\u7684HTML\u62a5\u544a\u5305\u542b\u4ee5\u4e0b\u7279\u6027\uff1a</p> <ul> <li>\u54cd\u5e94\u5f0f\u8bbe\u8ba1: \u9002\u914d\u4e0d\u540c\u5c4f\u5e55\u5c3a\u5bf8</li> <li>\u72b6\u6001\u6807\u8bc6: \u4e0d\u540c\u989c\u8272\u533a\u5206\u6210\u529f/\u5931\u8d25/\u8df3\u8fc7</li> <li>\u65f6\u95f4\u7edf\u8ba1: \u663e\u793a\u6267\u884c\u65f6\u95f4\u4fe1\u606f</li> <li>\u591a\u5a92\u4f53\u652f\u6301: \u652f\u6301\u56fe\u7247\u3001\u94fe\u63a5\u3001\u4ee3\u7801\u5757</li> <li>\u4ea4\u4e92\u529f\u80fd: \u53ef\u6298\u53e0\u8be6\u60c5\u3001\u72b6\u6001\u7b5b\u9009</li> <li>\u7f8e\u89c2\u6837\u5f0f: \u73b0\u4ee3\u5316\u7684UI\u8bbe\u8ba1</li> </ul>"},{"location":"report/#_17","title":"\ud83d\udd17 \u76f8\u5173\u94fe\u63a5","text":"<ul> <li>HTML\u6a21\u677f\u8bed\u6cd5</li> <li>CSS\u6837\u5f0f\u6307\u5357</li> <li>PIL\u56fe\u50cf\u5904\u7406</li> </ul>   **\u5982\u6709\u95ee\u9898\uff0c\u8bf7\u67e5\u770b [\u5e38\u89c1\u95ee\u9898](#\u5e38\u89c1\u95ee\u9898) \u6216\u63d0\u4ea4 [Issue](https://github.com/SindreYang/sindre/issues)**"},{"location":"win_tools/","title":"WinTools Windows\u5de5\u5177\u6a21\u5757","text":"<p>\u4e13\u4e3aWindows\u7cfb\u7edf\u8bbe\u8ba1\u7684\u5de5\u5177\u96c6\u5408\uff0c\u63d0\u4f9b\u7a97\u53e3\u7ba1\u7406\u3001\u6587\u4ef6\u7f16\u8bd1\u3001\u5b89\u88c5\u5305\u5236\u4f5c\u7b49\u529f\u80fd</p>"},{"location":"win_tools/#_1","title":"\ud83d\udccb \u76ee\u5f55","text":"<ul> <li>\u529f\u80fd\u7279\u6027</li> <li>\u5feb\u901f\u5f00\u59cb</li> <li>\u6838\u5fc3\u529f\u80fd</li> <li>\u4f7f\u7528\u6307\u5357</li> <li>\u9ad8\u7ea7\u529f\u80fd</li> <li>\u7cfb\u7edf\u96c6\u6210</li> <li>\u5e38\u89c1\u95ee\u9898</li> </ul>"},{"location":"win_tools/#_2","title":"\u2728 \u529f\u80fd\u7279\u6027","text":"<ul> <li>\ud83e\ude9f \u7a97\u53e3\u7ba1\u7406: \u8bbe\u7f6e\u7a97\u53e3\u900f\u660e\u5ea6\u3001\u67e5\u627e\u7a97\u53e3\u53e5\u67c4</li> <li>\ud83d\udd27 \u6587\u4ef6\u7f16\u8bd1: Python\u6587\u4ef6\u7f16\u8bd1\u4e3aPYD\u3001C++\u7f16\u8bd1</li> <li>\ud83d\udce6 \u5b89\u88c5\u5305\u5236\u4f5c: NSIS\u5b89\u88c5\u5305\u5236\u4f5c\u3001\u81ea\u52a8\u5b89\u88c5\u811a\u672c</li> <li>\ud83d\udc0d Python\u7ba1\u7406: \u81ea\u52a8\u5b89\u88c5Python\u3001\u5305\u7ba1\u7406</li> <li>\ud83d\udcac \u6d88\u606f\u6846: \u7cfb\u7edf\u6d88\u606f\u6846\u3001\u7528\u6237\u4ea4\u4e92</li> <li>\ud83c\udfa8 \u754c\u9762\u7f8e\u5316: \u4efb\u52a1\u680f\u900f\u660e\u3001\u7a97\u53e3\u7279\u6548</li> <li>\u26a1 \u7cfb\u7edf\u5de5\u5177: \u7cfb\u7edf\u4fe1\u606f\u3001\u8fdb\u7a0b\u7ba1\u7406</li> </ul>"},{"location":"win_tools/#_3","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"win_tools/#_4","title":"\u57fa\u672c\u4f7f\u7528","text":"<pre><code>from sindre.win_tools import tools, taskbar\n\n# \u8bbe\u7f6e\u7a97\u53e3\u900f\u660e\u5ea6\ntaskbar.set_windows_alpha(128, \"Shell_TrayWnd\")\n\n# \u7f16\u8bd1Python\u6587\u4ef6\ntools.py2pyd(r\"C:\\project\\src\", clear_py=False)\n\n# \u663e\u793a\u6d88\u606f\u6846\ntools.show_message(\"\u64cd\u4f5c\u5b8c\u6210\", \"\u4efb\u52a1\u5df2\u6210\u529f\u6267\u884c\")\n</code></pre>"},{"location":"win_tools/#_5","title":"\u5b89\u88c5\u5305\u5236\u4f5c","text":"<pre><code>from sindre.win_tools import tools\n\n# \u5236\u4f5cNSIS\u5b89\u88c5\u5305\ntools.exe2nsis(\n    work_dir=r\"C:\\project\",\n    files_to_compress=[\n        r\"C:\\project\\app.exe\",\n        r\"C:\\project\\config.ini\",\n        r\"C:\\project\\data\\\"\n    ],\n    exe_name=\"MyApp.exe\"\n)\n</code></pre>"},{"location":"win_tools/#_6","title":"\ud83d\udd27 \u6838\u5fc3\u529f\u80fd","text":""},{"location":"win_tools/#_7","title":"\u6587\u4ef6\u7f16\u8bd1\u51fd\u6570","text":"<pre><code>def py2pyd(source_path: str, clear_py: bool = False):\n    \"\"\"\n    \u5c06\u76ee\u5f55\u4e0b\u6240\u6709py\u6587\u4ef6\u7f16\u8bd1\u6210pyd\u6587\u4ef6\n\n    Args:\n        source_path: \u6e90\u7801\u76ee\u5f55\n        clear_py: \u662f\u5426\u7f16\u8bd1\u540e\u6e05\u9664py\u6587\u4ef6\uff0c\u6ce8\u610f\u5907\u4efd\n    \"\"\"\n\ndef pip_install(package_name: str = \"\", target_dir: str = \"\", requirements_path: str = \"\"):\n    \"\"\"\n    \u6a21\u62dfpip\u5b89\u88c5\n\n    Args:\n        package_name: \u5305\u540d\n        target_dir: \u5b89\u88c5\u76ee\u5f55\uff0c\u4e3a\u7a7a\u5219\u81ea\u52a8\u5b89\u88c5\u5230\u5f53\u524d\u73af\u5883\u4e0b\n        requirements_path: requirements.txt\u8def\u5f84\n    \"\"\"\n\ndef python_installer(install_dir: str, version: str = '3.9.6'):\n    \"\"\"\n    \u81ea\u52a8\u5b89\u88c5Python\n\n    Args:\n        install_dir: \u5b89\u88c5\u76ee\u5f55\n        version: Python\u7248\u672c\n    \"\"\"\n\ndef exe2nsis(work_dir: str, files_to_compress: list, exe_name: str, \n            appname: str = \"AI\", version: str = \"1.0.0.0\", \n            author: str = \"SindreYang\", license: str = \"\", icon_old: str = \"\"):\n    \"\"\"\n    \u5236\u4f5cNSIS\u5b89\u88c5\u5305\n\n    Args:\n        work_dir: \u5de5\u4f5c\u76ee\u5f55\n        files_to_compress: \u8981\u538b\u7f29\u7684\u6587\u4ef6\u5217\u8868\n        exe_name: \u751f\u6210\u7684exe\u540d\u79f0\n        appname: \u5e94\u7528\u540d\u79f0\n        version: \u7248\u672c\u53f7\n        author: \u4f5c\u8005\n        license: \u8bb8\u53ef\u8bc1\n        icon_old: \u56fe\u6807\u8def\u5f84\n    \"\"\"\n</code></pre>"},{"location":"win_tools/#_8","title":"\u7a97\u53e3\u7ba1\u7406\u51fd\u6570","text":"<pre><code>def set_windows_alpha(alpha: int = 255, class_name: str = \"Shell_TrayWnd\"):\n    \"\"\"\n    \u901a\u8fc7\u67e5\u627eclass_name\uff0c\u5f3a\u5236\u7528\u4e8e\u8bbe\u7f6e\u4efb\u52a1\u680f\u900f\u660e\u7a0b\u5ea6\n\n    Args:\n        alpha: \u900f\u660e\u5ea6 (0--\u5b8c\u5168\u900f\u660e\uff0c255--\u5b8c\u5168\u4e0d\u900f\u660e)\n        class_name: \u7a97\u53e3\u7c7b\u540d\n    \"\"\"\n\ndef get_windows_child(hWnd):\n    \"\"\"\n    \u83b7\u53d6\u7a97\u53e3\u7684\u6240\u6709\u5b50\u7a97\u53e3\n\n    Args:\n        hWnd: \u7a97\u53e3\u53e5\u67c4\n\n    Returns:\n        list: \u5b50\u7a97\u53e3\u53e5\u67c4\u5217\u8868\n    \"\"\"\n\ndef HEXtoRGBAint(HEX: str):\n    \"\"\"\n    \u5c06HEX\u989c\u8272\u8f6c\u6362\u4e3aRGBA\u6574\u6570\n\n    Args:\n        HEX: \u5341\u516d\u8fdb\u5236\u989c\u8272\u5b57\u7b26\u4e32\n\n    Returns:\n        int: RGBA\u6574\u6570\u503c\n    \"\"\"\n</code></pre>"},{"location":"win_tools/#_9","title":"\u7cfb\u7edf\u5de5\u5177\u51fd\u6570","text":"<pre><code>def is_service_exists(service_name: str) -&gt; bool:\n    \"\"\"\n    \u68c0\u67e5Windows\u670d\u52a1\u662f\u5426\u5b58\u5728\n\n    Args:\n        service_name: \u670d\u52a1\u540d\u79f0\n\n    Returns:\n        bool: \u670d\u52a1\u662f\u5426\u5b58\u5728\n    \"\"\"\n\ndef check_port(port: int) -&gt; bool:\n    \"\"\"\n    \u68c0\u67e5\u7aef\u53e3\u662f\u5426\u88ab\u5360\u7528\n\n    Args:\n        port: \u7aef\u53e3\u53f7\n\n    Returns:\n        bool: \u7aef\u53e3\u662f\u5426\u88ab\u5360\u7528\n    \"\"\"\n\ndef kill_process_using_port(server_port: int) -&gt; bool:\n    \"\"\"\n    \u6740\u6b7b\u5360\u7528\u6307\u5b9a\u7aef\u53e3\u7684\u8fdb\u7a0b\n\n    Args:\n        server_port: \u7aef\u53e3\u53f7\n\n    Returns:\n        bool: \u662f\u5426\u6210\u529f\u6740\u6b7b\u8fdb\u7a0b\n    \"\"\"\n\ndef download_url_file(url: str, package_path: str = \"test.zip\") -&gt; bool:\n    \"\"\"\n    \u4e0b\u8f7dURL\u6587\u4ef6\n\n    Args:\n        url: \u4e0b\u8f7dURL\n        package_path: \u4fdd\u5b58\u8def\u5f84\n\n    Returns:\n        bool: \u4e0b\u8f7d\u662f\u5426\u6210\u529f\n    \"\"\"\n\ndef zip_extract(zip_path: str, install_dir: str) -&gt; bool:\n    \"\"\"\n    \u89e3\u538bZIP\u6587\u4ef6\n\n    Args:\n        zip_path: ZIP\u6587\u4ef6\u8def\u5f84\n        install_dir: \u89e3\u538b\u76ee\u5f55\n\n    Returns:\n        bool: \u89e3\u538b\u662f\u5426\u6210\u529f\n    \"\"\"\n</code></pre>"},{"location":"win_tools/#_10","title":"\ud83d\udcd6 \u4f7f\u7528\u6307\u5357","text":""},{"location":"win_tools/#1","title":"1. \u7a97\u53e3\u7ba1\u7406","text":""},{"location":"win_tools/#_11","title":"\u8bbe\u7f6e\u7a97\u53e3\u900f\u660e\u5ea6","text":"<pre><code>from sindre.win_tools import taskbar\n\n# \u8bbe\u7f6e\u4efb\u52a1\u680f\u900f\u660e\u5ea6\ntaskbar.set_windows_alpha(255, \"Shell_TrayWnd\")  # \u5b8c\u5168\u4e0d\u900f\u660e\ntaskbar.set_windows_alpha(128, \"Shell_TrayWnd\")  # \u534a\u900f\u660e\ntaskbar.set_windows_alpha(0, \"Shell_TrayWnd\")    # \u5b8c\u5168\u900f\u660e\n\n# \u8bbe\u7f6e\u5176\u4ed6\u7a97\u53e3\u900f\u660e\u5ea6\ntaskbar.set_windows_alpha(200, \"Notepad\")        # \u8bb0\u4e8b\u672c\ntaskbar.set_windows_alpha(150, \"Calculator\")     # \u8ba1\u7b97\u5668\n\n# \u6279\u91cf\u8bbe\u7f6e\u7a97\u53e3\u900f\u660e\u5ea6\nwindows = [\"Notepad\", \"Calculator\", \"Paint\"]\nfor window in windows:\n    try:\n        taskbar.set_windows_alpha(180, window)\n        print(f\"\u8bbe\u7f6e {window} \u900f\u660e\u5ea6\u6210\u529f\")\n    except Exception as e:\n        print(f\"\u8bbe\u7f6e {window} \u900f\u660e\u5ea6\u5931\u8d25: {e}\")\n</code></pre>"},{"location":"win_tools/#_12","title":"\u67e5\u627e\u548c\u7ba1\u7406\u7a97\u53e3","text":"<pre><code>from sindre.win_tools import taskbar\nimport win32gui\n\n# \u67e5\u627e\u7a97\u53e3\u53e5\u67c4\nnotepad_handle = win32gui.FindWindow(\"Notepad\", None)\nif notepad_handle:\n    print(f\"\u8bb0\u4e8b\u672c\u7a97\u53e3\u53e5\u67c4: {notepad_handle}\")\n\n    # \u83b7\u53d6\u5b50\u7a97\u53e3\n    child_windows = taskbar.get_windows_child(notepad_handle)\n    print(f\"\u5b50\u7a97\u53e3\u6570\u91cf: {len(child_windows)}\")\nelse:\n    print(\"\u672a\u627e\u5230\u8bb0\u4e8b\u672c\u7a97\u53e3\")\n\n# \u83b7\u53d6\u6240\u6709\u7a97\u53e3\u4fe1\u606f\ndef list_windows():\n    \"\"\"\u5217\u51fa\u6240\u6709\u53ef\u89c1\u7a97\u53e3\"\"\"\n    def enum_windows_callback(hwnd, windows):\n        if win32gui.IsWindowVisible(hwnd):\n            window_text = win32gui.GetWindowText(hwnd)\n            if window_text:\n                windows.append((hwnd, window_text))\n        return True\n\n    windows = []\n    win32gui.EnumWindows(enum_windows_callback, windows)\n    return windows\n\n# \u663e\u793a\u6240\u6709\u7a97\u53e3\nall_windows = list_windows()\nfor hwnd, title in all_windows[:10]:  # \u663e\u793a\u524d10\u4e2a\n    print(f\"\u7a97\u53e3: {title} (\u53e5\u67c4: {hwnd})\")\n</code></pre>"},{"location":"win_tools/#2","title":"2. \u6587\u4ef6\u7f16\u8bd1","text":""},{"location":"win_tools/#python","title":"Python\u6587\u4ef6\u7f16\u8bd1","text":"<pre><code>from sindre.win_tools import tools\n\n# \u7f16\u8bd1\u6574\u4e2a\u76ee\u5f55\ntools.py2pyd(r\"C:\\project\\src\", clear_py=False)\n\n# \u7f16\u8bd1\u5e76\u5220\u9664\u539f\u6587\u4ef6\ntools.py2pyd(r\"C:\\project\\src\", clear_py=True)\n\n# \u7f16\u8bd1\u7279\u5b9a\u76ee\u5f55\ntools.py2pyd(r\"C:\\project\\src\\utils\", clear_py=False)\n</code></pre>"},{"location":"win_tools/#_13","title":"\u5305\u7ba1\u7406","text":"<pre><code>from sindre.win_tools import tools\n\n# \u5b89\u88c5\u5355\u4e2a\u5305\ntools.pip_install(package_name=\"numpy\")\n\n# \u5b89\u88c5\u5230\u6307\u5b9a\u76ee\u5f55\ntools.pip_install(package_name=\"pandas\", target_dir=r\"C:\\custom_packages\")\n\n# \u4ecerequirements\u6587\u4ef6\u5b89\u88c5\ntools.pip_install(requirements_path=r\"C:\\project\\requirements.txt\")\n\n# \u5b89\u88c5\u5230\u6307\u5b9a\u76ee\u5f55\ntools.pip_install(requirements_path=r\"C:\\project\\requirements.txt\", \n                 target_dir=r\"C:\\project\\packages\")\n</code></pre>"},{"location":"win_tools/#3-python","title":"3. Python\u73af\u5883\u7ba1\u7406","text":"<pre><code>from sindre.win_tools import tools\n\n# \u5b89\u88c5Python 3.9.6\ntools.python_installer(r\"C:\\Python39\", version=\"3.9.6\")\n\n# \u5b89\u88c5Python 3.8.10\ntools.python_installer(r\"C:\\Python38\", version=\"3.8.10\")\n\n# \u5b89\u88c5\u6700\u65b0\u7248\u672c\ntools.python_installer(r\"C:\\Python\", version=\"3.11.0\")\n</code></pre>"},{"location":"win_tools/#4","title":"4. \u5b89\u88c5\u5305\u5236\u4f5c","text":"<pre><code>from sindre.win_tools import tools\n\n# \u57fa\u672c\u5b89\u88c5\u5305\u5236\u4f5c\ntools.exe2nsis(\n    work_dir=r\"C:\\project\",\n    files_to_compress=[\n        r\"C:\\project\\app.exe\",\n        r\"C:\\project\\config.ini\",\n        r\"C:\\project\\data\\\"\n    ],\n    exe_name=\"MyApp.exe\"\n)\n\n# \u81ea\u5b9a\u4e49\u5b89\u88c5\u5305\ntools.exe2nsis(\n    work_dir=r\"C:\\project\",\n    files_to_compress=[\n        r\"C:\\project\\app.exe\",\n        r\"C:\\project\\lib\\\",\n        r\"C:\\project\\resources\\\"\n    ],\n    exe_name=\"MyApp.exe\",\n    appname=\"\u6211\u7684\u5e94\u7528\",\n    version=\"2.1.0\",\n    author=\"\u5f20\u4e09\",\n    license=\"MIT\",\n    icon_old=r\"C:\\project\\icon.ico\"\n)\n</code></pre>"},{"location":"win_tools/#5","title":"5. \u7cfb\u7edf\u5de5\u5177","text":""},{"location":"win_tools/#_14","title":"\u7aef\u53e3\u7ba1\u7406","text":"<pre><code>from sindre.win_tools import tools\n\n# \u68c0\u67e5\u7aef\u53e3\u5360\u7528\nport = 8080\nif tools.check_port(port):\n    print(f\"\u7aef\u53e3 {port} \u88ab\u5360\u7528\")\n\n    # \u6740\u6b7b\u5360\u7528\u8fdb\u7a0b\n    if tools.kill_process_using_port(port):\n        print(f\"\u6210\u529f\u6740\u6b7b\u5360\u7528\u7aef\u53e3 {port} \u7684\u8fdb\u7a0b\")\n    else:\n        print(f\"\u65e0\u6cd5\u6740\u6b7b\u5360\u7528\u7aef\u53e3 {port} \u7684\u8fdb\u7a0b\")\nelse:\n    print(f\"\u7aef\u53e3 {port} \u53ef\u7528\")\n</code></pre>"},{"location":"win_tools/#_15","title":"\u670d\u52a1\u7ba1\u7406","text":"<pre><code>from sindre.win_tools import tools\n\n# \u68c0\u67e5\u670d\u52a1\u662f\u5426\u5b58\u5728\nservice_name = \"MySQL\"\nif tools.is_service_exists(service_name):\n    print(f\"\u670d\u52a1 {service_name} \u5b58\u5728\")\nelse:\n    print(f\"\u670d\u52a1 {service_name} \u4e0d\u5b58\u5728\")\n</code></pre>"},{"location":"win_tools/#_16","title":"\u6587\u4ef6\u4e0b\u8f7d\u548c\u89e3\u538b","text":"<pre><code>from sindre.win_tools import tools\n\n# \u4e0b\u8f7d\u6587\u4ef6\nurl = \"https://example.com/file.zip\"\nif tools.download_url_file(url, \"downloaded_file.zip\"):\n    print(\"\u6587\u4ef6\u4e0b\u8f7d\u6210\u529f\")\n\n    # \u89e3\u538b\u6587\u4ef6\n    if tools.zip_extract(\"downloaded_file.zip\", r\"C:\\extracted\"):\n        print(\"\u6587\u4ef6\u89e3\u538b\u6210\u529f\")\n    else:\n        print(\"\u6587\u4ef6\u89e3\u538b\u5931\u8d25\")\nelse:\n    print(\"\u6587\u4ef6\u4e0b\u8f7d\u5931\u8d25\")\n</code></pre>"},{"location":"win_tools/#_17","title":"\ud83d\ude80 \u9ad8\u7ea7\u529f\u80fd","text":""},{"location":"win_tools/#1_1","title":"1. \u7f51\u7edc\u5de5\u5177","text":""},{"location":"win_tools/#tcp","title":"TCP\u6620\u5c04","text":"<pre><code>from sindre.win_tools import tools\n\n# \u521b\u5efaTCP\u6620\u5c04\nmapping = tools.tcp_mapping_qt(conn_receiver, conn_sender)\nmapping.start()\n\n# IP\u7ed1\u5b9a\nip_binder = tools.ip_bind()\nip_binder.set_ip(\"192.168.1.100\", \"8080\")\nip_binder.start()\n</code></pre>"},{"location":"win_tools/#2_1","title":"2. \u6279\u91cf\u64cd\u4f5c","text":"<pre><code>from sindre.win_tools import tools\nimport os\n\n# \u6279\u91cf\u7f16\u8bd1\u591a\u4e2a\u76ee\u5f55\ndirectories = [\n    r\"C:\\project\\src\\utils\",\n    r\"C:\\project\\src\\models\",\n    r\"C:\\project\\src\\controllers\"\n]\n\nfor directory in directories:\n    if os.path.exists(directory):\n        print(f\"\u7f16\u8bd1\u76ee\u5f55: {directory}\")\n        tools.py2pyd(directory, clear_py=False)\n    else:\n        print(f\"\u76ee\u5f55\u4e0d\u5b58\u5728: {directory}\")\n\n# \u6279\u91cf\u5b89\u88c5\u5305\npackages = [\"numpy\", \"pandas\", \"matplotlib\", \"scikit-learn\"]\nfor package in packages:\n    print(f\"\u5b89\u88c5\u5305: {package}\")\n    tools.pip_install(package_name=package)\n</code></pre>"},{"location":"win_tools/#3","title":"3. \u81ea\u52a8\u5316\u811a\u672c","text":"<pre><code>from sindre.win_tools import tools\nimport os\n\ndef setup_development_environment():\n    \"\"\"\u8bbe\u7f6e\u5f00\u53d1\u73af\u5883\"\"\"\n\n    # 1. \u5b89\u88c5Python\n    python_dir = r\"C:\\Python39\"\n    if not os.path.exists(python_dir):\n        print(\"\u5b89\u88c5Python...\")\n        tools.python_installer(python_dir, version=\"3.9.6\")\n\n    # 2. \u5b89\u88c5\u4f9d\u8d56\u5305\n    requirements_file = r\"C:\\project\\requirements.txt\"\n    if os.path.exists(requirements_file):\n        print(\"\u5b89\u88c5\u4f9d\u8d56\u5305...\")\n        tools.pip_install(requirements_path=requirements_file)\n\n    # 3. \u7f16\u8bd1\u6e90\u4ee3\u7801\n    src_dir = r\"C:\\project\\src\"\n    if os.path.exists(src_dir):\n        print(\"\u7f16\u8bd1\u6e90\u4ee3\u7801...\")\n        tools.py2pyd(src_dir, clear_py=False)\n\n    # 4. \u5236\u4f5c\u5b89\u88c5\u5305\n    print(\"\u5236\u4f5c\u5b89\u88c5\u5305...\")\n    tools.exe2nsis(\n        work_dir=r\"C:\\project\",\n        files_to_compress=[\n            r\"C:\\project\\app.exe\",\n            r\"C:\\project\\src\\\",\n            r\"C:\\project\\config\\\"\n        ],\n        exe_name=\"MyApp.exe\"\n    )\n\n    print(\"\u5f00\u53d1\u73af\u5883\u8bbe\u7f6e\u5b8c\u6210\uff01\")\n\n# \u6267\u884c\u8bbe\u7f6e\nsetup_development_environment()\n</code></pre>"},{"location":"win_tools/#_18","title":"\ud83d\udd27 \u7cfb\u7edf\u96c6\u6210","text":""},{"location":"win_tools/#1-cicd","title":"1. \u4e0eCI/CD\u96c6\u6210","text":"<pre><code>from sindre.win_tools import tools\nimport os\n\ndef ci_build():\n    \"\"\"CI/CD\u6784\u5efa\u6d41\u7a0b\"\"\"\n\n    # \u68c0\u67e5\u73af\u5883\n    if not os.path.exists(\"requirements.txt\"):\n        print(\"\u7f3a\u5c11requirements.txt\u6587\u4ef6\")\n        return False\n\n    # \u5b89\u88c5\u4f9d\u8d56\n    tools.pip_install(requirements_path=\"requirements.txt\")\n\n    # \u7f16\u8bd1\u4ee3\u7801\n    tools.py2pyd(\"src\", clear_py=False)\n\n    # \u5236\u4f5c\u5b89\u88c5\u5305\n    tools.exe2nsis(\n        work_dir=\".\",\n        files_to_compress=[\"app.exe\", \"src/\", \"config/\"],\n        exe_name=\"AppInstaller.exe\"\n    )\n\n    return True\n\nif __name__ == \"__main__\":\n    success = ci_build()\n    exit(0 if success else 1)\n</code></pre>"},{"location":"win_tools/#2-pyinstaller","title":"2. \u4e0ePyInstaller\u96c6\u6210","text":"<pre><code>from sindre.win_tools import tools\nimport subprocess\n\ndef build_with_pyinstaller():\n    \"\"\"\u4f7f\u7528PyInstaller\u6784\u5efa\"\"\"\n\n    # \u5b89\u88c5PyInstaller\n    tools.pip_install(package_name=\"pyinstaller\")\n\n    # \u4f7f\u7528PyInstaller\u6784\u5efa\n    subprocess.run([\n        \"pyinstaller\",\n        \"--onefile\",\n        \"--windowed\",\n        \"app.py\"\n    ])\n\n    # \u5236\u4f5c\u5b89\u88c5\u5305\n    tools.exe2nsis(\n        work_dir=\".\",\n        files_to_compress=[\"dist/app.exe\", \"config/\"],\n        exe_name=\"AppSetup.exe\"\n    )\n\nbuild_with_pyinstaller()\n</code></pre>"},{"location":"win_tools/#_19","title":"\u2753 \u5e38\u89c1\u95ee\u9898","text":""},{"location":"win_tools/#q1-cython","title":"Q1: \u7f16\u8bd1\u65f6\u51fa\u73b0Cython\u9519\u8bef\uff1f","text":"<p>A: \u9700\u8981\u5b89\u88c5Cython\uff1a</p> <pre><code>tools.pip_install(package_name=\"cython\")\n</code></pre>"},{"location":"win_tools/#q2","title":"Q2: \u7a97\u53e3\u900f\u660e\u5ea6\u8bbe\u7f6e\u4e0d\u751f\u6548\uff1f","text":"<p>A: \u786e\u4fdd\u5df2\u5b89\u88c5pywin32\uff1a</p> <pre><code>tools.pip_install(package_name=\"pywin32\")\n</code></pre>"},{"location":"win_tools/#q3-nsis","title":"Q3: NSIS\u5b89\u88c5\u5305\u5236\u4f5c\u5931\u8d25\uff1f","text":"<p>A: \u68c0\u67e5\u4ee5\u4e0b\u51e0\u70b9\uff1a 1. \u786e\u4fdd\u6587\u4ef6\u8def\u5f84\u5b58\u5728 2. \u786e\u4fdd\u6709\u8db3\u591f\u7684\u78c1\u76d8\u7a7a\u95f4 3. \u68c0\u67e5\u6587\u4ef6\u6743\u9650</p>"},{"location":"win_tools/#q4","title":"Q4: \u7aef\u53e3\u68c0\u67e5\u4e0d\u51c6\u786e\uff1f","text":"<p>A: \u4f7f\u7528\u7ba1\u7406\u5458\u6743\u9650\u8fd0\u884c\u7a0b\u5e8f\uff0c\u6216\u8005\uff1a</p> <pre><code># \u624b\u52a8\u68c0\u67e5\u7aef\u53e3\nimport socket\ndef check_port_manual(port):\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        return s.connect_ex(('localhost', port)) == 0\n</code></pre>"},{"location":"win_tools/#q5-python","title":"Q5: Python\u5b89\u88c5\u5931\u8d25\uff1f","text":"<p>A: \u53ef\u80fd\u7684\u539f\u56e0\uff1a 1. \u7f51\u7edc\u8fde\u63a5\u95ee\u9898 2. \u78c1\u76d8\u7a7a\u95f4\u4e0d\u8db3 3. \u6743\u9650\u4e0d\u8db3</p>"},{"location":"win_tools/#q6","title":"Q6: \u5982\u4f55\u8c03\u8bd5\u7f16\u8bd1\u95ee\u9898\uff1f","text":"<p>A: \u67e5\u770b\u7f16\u8bd1\u65e5\u5fd7\uff1a</p> <pre><code># \u7f16\u8bd1\u65f6\u4fdd\u7559\u4e34\u65f6\u6587\u4ef6\ntools.py2pyd(\"src\", clear_py=False)\n# \u68c0\u67e5tmp\u76ee\u5f55\u4e2d\u7684\u7f16\u8bd1\u65e5\u5fd7\n</code></pre>"},{"location":"win_tools/#_20","title":"\ud83d\udcca \u6027\u80fd\u57fa\u51c6","text":"\u64cd\u4f5c \u6570\u636e\u5927\u5c0f \u65f6\u95f4 \u5185\u5b58\u4f7f\u7528 \u6587\u4ef6\u7f16\u8bd1 100\u4e2aPY\u6587\u4ef6 ~30s ~50MB \u5b89\u88c5\u5305\u5236\u4f5c 100MB\u6587\u4ef6 ~60s ~200MB Python\u5b89\u88c5 \u6807\u51c6\u5b89\u88c5 ~120s ~500MB \u7a97\u53e3\u900f\u660e\u5ea6 \u5355\u4e2a\u7a97\u53e3 ~0.1s ~1MB"},{"location":"win_tools/#_21","title":"\ud83d\udd17 \u76f8\u5173\u94fe\u63a5","text":"<ul> <li>Windows API\u6587\u6863</li> <li>PyWin32\u6587\u6863</li> <li>NSIS\u6587\u6863</li> <li>Python\u7f16\u8bd1\u6587\u6863</li> </ul>   **\u5982\u6709\u95ee\u9898\uff0c\u8bf7\u67e5\u770b [\u5e38\u89c1\u95ee\u9898](#\u5e38\u89c1\u95ee\u9898) \u6216\u63d0\u4ea4 [Issue](https://github.com/SindreYang/sindre/issues)**"}]}